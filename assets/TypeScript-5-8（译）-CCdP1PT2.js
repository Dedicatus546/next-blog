import{createElementBlock as n,openBlock as e,createStaticVNode as p}from"vue";const t={class:"kan-doc"},c="TypeScript 5.8（译）",h=["TypeScript","JavaScript"],o=["编程"],g="2025-03-03T22:45:58.000Z",y="2025-03-04T14:54:58.000Z",k=1741013159,A=7594,D={__name:"TypeScript-5-8（译）",setup(l,{expose:a}){return a({frontmatter:{title:"TypeScript 5.8（译）",tags:["TypeScript","JavaScript"],categories:["编程"],date:"2025-03-03T22:45:58.000Z",updated:"2025-03-04T14:54:58.000Z",key:1741013159,wordCount:7594}}),(r,s)=>(e(),n("div",t,s[0]||(s[0]=[p(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>原文地址：<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-8/" target="_blank" rel="noopener">Announcing TypeScript 5.8</a></p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><h2 id="细粒化检测返回表达式的分支" tabindex="-1">细粒化检测返回表达式的分支 <a class="header-anchor" href="#细粒化检测返回表达式的分支">🔗</a></h2><p>考虑一段如下的代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">declare const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">untypedCache</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Map</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getUrlObject</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">urlString</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> URL</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> untypedCache</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">has</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">urlString</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> untypedCache</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">get</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">urlString</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> :</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> urlString</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这段代码的意图是如果缓存中存在的话，从缓存中取 URL 对象，如果缓存中不存在，则创建一个新的对象。然而这里有一个 bug ：我们实际上忘记根据输入构建一个新的 URL 对象。不幸的是， TypeScript 通常不会捕获这类错误。</p><p>当 TypeScript 检查条件表达式，比如 <code>cond ? trueBranch : falseBranch</code> ，它的类型被视为两个分支类型的联合类型。换句话说，它会计算 <code>trueBranch</code> 和 <code>falseBranch</code> 的类型，然后将它们合并为一个联合类型。在这种情况下，类型 <code>untypedCache.get(urlString)</code> 的类型是 <code>any</code> ，而 <code>urlString</code> 的类型为 <code>string</code> 。这正是原因所在，因为 <code>any</code> 很容易感染和它产生关系的其他类型。联合类型 <code>any | string</code> 可以简化为 <code>any</code> ，所以在 TypeScript 开始检查 <code>return</code> 语句的表达式是否和预期返回的 <code>URL</code> 类型兼容之前，类型系统就已经丢失了可以捕获此代码错误的任何信息了。</p><p>在 TypeScript 5.8 中，类型系统将 <code>return</code> 语句中直接返回的条件表达式的语句视为特殊情况，每个条件分支都会和函数返回类型的声明（如果存在的话）进行比较，这样类型系统就可以捕获上面例子中的 bug 了。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">declare const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">untypedCache</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Map</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getUrlObject</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">urlString</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> URL</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> untypedCache</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">has</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">urlString</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> untypedCache</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">get</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">urlString</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> :</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> urlString</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //  ~~~~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // error! Type &#39;string&#39; is not assignable to type &#39;URL&#39;.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 错误！&#39;string&#39; 类型无法分配个 &#39;URL&#39; 类型</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这个变更来源于这个 <a href="https://github.com/microsoft/TypeScript/pull/56941" target="_blank" rel="noopener">PR</a> ，它会作为 TypeScript 未来更广泛改进的一部分。</p><h2 id="支持在-module-nodenext-下在-esm-模块中调用-require" tabindex="-1">支持在 <code>--module nodenext</code> 下在 ESM 模块中调用 <code>require()</code> <a class="header-anchor" href="#支持在-module-nodenext-下在-esm-模块中调用-require">🔗</a></h2><p>多年来， Node 支持了 ESM 模块和 CommonJS 模块。不幸的是，两者之间的互操作性存在一些挑战。</p><ul><li>ESM 模块可以 <code>import</code> CommonJS 模块。</li><li>CommonJS 模块无法 <code>require</code> ESM 模块。</li></ul><p>换句话说，在 ESM 模块中使用 CommonJS 模块是可以的，但是反之则不行。这给那些想要提供 ESM 模块支持的库作者带来了很多挑战。这部分库作者要么双重发布（为 ESM 和 CommonJS 提供不同的入口点）他们的库，这不得不破坏用户在 CommonJS 使用下的兼容性，要么只能继续无期限地将库维持在 CommonJS 下。虽然双重发布可能听起来是个不错的折中方案，但是这个方案复杂且容易出错，还会使包大小增加大约一倍。</p><p>Node 22 放宽了这些限制，允许从 CommonJS 模块中调用 <code>require(&quot;esm&quot;)</code> 来导入 ESM 模块。 虽然 Node 仍然不允许在一个包含顶层 await 的 ESM 模块中调用 <code>require()</code> ， 但现在 CommonJS 模块可以引用了大多数 ESM 模块了。这为库作者提供了一个重要的机会，使得他们无需双重发布他们的包就可以提供 ESM 模块支持。</p><p>TypeScript 5.8 在 <code>--module nodenext</code> 下支持了这个行为。当 <code>--module nodenext</code> 开启时， TypeScript 不会对那些在 ESM 模块中的 <code>require()</code> 调用报错。</p><p>由于这个特性可能移植到低版本的 Node 中，所以目前通过 <code>--module nodeXXXX</code> 来开启这个行为的功能是不稳定的。但是，我们预测将来的 TypeScript 版本会能够在 node20 下稳定这个功能。同时，我们鼓励使用 Node22 及以上的用户使用 <code>--module nodenext</code> ， 而库作者和那些使用旧版本 Node 的用户应该继续使用 <code>--module node16</code> （或者打个次要更新补丁升级到 <code>--module node18</code> ）。</p><p>更多信息，可以查看这个 [PR]<a href="https://github.com/microsoft/TypeScript/pull/60761" target="_blank" rel="noopener">https://github.com/microsoft/TypeScript/pull/60761</a>) 。</p><h2 id="module-node18" tabindex="-1"><code>--module node18</code> <a class="header-anchor" href="#module-node18">🔗</a></h2><p>TypeScript 5.8 引入了稳定的 <code>--module node18</code> 的标志。这个标志为那些仍然使用 Node18 的用户提供了一个稳定的功能列表，不会包含 <code>--module nodenext</code> 下的一些行为，具体为：</p><ul><li><code>node18</code> 下不允许 ESM 模块内使用 <code>require()</code> ，但 <code>nodenext</code> 允许。</li><li><code>node18</code> 下允许使用导入断言（已废弃，改为使用导入属性），但 <code>nodenext</code> 不允许。</li></ul><p>在此查看相关的 <a href="https://github.com/microsoft/TypeScript/pull/60722" target="_blank" rel="noopener">PR1</a> 和 <a href="https://github.com/microsoft/TypeScript/pull/60761" target="_blank" rel="noopener">PR2</a> 。</p><h2 id="erasablesyntaxonly" tabindex="-1"><code>--erasableSyntaxOnly</code> <a class="header-anchor" href="#erasablesyntaxonly">🔗</a></h2><p>最近， Node23.6 把直接运行 TypeScript 文件的实验支持的标志取消了，虽然在这个模式下只支持了某些结构。 Node 取消了 <code>--experimental-strip-types</code> 标志，这个标志要求任何 TypeScript 特有的语法不能存在运行时语义。换句话说，必须能够简单地擦除或者说“去掉”文件中的任何 TypeScript 特有的语法，从而留下一个合法的 JavaScript 文件。</p><p>这意味着如下的构造将不被支持：</p><ul><li><code>enum</code> 定义</li><li>带有运行时代码的命名空间（ <code>namespace</code> ）和模块（ <code>module</code> ）</li><li>类内的参数属性</li><li>导入别名（ <code>import = </code> ）</li></ul><p>下面是一些例子：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ❌ error: A namespace with runtime code.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 命名空间带有运行时代码</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">namespace</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> container</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  foo</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">method</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> type</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Bar</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ❌ error: An \`import =\` alias</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 导入别名</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Bar</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> container</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Bar</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Point</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ❌ error: Parameter properties</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 构造函数的参数属性</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">public</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> public</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ❌ error: An enum declaration.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// enum 定义</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">enum</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Direction</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Up</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Down</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Left</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Right</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>类似的工具，比如 ts-blank-space 或者 Amaro （ Node 下潜在的类型去除库）也有相同的限制。这些工具在遇到那些不符合这些要求的代码时会提供有用的错误的信息，但实际上只有真正去尝试执行代码的话，才会发现代码无法正常工作。</p><p>这就是为什么 TypeScript 5.8 引入了 <code>--erasableSyntaxOnly</code> 的标志。当这个标志开启时， TypeScript 会对那些带有运行时行为的 TypeScript 特有的构造报错。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> C</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">public</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //          ~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // error! This syntax is not allowed when &#39;erasableSyntaxOnly&#39; is enabled.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 错误！开启 erasableSyntaxOnly 后不允许改语法。</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">}</span></span></code></pre><p>通常，你会想要将这个标志和 <code>--verbatimModuleSyntax</code> 结合起来，以此确保模块包含了恰当的导入语法，并且不会省略导入。</p><p>更多信息查看此 <a href="https://github.com/microsoft/TypeScript/pull/61011" target="_blank" rel="noopener">PR</a> 。</p><h2 id="libreplacement" tabindex="-1"><code>--libReplacement</code> <a class="header-anchor" href="#libreplacement">🔗</a></h2><p>在 TypeScript 4.5 ，引入了用自定文件替代默认 <code>lib</code> 文件的远景，它基于从一个名为 <code>@typescript/lib-*</code> 包中解析库文件。比如，你可以把 <code>dom</code> 库锁在一个特定的 <a href="https://www.npmjs.com/package/@types/web?activeTab=readme" target="_blank" rel="noopener">@types/web</a> 包版本，它的 <code>package.json</code> 看起来如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">devDependencies</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">@typescript/lib-dom</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">npm:@types/web@0.0.199</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>当安装依赖的时候，由于存在 <code>@typescript/lib-dom</code> 包，当在设置中使用了 <code>dom</code> 时， TypeScript 会从该包中查找。</p><p>这是一个强大的特性，但也导致了一些额外的工作。即使你没有使用这个特性， TypeScript 仍然会执行这些查找，并且必须监听 <code>node_modules</code> 内的变更，防止一个 <code>lib</code> 开头的替换包出现但没有生效的问题。</p><p>TypeScript 5.8 引入了 <code>--libReplacement</code> 标志，它允许你关闭这个行为。如果你没有使用 <code>--libReplacement</code> ，那么现在你就可以通过 <code>--libReplacement false</code> 来禁用它。未来 <code>--libReplacement false</code> 可能会成为默认选项，所以如果当前依赖这些行为，则应该明确考虑通过 <code>--libReplacement true</code> 开启它。</p><p>更多信息查看 <a href="https://github.com/microsoft/TypeScript/issues/61023" target="_blank" rel="noopener">PR</a> 。</p><h2 id="在声明文件中保存计算属性名称" tabindex="-1">在声明文件中保存计算属性名称 <a class="header-anchor" href="#在声明文件中保存计算属性名称">🔗</a></h2><p>为了让计算属性在声明文件中的输出更加可预测， TypeScript 5.8 会始终在类的计算属性名称中保存实体名称（裸变量或者类似 <code>a.b.c.d</code>）。</p><p>比如考虑如下代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">propName</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">theAnswer</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MyClass</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">propName</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 42</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //  ~~~~~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // error!</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // A computed property name in a class property declaration must have a simple literal type or a &#39;unique symbol&#39; type.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 类的计算属性必须有一个简单的字面类型或者一个 &#39;unique symbol&#39; 类型。</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>先前版本的 TypeScript 在为这个模块生成定义文件时会报错，声明文件会生成一个索引签名。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> declare let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">propName</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> declare</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MyClass</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">]: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>在 TypeScript 5.8 中上面例子现在不会报错了，并且生成的声明文件会和你的代码相匹配：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> declare let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">propName</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> declare</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MyClass</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">propName</span><span style="--s-dark:#666666;--s-light:#999999;">]: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>注意这不会在类上创建静态命名的属性。你最终仍然得到一个像 <code>[x: string]: number</code> 的有效的索引签名，因此如果想要这么做的话，则需要使用 <code>unique symbol</code> 或者字面类型。</p><p>注意这段代码现在在 <code>--isolatedDeclarations</code> 标志下仍然是错误的。但我们预计，得益于这个变更，计算属性名称将可以合法地输出到声明中。</p><p>注意可能（不太可能）存在一个在 TypeScript 5.8 编译生成的声明文件无法兼容 TypeScript 5.7 及之前版本的情况。</p><p>更多信息，查看此 [PR]<a href="https://github.com/microsoft/TypeScript/pull/60052" target="_blank" rel="noopener">https://github.com/microsoft/TypeScript/pull/60052</a>) 。</p><h2 id="优化程序的加载和更新" tabindex="-1">优化程序的加载和更新 <a class="header-anchor" href="#优化程序的加载和更新">🔗</a></h2><p>TypeScript 5.8 引入了多个优化，缩短了构建程序的时间，并且也可以在 <code>--watch</code> 模式或者编辑器场景下的文件变更时更新程序。</p><p>首先，TypeScript 现在避免在执行路径标准化时的数组分配。通常，路径标准化会涉及将路径的每部分分段放入一个字符串数组中，基于相关段来规范结果路径，之后使用规范的分隔符再把它们拼到一起。对于那些有许多文件的项目，这个过程是一个巨大且重复的工作。 TypeScript 现在会避免分配数组，而是更多地通过索引直接对源路径进行操作。</p><p>另外，当出现不会改变项目的基础结构的编辑操作时， TypeScript 现在会避免重新验证提供给它的设置（比如 tsconfig.json 的文件内容）。这意味着，比如，简单的编辑可能不要求检查项目的输出路径是否和输入路径相冲突，它会使用上次检查的结果。这能让大项目内的编辑操作响应更快。</p><h2 id="需要注意的行为变更" tabindex="-1">需要注意的行为变更 <a class="header-anchor" href="#需要注意的行为变更">🔗</a></h2><h3 id="lib-d-ts" tabindex="-1">lib.d.ts <a class="header-anchor" href="#lib-d-ts">🔗</a></h3><p>详情请查看<a href="https://github.com/microsoft/TypeScript/pull/60985" target="_blank" rel="noopener">此处</a>。</p><h4 id="module-nodenext-限制导入断言" tabindex="-1"><code>--module nodenext</code> 限制导入断言 <a class="header-anchor" href="#module-nodenext-限制导入断言">🔗</a></h4><p>导入断言是 ECMAScript 的一个提案，用来保证一个导入的某些属性（比如 “这个模块是 JSON ，它不是用来执行 JavaScript 代码的”）。这里还有一个<a href="https://github.com/tc39/proposal-import-attributes" target="_blank" rel="noopener">导入属性</a>的提案，作为过渡的一部分，从 使用 <code>assert</code> 关键字改为 <code>with</code> 关键字。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// An import assertion ❌ - not future-compatible with most runtimes.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 导热油迪亚比他不</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> data</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./data.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> assert</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#B8A965;--s-light:#998418;"> type</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// An import attribute ✅ - the preferred way to import a JSON file.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 导入属性</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> data</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./data.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> with</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#B8A965;--s-light:#998418;"> type</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> };</span></span></code></pre><p>Node22 不再接受使用 <code>assert</code> 语法的导入断言。而当在 TypeScript 5.8 开启 <code>--module nodenext</code> 时， TypeScript 会在遇到导入断言时报错。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> data</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./data.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> assert</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#B8A965;--s-light:#998418;"> type</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> };</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//                             ~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// error! Import assertions have been replaced by import attributes. Use &#39;with&#39; instead of &#39;assert&#39;</span></span></code></pre><p>更多信息查看此 <a href="https://github.com/microsoft/TypeScript/pull/60761" target="_blank" rel="noopener">PR</a> 。</p>`,66)])))}};export{o as categories,g as date,D as default,k as key,h as tags,c as title,y as updated,A as wordCount};
