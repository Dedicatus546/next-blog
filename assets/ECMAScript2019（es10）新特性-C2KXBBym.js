import{createElementBlock as t,openBlock as n,createStaticVNode as p}from"vue";import{c as l}from"./app-2Hgo7EZs.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const e={class:"kan-doc"},u="ECMAScript2019（es10）新特性",F="2024-12-23T16:06:35.000Z",q="2024-12-26T15:57:35.000Z",v=["JavaScript"],S=["笔记"],E=1734011336,x=4085,j=[{property:"og:title",content:"ECMAScript2019（es10）新特性"},{name:"twitter:title",content:"ECMAScript2019（es10）新特性"}],M={__name:"ECMAScript2019（es10）新特性",setup(i,{expose:a}){return a({frontmatter:{title:"ECMAScript2019（es10）新特性",date:"2024-12-23T16:06:35.000Z",updated:"2024-12-26T15:57:35.000Z",tags:["JavaScript"],categories:["笔记"],key:1734011336,wordCount:4085,meta:[{property:"og:title",content:"ECMAScript2019（es10）新特性"},{name:"twitter:title",content:"ECMAScript2019（es10）新特性"}]}}),l({title:"ECMAScript2019（es10）新特性",meta:[{property:"og:title",content:"ECMAScript2019（es10）新特性"},{name:"twitter:title",content:"ECMAScript2019（es10）新特性"}]}),(h,s)=>(n(),t("div",e,s[0]||(s[0]=[p(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>ECMAScript2019（es10）新特性。</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><h2 id="array-prototype-flat" tabindex="-1">Array.prototype.flat <a class="header-anchor" href="#array-prototype-flat">🔗</a></h2><p>该函数可以帮助我们打平一个数组，即如果一个数组内存在数组元素，调用它就可以把该数组元素中的元素放到原数组内，比如：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">]].</span><span style="--s-dark:#80A665;--s-light:#59873A;">flat</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 [1, 2, 3, 4, 5]</span></span></code></pre><p>该方法不会修改原来的数组，在默认的情况下，它只会打平第一层的数组，即 <code>flat(1)</code> ，如果想要打平所有数组元素（无论多深），可以将参数设置为 <code>Number.MAX_SAFE_INTEGER</code> ，比如：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">6</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 7</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">8</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 9</span><span style="--s-dark:#666666;--s-light:#999999;">]]]].</span><span style="--s-dark:#80A665;--s-light:#59873A;">flat</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Number</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">MAX_SAFE_INTEGER</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span></code></pre><p>如果原数组内存在一些空值（empty 值），则 <code>flat</code> 会忽略这些值，比如：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 6</span><span style="--s-dark:#666666;--s-light:#999999;">]].</span><span style="--s-dark:#80A665;--s-light:#59873A;">flat</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 [1, 3, 4, 5, 6]</span></span></code></pre><p>这个忽略只会影响到打平的层数，比如默认打平一层，那么忽略这些空值只会在最外层和第一层，而第二层（即第一层内的数组元素）则不会受影响。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 6</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">7</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 8</span><span style="--s-dark:#666666;--s-light:#999999;">]]].</span><span style="--s-dark:#80A665;--s-light:#59873A;">flat</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 [1, 3, 4, 5, 6, [7, , 8]]</span></span></code></pre><p>可以理解为<strong>浅拷贝</strong>了一个数组，如果某个数组元素不会被打平，那么它只会被简单地赋值过来，也就是原来是什么样的，结果里面就是什么样的。</p><h2 id="array-prototype-flatmap" tabindex="-1">Array.prototype.flatMap <a class="header-anchor" href="#array-prototype-flatmap">🔗</a></h2><p>这个函数为 <code>flat</code> 和 <code>map</code> 的结合。要注意，这里是先 <code>map</code> 再 <code>flat</code> ，而不是先 <code>flat</code> 再 <code>map</code> ，很容易被函数名给诱导到，它的参数和 <code>map</code> 一样，同时它的 <code>flat</code> 只打平一层，即 <code>[].flatMap()</code> 可以等效于 <code>[].map().flat()</code> 。例子如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">].</span><span style="--s-dark:#80A665;--s-light:#59873A;">flatMap</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">item</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">item</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> item</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> item</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> item</span><span style="--s-dark:#666666;--s-light:#999999;">]);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 [2, 1, 4, 4, 6, 9, 8, 16]</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 上面的等效于下面</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">].</span><span style="--s-dark:#80A665;--s-light:#59873A;">map</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">item</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">item</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> item</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> item</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> item</span><span style="--s-dark:#666666;--s-light:#999999;">]).</span><span style="--s-dark:#80A665;--s-light:#59873A;">flat</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// [1, 2, 3, 4].map(item =&gt; [item + item, item * item]) 的值为 [[2, 1], [4, 4], [6, 9], [8, 16]]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 然后</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// [[2, 1], [4, 4], [6, 9], [8, 16]].flat() 的值为 [2, 1, 4, 4, 6, 9, 8, 16]</span></span></code></pre><p>PS： <code>Array</code> 上的迭代的方法，比如 <code>forEach</code> ， <code>map</code> ， <code>filter</code> 等，都存在第二个参数，这个参数可以指定回调的 this 的值，不过一般我们都是用箭头函数，所以这个参数基本用不到。</p><h2 id="object-fromentries" tabindex="-1">Object.fromEntries <a class="header-anchor" href="#object-fromentries">🔗</a></h2><p>这个方法为 <code>Object.entries</code> 的逆操作，它的参数为一个可迭代的对象，可迭代对象的定义可以在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">MDN</a> 上查看。一般而言，我们基本上传入 map 或者数组，比如：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">Object</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">fromEntries</span><span style="--s-dark:#666666;--s-light:#999999;">([[</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">],</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">b</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">]]);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 { a: 1, b: 2 }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> map</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Map</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">map</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">set</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">map</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">set</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">b</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">Object</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">fromEntries</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">map</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 { a: 1, b: 2 }</span></span></code></pre><h2 id="string-prototype-trimstart-和-string-prototype-trimend" tabindex="-1">String.prototype.trimStart 和 String.prototype.trimEnd <a class="header-anchor" href="#string-prototype-trimstart-和-string-prototype-trimend">🔗</a></h2><p>这个方法为 <code>String.prototype.trim</code> 的细化，默认情况下， <code>trim</code> 会移除开头和结尾的空格，而 <code>trimStart</code> 为移除开头的空格， <code>trimEnd</code> 为移除结尾的空格，例子如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">  1234   </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">trim</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &quot;1234&quot;</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">  1234   </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">trimStart</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &quot;1234   &quot;</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">  1234   </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">trimEnd</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &quot;   1234&quot;</span></span></code></pre><h2 id="try-catch-省略异常变量" tabindex="-1">try-catch 省略异常变量 <a class="header-anchor" href="#try-catch-省略异常变量">🔗</a></h2><p>这个特性可以忽略 <code>catch</code> 的参数，之前，我们必须声明异常变量，即：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">try</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 一些可能产生异常的操作</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> catch</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> /* 这里必须声明异常变量 */</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>而这个特性则可以让我们省略异常变量，即：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">try</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 一些可能产生异常的操作</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> catch</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 无需声明异常变量</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这个特性只能说是聊胜于无，少写了几个字符，<s>按代码量考核的慎用</s>。</p><h2 id="function-prototype-tostring-改进" tabindex="-1">Function.prototype.toString 改进 <a class="header-anchor" href="#function-prototype-tostring-改进">🔗</a></h2><p>现在 <code>Function.prototype.toString</code> 方法会完整返回源码，包括注释，以及空格，比如：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> /* 函数名为 fn */</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 函数的内容</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">toString</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &#39;function fn /* 函数名为 fn */ () {\\n</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 函数的内容\\n}&#39;</span></span></code></pre><p>又是一个看起来有点鸡肋的特性。和日常搬砖没什么关系。</p><h2 id="symbol-prototype-description" tabindex="-1">Symbol.prototype.description <a class="header-anchor" href="#symbol-prototype-description">🔗</a></h2><p>通过 Symbol 对象的 <code>description</code> 属性，可以访问到该对象的描述。</p><p>不过这里可能有小伙伴就有疑问了：不是哥们，这个属性放在 <code>prototype</code> 上，那不同的 Symbol 不就共享了同一个 <code>description</code> 吗🧐？</p><p>没错，这也是我刚开始的疑问，经过一番查找后，我找到了官方的解释，其实这个 <code>Symbol.prototype.description</code> 它是一个访问器属性，也就是它是一个有 getter 但是没 setter 的属性。在规范上我们可以看到对他的定义：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/23/20241223150808316.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/23/20241223150808316.avif" alt=""></a></p><p>可以看到，它的取值是根据 this 来确定的，这样就可以正确区分不同的 Symbol 对象，对于一个 getter ，你可以理解为就是每当读取它的时候，它会执行一段逻辑来获取值，就有点类似调用函数，不过它看起来跟一个属性一样。</p><p>在理解这个问题之后，使用它也会变得容易了，比如：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> s1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">描述1</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> s2</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">描述2</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">s1</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">description</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &quot;描述1&quot;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">s2</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">description</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &quot;描述2&quot;</span></span></code></pre><p>它和 <code>Symbol.prototype.toString</code> 的区别就是不会被 <code>&quot;Symbol()&quot;</code> 包住，比如：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> s1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">描述1</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">s1</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">description</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &quot;描述1&quot;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">s1</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">toString</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &quot;Symbol(描述1)&quot;</span></span></code></pre><h2 id="优化-json-stringify-对非法-unicode-字符的处理" tabindex="-1">优化 JSON.stringify 对非法 Unicode 字符的处理 <a class="header-anchor" href="#优化-json-stringify-对非法-unicode-字符的处理">🔗</a></h2><p>这个特性是为了让 <code>JSON.stringify</code> 在遇到复杂字符，也就是超出 BMP （基本多文种）平面时，正确处理不合法的 Unicode 字符，比如单独的代理对。</p><p>可以简单理解为更好地支持 Unicode 字符。比如可以在 node10 和 node23 下执行，下面的代码，可以发现 node10 输出会是乱码，而 node23 正确输出（node12 支持了 es2019 ）：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 合法的 Unicode 代理对，下面两个是等价的。</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">JSON</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">stringify</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">𝌆</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // node10 乱码 node23 输出 &quot;𝌆&quot;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">JSON</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">stringify</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\uD834\\uDF06</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // node10 乱码 node23 输出 &quot;𝌆&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 不合法的 Unicode 代理对</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">JSON</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">stringify</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\uDF06\\uD834</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">));</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // node10 乱码 node23 输出 &quot;\\udf06\\ud834&quot;</span></span></code></pre><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>ECMAScript 规范的补全计划进行中…</p>`,49)])))}};export{S as categories,F as date,M as default,E as key,j as meta,v as tags,u as title,q as updated,x as wordCount};
