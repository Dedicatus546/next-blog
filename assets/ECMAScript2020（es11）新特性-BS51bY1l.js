import{createElementBlock as n,openBlock as l,createStaticVNode as p}from"vue";import{c as t}from"./app-C7bQa6bS.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const e={class:"kan-doc"},m="ECMAScript2020（es11）新特性",E="2024-12-24T17:25:28.000Z",v="2024-12-25T23:43:34.000Z",F=["JavaScript"],x=["笔记"],j=1734011336,q=7150,S=[{property:"og:title",content:"ECMAScript2020（es11）新特性"},{name:"twitter:title",content:"ECMAScript2020（es11）新特性"}],N={__name:"ECMAScript2020（es11）新特性",setup(i,{expose:a}){return a({frontmatter:{title:"ECMAScript2020（es11）新特性",date:"2024-12-24T17:25:28.000Z",updated:"2024-12-25T23:43:34.000Z",tags:["JavaScript"],categories:["笔记"],key:1734011336,wordCount:7150,meta:[{property:"og:title",content:"ECMAScript2020（es11）新特性"},{name:"twitter:title",content:"ECMAScript2020（es11）新特性"}]}}),t({title:"ECMAScript2020（es11）新特性",meta:[{property:"og:title",content:"ECMAScript2020（es11）新特性"},{name:"twitter:title",content:"ECMAScript2020（es11）新特性"}]}),(g,s)=>(l(),n("div",e,s[0]||(s[0]=[p(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>ECMAScript2020（es11）新特性。</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><h2 id="可选链" tabindex="-1">可选链 <a class="header-anchor" href="#可选链">🔗</a></h2><p>在 es11 之前，如果想要读取一个对象的深层的属性，并且需要防止 <code>null</code> 或者 <code>undefined</code> 错误，一般我们会写下如下的代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  a</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    b</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">      c</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        d</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">      ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">c</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">        ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">c</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">d</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">        :</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">      :</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    :</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  :</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>或者我们使用 <code>&amp;&amp;</code> 的短路特性：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  a</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    b</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">      c</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        d</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">c</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">c</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">d</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>当然这两种形式都一个问题，那就是链上的值不能是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy" target="_blank" rel="noopener">Falsy（虚值）</a> ，如果存在这种情况，你还得手动判断 <code>null</code> 和 <code>undefined</code> ，比如下面这样：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  a</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    b</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">      c</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        d</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isNullOrUndefined</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isNullOrUndefined</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">o</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  ?</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isNullOrUndefined</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    ?</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isNullOrUndefined</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">      ?</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isNullOrUndefined</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">c</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">        ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">c</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">d</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">        :</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">      :</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    :</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  :</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>这几种形式只能说是差强人意。所以 es11 提供了可选链的语法，高效地来处理这种情况。</p><p>可选链有三种形式，分别为</p><ul><li>直接属性名 <code>a?.propertyName</code></li><li>方括号 <code>a?.[propertyName]</code></li><li>函数调用 <code>a?.()</code></li></ul><p>在可选链前的对象为 <code>null</code> 和 <code>undefined</code> 的情况下，表达式会直接返回 <code>undefined</code> ，并且后续的可选链都不会执行，其实它就是等效于上面的 <code>isNullOrUndefined</code> 的写法。它的用法如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  a</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    b</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">      c</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        d</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#666666;--s-light:#999999;">?.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">b</span><span style="--s-dark:#666666;--s-light:#999999;">?.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">c</span><span style="--s-dark:#666666;--s-light:#999999;">?.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">d</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>可选链只会在值为 <code>null</code> 和 <code>undefined</code> 的情况下短路，对 Falsy 值也会直接调用：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">o</span><span style="--s-dark:#666666;--s-light:#999999;">?.</span><span style="--s-dark:#80A665;--s-light:#59873A;">toString</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &quot;false&quot; 而不是 undefined</span></span></code></pre><h2 id="空值合并" tabindex="-1">空值合并 <a class="header-anchor" href="#空值合并">🔗</a></h2><p>在 es11 前，如果想要判断一个值是不是 <code>undefined</code> 或者 <code>null</code> ，可以用如下的形式：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 宽松相等</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">o</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ==</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 做一些操作</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 或者</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">o</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 做一些操作</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>如果只是简单的赋值操作，还可以使用三元表达式：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ==</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ?</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">嘻嘻</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> :</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">不嘻嘻</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 或者</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ?</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">嘻嘻</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> :</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">不嘻嘻</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>写法上还是有些繁琐，所以引入了 <code>??</code> 的操作符，当左侧的值为 <code>null</code> 或者 <code>undefined</code> ，则返回右侧的值，否则返回左侧的值。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> === </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">undefined</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ??</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">不嘻嘻</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &quot;不嘻嘻&quot;</span></span></code></pre><p>注意，空值操作符 <code>??</code> 有<strong>短路特性</strong>，这意味着如果 <code>??</code> 右侧为一个函数，如果 <code>??</code> 左边不为 <code>null</code> 和 <code>undefined</code> ，右侧的函数就不会执行，代码如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">执行了</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ??</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 无输出</span></span></code></pre><h2 id="globalthis-全局对象" tabindex="-1">globalThis 全局对象 <a class="header-anchor" href="#globalthis-全局对象">🔗</a></h2><p>标准化了全局对象，在这个特性之前，如果我们要读取环境的全局对象，一般会写如下的胶水代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // web worker</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> self</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !==</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">undefined</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    self</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">globalThis</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> self</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 浏览器</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  else</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> window</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !==</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">undefined</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    window</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">globalThis</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> window</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // node </span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  else</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> global</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !==</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">undefined</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    global</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">globalThis</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> global</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 非严格模式</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  else</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">globalThis</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> this</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">})();</span></span></code></pre><p>当然，这种垫片有一些局限性，具体可以查看这篇文章：<a href="https://mathiasbynens.be/notes/globalthis" target="_blank" rel="noopener"> A horrifying globalThis polyfill in universal JavaScript</a>，或者阅读掘金上的译文：<a href="https://juejin.cn/post/6904958153503277069" target="_blank" rel="noopener">【译】一种令人震惊的 globalThis JavaScript Polyfill 通用实现</a>。</p><p>而在 es11 后，只要使用 globalThis 即可直接访问全局的对象，浏览器下为 <code>window</code> ， <code>frames</code> ， <code>self</code> ， node 下为 <code>global</code>。</p><h2 id="bigint-基本类型" tabindex="-1">BigInt 基本类型 <a class="header-anchor" href="#bigint-基本类型">🔗</a></h2><p>由于 js 的整数值是基于 IEEE 754 实现的，所以如果表示大整数的话会有误差。在 js 中，安全的整数范围为 <code>Number.MIN_SAFE_INTEGER</code> 到 <code>Number.MAX_SAFE_INTEGER</code> ，具体的值为 -9007199254740991 到 9007199254740991 。</p><p>如果超出了这个范围，整数的计算便不再完全可靠，比如：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Number</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">MAX_SAFE_INTEGER </span><span style="--s-dark:#CB7676;--s-light:#AB5959;">+</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Number</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">MAX_SAFE_INTEGER </span><span style="--s-dark:#CB7676;--s-light:#AB5959;">+</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 true</span></span></code></pre><p>在使用了大数类型后，可以避免该错误：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> BigInt</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Number</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">MAX_SAFE_INTEGER</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">n</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#80A665;--s-light:#59873A;"> BigInt</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Number</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">MAX_SAFE_INTEGER</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">n</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 false</span></span></code></pre><p>在使用大数类型时，有几个需要特别注意的点：</p><ul><li>不能与 Number 类型混合运算，比如 <code>1n + 2</code> 不然报错。</li><li>不能使用 Math 的方法，比如 <code>pow</code> ，不然报错。</li><li>转为 Number 可能造成精度丢失。</li></ul><h2 id="动态-import" tabindex="-1">动态 import <a class="header-anchor" href="#动态-import">🔗</a></h2><p>提供了一种异步加载模块文件的特性，如果使用过 vue-router 的动态路由，那么应该对这种语法很熟悉，本质就是 import 一个额外的模块，返回一个 Promise ，模块加载完成后会 resolve 该 Promise ，进而执行相应的操作。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// util.js</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> add</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> a</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-html"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">&lt;!-- index.html --&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> type</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">module</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> load</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  import</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./util.js</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">module</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 使用 module</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">err</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 加载错误</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  })</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span></code></pre><p>要注意该特性只能在模块环境下使用，即 package.json 中的 <code>type</code> 为 <code>module</code> ，或者文件扩展名为 <code>mjs</code> ，或者 <code>script</code> 标签指定 <code>type</code> 为 <code>module</code> 。</p><h2 id="规范-for-in-顺序" tabindex="-1">规范 for-in 顺序 <a class="header-anchor" href="#规范-for-in-顺序">🔗</a></h2><p>在 es11 之前，如果使用 for-in 遍历一个对象的属性，那么遍历的顺序可能存在差异。而 es11 统一了该顺序，即：</p><ul><li>将所有非负整数键按升序遍历</li><li>所有字符串键按创建的顺序升序遍历</li></ul><p>例子如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  b</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  a</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">  &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">-2</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">  &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">-1</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 符号键会被忽略</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  [</span><span style="--s-dark:#80A665;--s-light:#59873A;">Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">z</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)]:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#4C9A91;--s-light:#2F798A;">  2</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 6</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#4C9A91;--s-light:#2F798A;">  1</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 7</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">for</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> key</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> in</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">key</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 输出 1 2 b a -2 -1</span></span></code></pre><p>需要注意这个方法会把原型链上可枚举的属性也遍历出来，如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 指定 o 的原型</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Object</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">create</span><span style="--s-dark:#666666;--s-light:#999999;">({</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  protoKey1</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  protoKey2</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// o 本身的属性</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">o</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">key1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">for</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> key</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> in</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> o</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">key</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 输出</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// key1</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// protoKey1</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// protoKey2</span></span></code></pre><p>for-in 在读取原型链对象上的属性和自身的属性是分开排序的，也就是说先排序自身的属性，完成后，找到原型链上的对象，然后排序原型链对象自身的属性，依次类推，所以可以看到上图的结果为 <code>key1 protoKey1 protoKey2</code> ，而非 <code>protoKey1 protoKey2 key1</code> ，如果规则是全部属性读取之后再排序的话， <code>protoKey1</code> 和 <code>protoKey2</code> 理应就在 <code>key1</code> 的前面了。</p><p>由于它会读取原型链上的属性的特性，一般而言不使用它，而是通过 <code>Object.keys</code> 来拿到自身的键（和 for-in 具有相同的顺序）后再进行遍历。</p><p>虽然 for-in 可以遍历数组，但是不建议使用，因为 for-in 为属性遍历，原型链上的值会影响遍历结果，建议只使用 for-of ，它是基于迭代器的。</p><h2 id="promise-allsettled" tabindex="-1">Promise.allSettled <a class="header-anchor" href="#promise-allsettled">🔗</a></h2><p>新增的 Promise 的静态函数，它和 <code>Promise.all</code> 的区别就是， <code>Promise.allSettled</code> 下即使某个 Promise reject 了也不会影响整个 Promise resolve 。 <code>Promise.allSettled</code> 生成的 Promise 对象只会被 resolve 。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">Promise</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">all</span><span style="--s-dark:#666666;--s-light:#999999;">([</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  Promise</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  Promise</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">reject</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">错误</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">]).</span><span style="--s-dark:#80A665;--s-light:#59873A;">catch</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">err</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">err</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 错误</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">Promise</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">allSettled</span><span style="--s-dark:#666666;--s-light:#999999;">([</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  Promise</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  Promise</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">reject</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">错误</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">]).</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">res</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">res</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 输出 </span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // [</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //   { status: &#39;fulfilled&#39;, value: 1 },</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //   { status: &#39;rejected&#39;, reason: &#39;错误&#39; }</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><p>这个接口比较适合一些关联度不高的并发 Promise ，比如首页获取不同板块的数据，某个板块错误一般是不影响其他板块的显示的，只需要在 <code>then</code> 中判断是哪个板块错误做对应的流程即可。</p><h2 id="string-prototype-matchall" tabindex="-1">String.prototype.matchAll <a class="header-anchor" href="#string-prototype-matchall">🔗</a></h2><p>返回和正则对象匹配的所有结果，包括捕获组，例子如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> regexp</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> /</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">t</span><span style="--s-dark:#666666;--s-light:#999999;">(?&lt;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">g1</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">e</span><span style="--s-dark:#666666;--s-light:#999999;">)(?&lt;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">g2</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">st</span><span style="--s-dark:#666666;--s-light:#999999;">(?&lt;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">g3</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#6872AB;--s-light:#5A6AA6;">\\d</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">?</span><span style="--s-dark:#666666;--s-light:#999999;">))</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">g</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">test1test2</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> array</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">matchAll</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">regexp</span><span style="--s-dark:#666666;--s-light:#999999;">)];</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 输出</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// [</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   [</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;test1&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;e&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;st1&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;1&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     index: 0,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     input: &#39;test1test2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     groups: [Object: null prototype] { g1: &#39;e&#39;, g2: &#39;st1&#39;, g3: &#39;1&#39; }</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   ],</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   [</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;test2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;e&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;st2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     index: 5,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     input: &#39;test1test2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     groups: [Object: null prototype] { g1: &#39;e&#39;, g2: &#39;st2&#39;, g3: &#39;2&#39; }</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   ]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ]</span></span></code></pre><p>如果使用 <code>String.prototype.match</code> （ <code>g</code> 模式），则不会输出捕获组，而且返回值为数组或 <code>null</code> 而非迭代器：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> regexp</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> /</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">t</span><span style="--s-dark:#666666;--s-light:#999999;">(?&lt;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">g1</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">e</span><span style="--s-dark:#666666;--s-light:#999999;">)(?&lt;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">g2</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">st</span><span style="--s-dark:#666666;--s-light:#999999;">(?&lt;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">g3</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#6872AB;--s-light:#5A6AA6;">\\d</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">?</span><span style="--s-dark:#666666;--s-light:#999999;">))</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">g</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">test1test2</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> array</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">match</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">regexp</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 输出 [ &#39;test1&#39;, &#39;test2&#39; ]</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> array2</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">match</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">regexp</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 输出 null</span></span></code></pre><p>可以把它理解为 <code>RegExp.prototype.exec</code> 的循环版：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> regexp</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> /</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">t</span><span style="--s-dark:#666666;--s-light:#999999;">(?&lt;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">g1</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">e</span><span style="--s-dark:#666666;--s-light:#999999;">)(?&lt;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">g2</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">st</span><span style="--s-dark:#666666;--s-light:#999999;">(?&lt;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">g3</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#6872AB;--s-light:#5A6AA6;">\\d</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">?</span><span style="--s-dark:#666666;--s-light:#999999;">))</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">g</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> str</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">test1test2</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> match</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> results</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">while</span><span style="--s-dark:#666666;--s-light:#999999;"> ((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">match</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> regex</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">exec</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">))</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !==</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  results</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">push</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">match</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// results 输出</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// [</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   [</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;test1&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;e&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;st1&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;1&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     index: 0,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     input: &#39;test1test2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     groups: [Object: null prototype] { g1: &#39;e&#39;, g2: &#39;st1&#39;, g3: &#39;1&#39; }</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   ],</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   [</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;test2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;e&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;st2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     &#39;2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     index: 5,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     input: &#39;test1test2&#39;,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     groups: [Object: null prototype] { g1: &#39;e&#39;, g2: &#39;st2&#39;, g3: &#39;2&#39; }</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   ]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ]</span></span></code></pre>`,65)])))}};export{x as categories,E as date,N as default,j as key,S as meta,F as tags,m as title,v as updated,q as wordCount};
