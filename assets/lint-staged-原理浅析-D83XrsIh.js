import{createElementBlock as t,openBlock as n,createStaticVNode as p}from"vue";import{c as l}from"./app-CGnJzz9B.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const e={class:"kan-doc"},v="lint-staged 原理浅析",x=1661308814,j="2022-08-24T10:40:14.000Z",b="2023-02-13T18:28:44.000Z",w=["lint-staged"],F=["编程"],E=8679,S=[{property:"og:title",content:"lint-staged 原理浅析"},{name:"twitter:title",content:"lint-staged 原理浅析"}],_={__name:"lint-staged-原理浅析",setup(i,{expose:a}){return a({frontmatter:{title:"lint-staged 原理浅析",key:1661308814,date:"2022-08-24T10:40:14.000Z",updated:"2023-02-13T18:28:44.000Z",tags:["lint-staged"],categories:["编程"],wordCount:8679,meta:[{property:"og:title",content:"lint-staged 原理浅析"},{name:"twitter:title",content:"lint-staged 原理浅析"}]}}),l({title:"lint-staged 原理浅析",meta:[{property:"og:title",content:"lint-staged 原理浅析"},{name:"twitter:title",content:"lint-staged 原理浅析"}]}),(g,s)=>(n(),t("div",e,s[0]||(s[0]=[p(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>没有经过格式语法校验的代码，就跟电子烟不抽悦柯5是一样的，没有灵魂</p><p style="text-align:right;">——————节选自《纯真的代码》，作者：鲁迅</p><p>前面我们有讲过使用笨方法来完成对 <code>hexo</code> 帖子的 <code>updated</code> 字段进行更新</p><p>如果你不知道这个笨方法，你可以点击{% post_link 使用-husky-来为帖子增加更新时间 此处 %}一键起飞到该帖子</p><p>当然，对于编程来说，我们可以使用 <code>lint-staged</code> 以及 <code>eslint</code> 完成只对暂存区文件进行格式化</p><p>所以，这篇主要浅析一下 <code>lint-staged</code> 是如何只对暂存区文件进行格式化的</p><p>了解完之后，我们就可以编写和 <code>eslint</code> 一样的工具来对 <code>hexo</code> 的帖子的 <code>updated</code> 字段进行更新了，不必再关心 <code>git</code> 操作方面的逻辑</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>首先，我们当然要把代码拉下了，项目地址：<a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a></p><p>在 <code>lib</code> 文件夹下面就是全部的源代码文件了</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/26/202208261612323.avif" alt=""></p><p>当然，我们只需要重点关注以下几个文件</p><ul><li><code>execGit.js</code></li><li><code>getStagedFiles.js</code></li><li><code>gitWorkflow.js</code></li><li><code>parseGitZOutput.js</code></li></ul><p>这几个文件可以说涵盖了核心的逻辑，其他的文件很多都是在处理控制台输出相关的逻辑</p><p>当然，我们会一个个文件来讲</p><h2 id="execgit-js" tabindex="-1">execGit.js <a class="header-anchor" href="#execgit-js">🔗</a></h2><p>不同于之前我们使用的 <code>shelljs</code> ， <code>lint-staged</code> 使用了 <code>execa</code> 库来作为在 <code>node</code> 上执行 <code>git</code> 命令的工具</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> execGit</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> async</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cmd</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> options</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {})</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  debugLog</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Running git command</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> cmd</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  try</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> stdout</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> await</span><span style="--s-dark:#80A665;--s-light:#59873A;"> execa</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">git</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> GIT_GLOBAL_OPTIONS</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">concat</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cmd</span><span style="--s-dark:#666666;--s-light:#999999;">),</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">options</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">      all</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">      cwd</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> options</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cwd</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> process</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">cwd</span><span style="--s-dark:#666666;--s-light:#999999;">(),</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    })</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> stdout</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> catch</span><span style="--s-dark:#666666;--s-light:#999999;"> ({</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> all</span><span style="--s-dark:#666666;--s-light:#999999;"> })</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    throw</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Error</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">all</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这段的核心就是 <code>const { stdout } = await execa(&#39;git&#39;)</code> ，意思就是执行一个 <code>git</code> 命令，然后返回命令输出的内容</p><h2 id="parsegitzoutput-js" tabindex="-1">parseGitZOutput.js <a class="header-anchor" href="#parsegitzoutput-js">🔗</a></h2><p>对比之前，我们使用 <code>git status --porcelain</code> 按行来处理， <code>lint-staged</code> 就简单多了，直接 <code>git status -z</code> 然后根据空字符分割</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> parseGitZOutput</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">input</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  input</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    ?</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> input</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">        .</span><span style="--s-dark:#80A665;--s-light:#59873A;">replace</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\u0000</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">$</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // eslint-disable-line no-control-regex</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">        .</span><span style="--s-dark:#80A665;--s-light:#59873A;">split</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\u0000</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    :</span><span style="--s-dark:#666666;--s-light:#999999;"> []</span></span></code></pre><p>这里确实学到了，之前确实不知道怎么通过空字符 <code>split</code> ，原来空字符的 <code>unicode</code> 编码为 <code>\\u0000</code> ，好吧，是我太菜了</p><p>这里要主要通过 <code>replace</code> 来把最后一个空字符替换掉，然后再通过空字符分割</p><p><code>git status -z</code> 会在最后一个文件后面跟上空字符，如下</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/26/202208261647946.avif" alt=""></p><p>如果不替换，会产生空的项，即 <code>&#39;1|2|3|&#39;.split(&#39;|&#39;)</code> 会返回 <code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;&#39;]</code>,</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/26/202208261703772.avif" alt=""></p><h2 id="getstagedfiles-js" tabindex="-1">getStagedFiles.js <a class="header-anchor" href="#getstagedfiles-js">🔗</a></h2><p>相比于之前我们使用 <code>git status</code> 来根据头两个字符标记来判断当前在暂存区的文件， <code>lint-staged</code> 使用了 <code>git diff</code></p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getStagedFiles</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> async</span><span style="--s-dark:#666666;--s-light:#999999;"> ({</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> cwd</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> process</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">cwd</span><span style="--s-dark:#666666;--s-light:#999999;">(),</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> diff</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> diffFilter</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {})</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  try</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> lines</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> await</span><span style="--s-dark:#80A665;--s-light:#59873A;"> execGit</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#80A665;--s-light:#59873A;">getDiffCommand</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">diff</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> diffFilter</span><span style="--s-dark:#666666;--s-light:#999999;">),</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> cwd</span><span style="--s-dark:#666666;--s-light:#999999;"> })</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">!</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">lines</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> return</span><span style="--s-dark:#666666;--s-light:#999999;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#80A665;--s-light:#59873A;"> parseGitZOutput</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">lines</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">map</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">file</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#80A665;--s-light:#59873A;"> normalize</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">path</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cwd</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> file</span><span style="--s-dark:#666666;--s-light:#999999;">)))</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> catch</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>上面执行的 <code>git</code> 命令默认情况下其实就是 <code>git diff --name-only -z --diff-filter=ACMR --staged</code></p><p>这条命令就是输出当前暂存区的文件列表</p><p>其中 <code>--name-only</code> 只输出文件名，并且输出是 <code>UTF-8</code> 的编码的，也就是支持非英文文件名，不用像之前一样去设置 <code>core.quotepath = false</code></p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280043839.avif" alt=""></p><p><code>--staged</code> 就是告诉 <code>git</code> 我要比较的是暂存区与 <code>Head</code> 的差异，而不是工作区与暂存区的差异，如果不加，那么比较的就是工作区与暂存区的差异</p><p><code>--diff-filter</code> 指定需要过滤的文件， <code>ACMR</code> 就对应了四种文件， <code>Added</code>, <code>Copied</code>, <code>Modified</code>, <code>Renamed</code> ，这里没有 <code>D</code> ，因为对删除文件没必要去更改它的内容</p><p>当然，也可以指定小写，那么这个选项就会变成排除选项，即 <code>--diff-filter=acmr</code> 就是排除这四类的文件</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280052189.avif" alt=""></p><p>这里可以看 <code>git</code> 的文档，有更详细的介绍，这里就简单的讲这行命令的功能</p><p>我们可以测试一下，这里我们 <code>add</code> 了 <code>1.txt</code> 这个文件，然后再往 <code>1.txt</code> 里面添加了一行，此时 <code>git status</code> 如下</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280113924.avif" alt=""></p><p>执行 <code>git diff --name-only -z --diff-filter=ACMR --staged</code> ，只输出了 <code>1.txt</code></p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280100168.avif" alt=""></p><p>执行 <code>git diff --name-only -z --diff-filter=ACMR</code> ，还是只输出了 <code>1.txt</code></p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280127126.avif" alt=""></p><p>你可能会疑惑为啥会一样，我们只要去掉 <code>--name-only</code> 在输出，就可以明白了</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280129357.avif" alt=""></p><h2 id="gitworkflow-js" tabindex="-1">gitWorkflow.js <a class="header-anchor" href="#gitworkflow-js">🔗</a></h2><p>看这个文件之前，我们需要先去看 <code>runAll.js</code> 这个文件，这个文件表明了 <code>gitWorkflow.js</code> 内方法的调用顺序</p><p>我们只需关心如下的代码</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> runAll</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> async</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">  </span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> git</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> GitWorkflow</span><span style="--s-dark:#666666;--s-light:#999999;">({</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    allowEmpty</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    gitConfigDir</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    gitDir</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    matchedFileChunks</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    diff</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    diffFilter</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> runner</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Listr</span><span style="--s-dark:#666666;--s-light:#999999;">(</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    [</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Preparing lint-staged...</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        task</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> git</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">prepare</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      },</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hiding unstaged changes to partially staged files...</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        task</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> git</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">hideUnstagedChanges</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        enabled</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> hasPartiallyStagedFiles</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      },</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> \`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Running tasks for staged files...</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        task</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> task</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> task</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">newListr</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">listrTasks</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> concurrent</span><span style="--s-dark:#666666;--s-light:#999999;"> }),</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        skip</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> listrTasks</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">every</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">task</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> task</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">skip</span><span style="--s-dark:#666666;--s-light:#999999;">()),</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      },</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Applying modifications from tasks...</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        task</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> git</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">applyModifications</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        skip</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> applyModificationsSkipped</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      },</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Restoring unstaged changes to partially staged files...</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        task</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> git</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">restoreUnstagedChanges</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        enabled</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> hasPartiallyStagedFiles</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        skip</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> restoreUnstagedChangesSkipped</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      },</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Reverting to original state because of errors...</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        task</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> git</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">restoreOriginalState</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        enabled</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> restoreOriginalStateEnabled</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        skip</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> restoreOriginalStateSkipped</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      },</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Cleaning up temporary files...</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        task</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> git</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">cleanup</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ctx</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        enabled</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> cleanupEnabled</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        skip</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> cleanupSkipped</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      },</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    ],</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    listrOptions</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  await</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> runner</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">run</span><span style="--s-dark:#666666;--s-light:#999999;">()</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>其中我们最关心的就是如何把工作区和暂存区的区别保存以及恢复，也就是上图代码中的</p><ul><li>Hiding unstaged changes to partially staged files…</li><li>Restoring unstaged changes to partially staged files…</li></ul><p>这两个过程</p><p>我们先看 <code>hideUnstagedChanges</code> 这段代码</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280158420.avif" alt=""></p><p>可以发现他只是把工作区的改变丢弃了而已</p><p>可能你会疑惑，执行这个命令工作区的改变不就丢失了吗，到时候怎么恢复呢？</p><p>没错，在 <code>prepare</code> 方法中，有对工作区的改变进行保存</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280202650.avif" alt=""></p><p>没错，这里的核心就是执行的这段 <code>git</code> 命令，这段命令为</p><p><code>git diff --binary --unified=0 --no-color --no-ext-diff --src-prefix=a/ --dst-prefix=b/ --patch --submodule=short --output .git/lint-staged_unstaged.patch</code></p><p>这个命令生成了一个 <code>patch</code> 文件，保存了当前工作区与暂存区的区别</p><p>这里面最重要的参数就是 <code>--unified=0</code> ，这个参数官方文档的解释如下</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280210852.avif" alt=""></p><p>生成指定上下文行数的 <code>diff</code> ，emmm，有点难懂</p><p>我们可以做个小测试，我们先往版本库里面提交一个文件，内容如下</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280219135.avif" alt=""></p><p>然后我们往中间插入一行，如下</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280220646.avif" alt=""></p><p>这里不输出 <code>patch</code> 文件，我们直接打印到控制台</p><p>执行 <code>git diff --unified=0</code></p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280222925.avif" alt=""></p><p>执行 <code>git diff --unified=3</code></p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280223005.avif" alt=""></p><p>这里我们发现，区别就是增加的行上下会出现文件原本的行</p><p>那这有什么用呢？</p><p>其实这跟后面要讲到的 <code>git apply</code> 命令有关，这里我们先不管，我们只要知道，我们已经保存了工作区与暂存区的区别了</p><p>那么 <code>hideUnstagedChanges</code> 函数中，我们就可以使用 <code>checkout --force</code> 来把工作区的改变给丢掉</p><p>接下来的步骤我想你也应该懂了</p><p>丢掉工作区的改变之后，对文件进行 <code>eslint</code>（或者其他的命令），然后把文件 <code>add</code> 进暂存区（ <code>eslint</code> 可能会改变文件）</p><p>然后再把生成的 <code>patch</code> 文件通过某种方式恢复到工作区中，接着就是我们执行的 <code>commit</code> 命令了（一般我们都是在 <code>pre-commit</code> 中执行 <code>lint-staged</code> ）</p><p>接下来我们就要看 <code>restoreUnstagedChanges</code> 这个函数了，从名字上看我们就知道它重新把之前工作区的改变恢复到了工作区（之前执行 <code>checkout --force</code> 丢弃了，但是使用了 <code>git diff</code> 生成了 <code>patch</code> 文件），代码如下</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280235579.avif" alt=""></p><p>这里的 <code>catch</code> 内容都不用看，不是重点，重点是这个 <code>git</code> 命令</p><p>这个命令为 <code>git apply -v --whitespace=nowarn --recount --unidiff-zero .git/lint-staged_unstaged.patch</code></p><p>没错，这个命令就是把我们之前的保存下来的 <code>patch</code> 文件给恢复到工作区</p><p>这里面最重要的参数就是 <code>--unidiff-zero</code> ，官方文档解释如下</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/08/28/202208280240210.avif" alt=""></p><p>这段的意思通俗点讲就是，<code>git apply</code> 在合并的时候，会至少查找一行原本就存在的代码来作为依据来应用这个改变，因为这样子做安全，但如果你使用了 <code>git diff --unified=0</code> 生成 <code>patch</code> ，那么应用会失败，因为这样的 <code>patch</code> 没有这些依据行，为了绕过这个检查，使用 <code>--unidiff-zero</code> 即可</p><p>那为什么我们要关掉这个验证呢，其实很容易理解，我们可能会改变暂存区文件的某些行，而如果生成的 <code>patch</code> 刚好依赖了这些行，那么 <code>apply</code> 操作就会失败，根本上我们不必在意暂存区文件的改变，我们仅仅只是需要保存当前工作区的改变，所以不要依赖额外的行来进行 <code>apply</code></p><p>到这，我们基本就理清了 <code>lint-staged</code> 的原理，如下</p><ul><li>使用 <code>git diff</code> 获取暂存区文件列表</li><li>如果暂存区文件列表中存在还未 <code>add</code> 的修改，使用 <code>git diff</code> 生成 <code>patch</code> ，这里生成的 <code>patch</code> 不要附带没被修改的行</li><li>对存在还未 <code>add</code> 的修改的文件使用 <code>git checkout --force</code> 丢弃工作区的修改</li><li>应用用户设置的命令，比如 <code>eslint</code> ， <code>prettier</code></li><li>重新 <code>add</code> 文件到暂存区（ <code>eslint</code> ， <code>prettier</code> 可能会对文件进行修改）</li><li>把生成的 <code>patch</code> 文件通过 <code>git apply</code> 重新应用到工作区中，这里的 <code>apply</code> 要关掉行验证</li></ul><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>之前我有想过使用 <code>git stash</code> 来保存工作区与暂存区的区别，不过 <code>git stash</code> 只能保存<strong>工作区+暂存区</strong>或<strong>暂存区</strong>的改变，很明显无法符合<strong>只保存工作区的改变</strong>这一需求</p><p>当然本文并没有很详细的介绍 <code>lint-staged</code> 的整个实现原理，比如子模块的处理，<code>apply</code> 失败的处理，以及命令行输出的处理</p><p>嘛，我觉得这些都不是重要的部分，很多时候其实大家的操作都是很简单的，明白最核心的原理即可</p><p>最后，请允许我对该工作作者进行一个轰轰烈烈地赞美，“牛逼”，强烈建议每个项目都引入，没统一风格的代码坚决不要放入版本库中，两三种风格就已经很讨厌了，有些人写代码还随心所欲，一会缩进，一会不缩进，维护起来跟吃了屎一样难受…</p>`,100)])))}};export{F as categories,j as date,_ as default,x as key,S as meta,w as tags,v as title,b as updated,E as wordCount};
