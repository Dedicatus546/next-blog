import{createElementBlock as c,openBlock as t,createStaticVNode as d}from"vue";import{c as p}from"./app-CGnJzz9B.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const a={class:"kan-doc"},H="记一次github分支合并没有新建节点问题",v=1637660118,X="2021-11-23T17:35:18.000Z",y="2023-02-13T18:28:45.000Z",T=["git-branch","git"],Z=["编程"],D=2633,S=[{property:"og:title",content:"记一次github分支合并没有新建节点问题"},{name:"twitter:title",content:"记一次github分支合并没有新建节点问题"}],z={__name:"记一次github分支合并没有新建节点问题",setup(r,{expose:o}){return o({frontmatter:{title:"记一次github分支合并没有新建节点问题",key:1637660118,date:"2021-11-23T17:35:18.000Z",updated:"2023-02-13T18:28:45.000Z",tags:["git-branch","git"],categories:["编程"],wordCount:2633,meta:[{property:"og:title",content:"记一次github分支合并没有新建节点问题"},{name:"twitter:title",content:"记一次github分支合并没有新建节点问题"}]}}),p({title:"记一次github分支合并没有新建节点问题",meta:[{property:"og:title",content:"记一次github分支合并没有新建节点问题"},{name:"twitter:title",content:"记一次github分支合并没有新建节点问题"}]}),(m,e)=>(t(),c("div",a,e[0]||(e[0]=[d('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>记一次 <code>github</code> 分支合并没有新建节点问题</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><h2 id="场景复现" tabindex="-1">场景复现 <a class="header-anchor" href="#场景复现">🔗</a></h2><p>虽然基本上是我一个人开发，但是还是要养成建分支的习惯</p><p>一方面熟悉命令行操作，一方面也可以养成自己的一套工作流</p><p>现在我个人的工作流是：</p><p>主分支 <code>master</code></p><p>修复 <code>bug</code> 直接在 <code>master</code> 上进行 <code>commit</code></p><p>新的需求的话就创建新的分支 <code>feat/XXX需求</code></p><p>然后在这个分支上进行开发，开发完成之后，在 <code>master</code> 分支上执行 <code>git merge feat/XXX需求</code></p><p>前几次基本没什么问题，但是最近的一次出现了 <code>merge</code> 没有额外的节点问题</p><p>我们可以创建一个项目来复现这个现象</p><p><img src="https://z3.ax1x.com/2021/11/23/o9kRzD.png" alt=""></p><p>从图里可以看到，我们进行了第一次提交</p><p>接着我们创建一个新的分支 <code>git checkout -b feat/01需求</code></p><p>然后修改 <code>README.md</code></p><p><img src="https://z3.ax1x.com/2021/11/23/o9AkSU.png" alt=""></p><p>从图上可以看到</p><p>此时还没有提交，那么现在我们执行 <code>git add . &amp;&amp; git commit -m &quot;feat: 完成01需求&quot;</code></p><p>这时候我们执行 <code>git log --oneline --graph</code> 来查看提交情况，如下（这里使用 <code>vscode</code> 的插件可视化查看）</p><p><img src="https://s4.ax1x.com/2021/12/11/oHK9mQ.png" alt=""></p><p>然后我们切换为 <code>master</code> 分支，执行 <code>git merge feat/01需求</code></p><p>然后再执行 <code>git log --oneline --graph</code> 查看提交情况</p><p><img src="https://s4.ax1x.com/2021/12/11/oHuOYt.png" alt=""></p><p>此时的提交记录是扁平的</p><p>但是我们想要的样子是想入如下图所示的</p><p><img src="https://s4.ax1x.com/2021/12/11/oHKZlT.png" alt=""></p><p>那这是为什么呢，在 <code>merge</code> 操作的时候我们可以看到命令行输了了 <code>Fast-forward</code> 这个字符串</p><p>这是 <code>merge</code> 的一个模式</p><p>在 <code>git</code> 中有这么几种 <code>merge</code> 模式</p><ul><li><code>--ff</code> <code>fast-forward</code> 默认的合并模式</li><li><code>--no-ff</code> <code>no-fast-forward</code> 也就是 <code>fast-forward</code> 的相反模式</li><li><code>--ff-only</code> 只允许 <code>fast-forward</code> ，如果无法使用则报错</li><li><code>--squash</code> 压缩 <code>commit</code> 信息， 和 <code>no-ff</code> 互斥</li></ul><h2 id="什么是-fast-forward-模式" tabindex="-1">什么是 <code>fast-forward</code> 模式 <a class="header-anchor" href="#什么是-fast-forward-模式">🔗</a></h2><p>简单点讲：就是如果 <code>merge</code> 可以直接移动指针的话，此时就是 <code>fast-forward</code> 模式</p><p>可以通过一个简单的例子来说明</p><ul><li>此时存在一个 <code>master</code> 分支</li><li>在 <code>master</code> 分支上新建了一个 <code>dev</code> 分支</li><li>在 <code>dev</code> 上进行提交</li><li>回到 <code>master</code></li><li>把 <code>dev</code> 合并到 <code>master</code> 上</li></ul><p>此时 <code>master</code> 并没有新的提交，可以直接把 <code>master</code> 的指针直接指向 <code>dev</code> 的最后一次 <code>commit</code> 的节点</p><p>此时就是 <code>fast-forward</code> 模式</p><p>这种模式不会生成一个 <code>commit</code> 信息，意味着如果删除 <code>dev</code> 分支，那么提交信息会消失</p><p>我们可以用之前那个复现的 demo 来测试</p><p>执行 <code>git branch -D feat/01需求</code> 来删除 <code>feat/01需求</code> 分支</p><p><img src="https://s4.ax1x.com/2021/12/11/oH1N8I.png" alt=""></p><p>此时分支信息已经不见了</p><p>如果我们不适用 <code>ff</code> ，那么删除分支不会影响到提交信息，因为合并产生了一个节点</p><p>删除分支可以理解为只是删除一个指针而已</p><p>不使用 <code>ff</code> 删除 <code>feat/01需求</code> 分支后如下</p><p><img src="https://s4.ax1x.com/2021/12/11/oH3Sde.png" alt=""></p><p>此时依然可以看出来是从哪个分支进行合并的，分支的删除不影响提交的信息</p><h2 id="什么是-squash-模式" tabindex="-1">什么是 <code>squash</code> 模式 <a class="header-anchor" href="#什么是-squash-模式">🔗</a></h2><p>有时候我们新开一个 <code>fix</code> 分支，修复了一些 <code>bug</code></p><p>但这个分支其实我们并不想提交到远端，我们只想把修改的代码提交到 <code>master</code> 上，然后生成一次提交而已</p><p><code>--squash</code> 就可以完成这种功能</p><p><code>--squash</code> 并不会进行指针的移动（<code>--ff</code>），也不会进行分支的合并（<code>--no-ff</code>）</p><p>它只是把 <code>fix</code> 分支上的代码 <code>add</code> 到 <code>master</code> 上而已</p><p>然后在 <code>master</code> 上就可以使用 <code>git commit</code> 来进行提交</p><p>我们可以用之前的 <code>demo</code> 来测试这个参数</p><p>此时的 <code>graph</code> 如下</p><p><img src="https://s4.ax1x.com/2021/12/12/oHdsX9.png" alt=""></p><p>在 <code>master</code> 上执行 <code>git merge feat/01 --squash</code></p><p><img src="https://s4.ax1x.com/2021/12/12/oH0p8O.png" alt=""></p><p>此时生成一个未 <code>commit</code> 的状态</p><p>此时就可以使用 <code>git commit</code> 来进行提交了</p><p><img src="https://s4.ax1x.com/2021/12/12/oH0kqA.png" alt=""></p><h1 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章">🔗</a></h1><ul><li><a href="https://blog.csdn.net/coder1994/article/details/80639404" target="_blank" rel="noopener">使用git merge --squash，让commit变得优雅 - CSDN</a></li><li><a href="https://www.jianshu.com/p/58a166f24c81" target="_blank" rel="noopener">git-merge完全解析 - 简书</a></li><li><a href="https://www.jianshu.com/p/b357df6794e3" target="_blank" rel="noopener">一个成功的Git分支模型 - 简书</a></li></ul>',65)])))}};export{Z as categories,X as date,z as default,v as key,S as meta,T as tags,H as title,y as updated,D as wordCount};
//# sourceMappingURL=记一次github分支合并没有新建节点问题-Ct4nFNZj.js.map
