import{createElementBlock as n,openBlock as l,createStaticVNode as t}from"vue";import{c as p}from"./app-kEKefLn2.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const e={class:"kan-doc"},w="为什么 Async/Await 不只是语法糖",C=["JavaScript","Async/Await","Promise"],b=["译文"],E=1677484217,P="2023-02-27T15:50:17.000Z",F="2023-02-27T15:50:17.000Z",_=8052,x=[{property:"og:title",content:"为什么 Async/Await 不只是语法糖"},{name:"twitter:title",content:"为什么 Async/Await 不只是语法糖"}],S={__name:"为什么-Async-Await-不只是语法糖",setup(i,{expose:a}){return a({frontmatter:{title:"为什么 Async/Await 不只是语法糖",tags:["JavaScript","Async/Await","Promise"],categories:["译文"],key:1677484217,date:"2023-02-27T15:50:17.000Z",updated:"2023-02-27T15:50:17.000Z",wordCount:8052,meta:[{property:"og:title",content:"为什么 Async/Await 不只是语法糖"},{name:"twitter:title",content:"为什么 Async/Await 不只是语法糖"}]}}),p({title:"为什么 Async/Await 不只是语法糖",meta:[{property:"og:title",content:"为什么 Async/Await 不只是语法糖"},{name:"twitter:title",content:"为什么 Async/Await 不只是语法糖"}]}),(h,s)=>(l(),n("div",e,s[0]||(s[0]=[t(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>原文地址：<a href="https://www.zhenghao.io/posts/await-vs-promise" target="_blank" rel="noopener">Why Async/Await Is More Than Just Syntactic Sugar</a></p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>本文主要是我对 async/await 对比 Promise 的一些见解。</p><p>尽管网络上已经存在了许许多多的关于 <code>async/await</code> 对比 <code>Promise</code> 的文章，但是都有很多值得改进的地方，所以我就自己写了一篇。</p><p>在这篇文章中，我关注的点是 <code>async/await</code> 不仅仅是 <code>Promise</code> 之上的语法糖，因为 <code>async/await</code> 确实提供了显著的好处。</p><ul><li><code>async/await</code> 允许我们去使用那些在同步程序中可用的所有的语法，从而我们能写出更加有表现力和更加可读的代码。</li><li><code>async/await</code> 统一了异步编程的经验。</li><li><code>async/await</code> 提供了更好的错误堆栈跟踪信息。</li></ul><blockquote><p>这篇文章假定读者有关于 <code>Promise</code> 和 <code>async/await</code> 的基础知识。本文并不是类似 <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous" target="_blank" rel="noopener">MDN</a> 和 <a href="https://javascript.info/promise-basics" target="_blank" rel="noopener">javascript.info</a> 的基础教程。</p></blockquote><h2 id="在-javascript-中关于异步编程的一小部分历史" tabindex="-1">在 JavaScript 中关于异步编程的一小部分历史 <a class="header-anchor" href="#在-javascript-中关于异步编程的一小部分历史">🔗</a></h2><p>异步编程在 JavaScript 中很常见。每当我们需要调用一个 web 服务，或者进行文件访问，或者进行数据库操作，尽管语言本身是单线程的，但是异步特性却能够让我们防止 UI 被阻塞。</p><p>在 ES2015（ES6） 对 JavaScript 进行重大升级之前，解决异步编程的方式是回调。我们表达时间依赖（即异步操作的执行顺序）的唯一方法是将一个回调嵌套在另一个回调中。这会导致所谓的<a href="http://callbackhell.com/" target="_blank" rel="noopener">回调地狱</a>。</p><blockquote><p>reddit 上的一位用户 <a href="https://www.reddit.com/r/javascript/comments/wmpdsu/comment/ik2cnoh/?utm_source=share&amp;utm_medium=web2x&amp;context=3" target="_blank" rel="noopener">@theQuandary</a> 指出，在 ES6 之前，在 JavaScript 中异步编程有比回调更好的其他可选择的方式。很抱歉这里不是 100% 确定，因为我没有亲自经历过这段历史。</p></blockquote><p>在 ES2015， JavaScript 引入了 <code>Promise</code> 。对于异步操作来说它是最优的对象，我们可以很简单地使用它来进行传递，组合，聚合以及应用变换操作。时间依赖也可以通过链式调用 <code>then</code> 方法来清晰地表达。</p><p>{% details 更多历史… %} 在 JavaScript 中引入 <code>Promise</code> 的点子并不是独创的。它是受到一个年代非常久远的语言—— <a href="http://wiki.erights.org/wiki/Promise" target="_blank" rel="noopener">E 语言</a>所启发的。 E 语言的创造者 <a href="https://twitter.com/marksammiller" target="_blank" rel="noopener">Mark Miller</a> 也是 <a href="https://tc39wiki.calculist.org/about/people/" target="_blank" rel="noopener">TC39 的成员</a>。 <code>async/await</code> 语法也借鉴了 <a href="https://docs.microsoft.com/en-us/dotnet/csharp/async" target="_blank" rel="noopener">C#</a> 。 {% enddetails %}</p><p>随着 <code>Promise</code> 成为一个强大的原始对象，这似乎意味着在 JavaScript 中异步编程已经被解决了，是这样吗？</p><p>这不一定，因为有些时候使用 <code>Promise</code> 会让代码看起来很低级</p><h2 id="有些时候使用-promise-会让代码看起来很低级" tabindex="-1">有些时候使用 Promise 会让代码看起来很低级 <a class="header-anchor" href="#有些时候使用-promise-会让代码看起来很低级">🔗</a></h2><p>尽管 Promise 有优点，但是在 JavaScript 中需要一个更加高级的语法来处理异步编程。</p><p>我们可以考虑如下的例子，我们需要一个函数来延迟的轮询某个接口。如果轮询次数达到给定最大值，那么以 <code>null</code> 值来解决（resolve）这个 Promise 对象</p><p>下面是一个使用 <code>Promise</code> 的可能的解决方法</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> count</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> apiCall</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#B8A965;--s-light:#998418;"> Promise</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 重试到第六次时，用字符串 &#39;value&#39; 来解决这个 Promise</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    count</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">++</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 5</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ?</span><span style="--s-dark:#80A665;--s-light:#59873A;"> resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">value</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> :</span><span style="--s-dark:#80A665;--s-light:#59873A;"> resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">null</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  );</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> sleep</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">interval</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#B8A965;--s-light:#998418;"> Promise</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#80A665;--s-light:#59873A;"> setTimeout</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> interval</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> poll</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">retry</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> interval</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#B8A965;--s-light:#998418;"> Promise</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 为了简洁，这里跳过对错误的处理</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">retry</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#80A665;--s-light:#59873A;"> resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">null</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    apiCall</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !==</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#80A665;--s-light:#59873A;"> resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      else</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        sleep</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">interval</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">          resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#80A665;--s-light:#59873A;">poll</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">retry</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> interval</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">        });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">poll</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">6</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1000</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">log</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 输出 &#39;value&#39;</span></span></code></pre><p>这段逻辑的直觉性和可读性取决于阅读到该段代码的人对 <code>Promise</code> 的熟练程度，需要明白 <code>Promise.prototype.resolve</code> 是如何“扁平化” <code>Promise</code> 以及明白递归调用过程。对于我来说，写出这样一个函数，它的可读性并不是最好的。</p><p>{% details 可以通过 <code>setInterval</code> 来实现 %}</p><p>函数几乎都可以以另一种方式来编写。这是我的一个朋友 <a href="https://twitter.com/jrsinclair" target="_blank" rel="noopener">James</a> 编写的使用了 <code>setInterval</code> 的方式。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> pollInterval</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">retry</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> interval</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#B8A965;--s-light:#998418;"> Promise</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> intervalToken</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> timeoutToken</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    intervalToken</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> setInterval</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">async</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">      const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> result</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> await</span><span style="--s-dark:#80A665;--s-light:#59873A;"> apiCall</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">result</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !==</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        clearInterval</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">intervalToken</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        clearTimeout</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">timeoutToken</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">        resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">result</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    },</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> interval</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    timeoutToken</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> setTimeout</span><span style="--s-dark:#666666;--s-light:#999999;">(()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">      clearInterval</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">intervalToken</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">      resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">null</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    },</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> retry</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> interval</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span></code></pre><p>{% enddetails %}</p><h2 id="引入-async-await" tabindex="-1">引入 async/await <a class="header-anchor" href="#引入-async-await">🔗</a></h2><p>我们可以用 <code>async/await</code> 语法来重写上面的函数</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">async</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> poll</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">retry</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> interval</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  while</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">retry</span><span style="--s-dark:#666666;--s-light:#999999;"> &gt;=</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> await</span><span style="--s-dark:#80A665;--s-light:#59873A;"> apiCall</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">catch</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {});</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 为了简洁跳过错误处理</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !==</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    await</span><span style="--s-dark:#80A665;--s-light:#59873A;"> sleep</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">interval</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    retry</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">--</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>我想很多人会觉得上面的代码可读性更高，因为我们能够使用所有的常见的语法来处理异步操作，比如循环、 <code>try-catch</code> 。</p><p>{% details 递归方式 %} 然而，这并不是严格意义上的苹果与苹果的比较，因为我选择了一个递归解法来对比迭代解法。我们可以用递归重写上面的代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#80A665;--s-light:#59873A;"> pollAsyncAwait</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> async</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">retry</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> interval</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">retry</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> await</span><span style="--s-dark:#80A665;--s-light:#59873A;"> apiCall</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">catch</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {});</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 为了简洁跳过错误处理</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !==</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> null</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    await</span><span style="--s-dark:#80A665;--s-light:#59873A;"> sleep</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">interval</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#80A665;--s-light:#59873A;"> pollAsyncAwait</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">retry</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> interval</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span></code></pre><p>{% enddetails %}</p><p>这可能就是 <code>async/await</code> 的最大卖点 - 允许你以看起来同步的方式来编写异步代码。另一方面，这也可能是对 <code>async/await</code> 最常见的反对意见，关于这个话题，之后会聊到。</p><p>顺带一提， <code>await</code> 甚至有正确的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">运算符优先级</a>，这意味着 <code>await a + await b</code> 表示 <code>(await a) + (await b)</code> ，而不是 <code>await (a + await b)</code> 。</p><h2 id="async-await-对同步和异步代码都提供了统一的经验" tabindex="-1">async/await 对同步和异步代码都提供了统一的经验 <a class="header-anchor" href="#async-await-对同步和异步代码都提供了统一的经验">🔗</a></h2><p>另一个 <code>async/await</code> 的优点是 <code>await</code> 会自动地把任何非 <code>Promise</code> （即没有 <code>thenable</code> 接口）对象 包装成 <code>Promise</code> 。 语义上 <code>await</code> 相当于 <code>Promise.resolve</code> ，这意味着你可以 <code>await</code> 任何东西</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fetchValue</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">async</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> await</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fetchValue</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 1</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 👆 上面的代码相当于下面的代码</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  Promise</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#80A665;--s-light:#59873A;">fetchValue</span><span style="--s-dark:#666666;--s-light:#999999;">()).</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 1</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>{% details 注意这是一个浏览器相关的行为… %} 把 <code>await foo</code> 和 <code>Promise.resolve(foo).then(...)</code> 画上等号并不是 100% 正确的。</p><p>在 Chrome 73 之前， ECMA 规范把 <code>await foo</code> 转化为 <code>new Promise(resolve =&gt; resolve(p))</code> 。之后在这个 <a href="https://github.com/tc39/ecma262/pull/1250" target="_blank" rel="noopener">PR</a> 里修改了规范里的一处地方。但是直到现在，不是每个浏览器都遵守规范中的改变；截至本文编写之日， Safari 依然没有实现更新过后的规范。结果就是，在 Safari 和 Chrome 分别执行<a href="https://gist.github.com/zhenghaohe/c90ec960b890eca60b7bd8008f856a70" target="_blank" rel="noopener">这段代码段</a>会产生不同的结果。 {% enddetails %}</p><p>如果我们直接调用 <code>fetchValue</code> 返回的数字 <code>1</code> 的 <code>then</code> 方法，就会产生如下错误：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fetchValue</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  fetchValue</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fn</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // ❌ Uncaught TypeError: fetchValue(...).then is not a function</span></span></code></pre><p>最终，<code>async</code> 函数返回的任何东西都总是是一个 <code>Promise</code> ：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">Object</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#B8A965;--s-light:#998418;">prototype</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">toString</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">call</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">async</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {})());</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // &#39;[object Promise]&#39;</span></span></code></pre><h2 id="async-await-提供了更好的错误堆栈跟踪" tabindex="-1">async/await 提供了更好的错误堆栈跟踪 <a class="header-anchor" href="#async-await-提供了更好的错误堆栈跟踪">🔗</a></h2><p>V8 工程师 <a href="https://twitter.com/mathias" target="_blank" rel="noopener">Mathias</a> 写了一篇 <a href="https://mathiasbynens.be/notes/async-stack-traces" target="_blank" rel="noopener">异步堆栈跟踪信息：为什么 await 胜过 Promise#then()</a> 的文章，介绍了相比 <code>Promise</code> ，在 <code>async/await</code> 下为什么引擎可以更好地捕获和存储堆栈跟踪信息。</p><p>这里有一个例子：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">async</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> foo</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  await</span><span style="--s-dark:#80A665;--s-light:#59873A;"> bar</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">value</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> bar</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  throw</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Error</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">BEEP BEEP</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">foo</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">catch</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">stack</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Error: BEEP BEEP</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     at bar (&lt;anonymous&gt;:7:9)</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     at foo (&lt;anonymous&gt;:2:9)</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     at &lt;anonymous&gt;:10:1</span></span></code></pre><p><code>async</code> 版本正确地捕获了错误堆栈的跟踪信息。</p><p>我们再来看一下 <code>Promise</code> 的版本：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> foo</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#80A665;--s-light:#59873A;"> bar</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">value</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> bar</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#B8A965;--s-light:#998418;"> Promise</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    throw</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Error</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">BEEP BEEP</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">foo</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">catch</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">stack</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Error: BEEP BEEP  at &lt;anonymous&gt;:7:11</span></span></code></pre><p>堆栈跟踪信息丢失了。把箭头函数改为具名函数，这种情况可以得到改善，但是仍然不够好：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> foo</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#80A665;--s-light:#59873A;"> bar</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">value</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> bar</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#B8A965;--s-light:#998418;"> Promise</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">resolve</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">then</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> thisWillThrow</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    throw</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Error</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">BEEP BEEP</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">foo</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">catch</span><span style="--s-dark:#666666;--s-light:#999999;">((</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">error</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">stack</span><span style="--s-dark:#666666;--s-light:#999999;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Error: BEEP BEEP</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//    at thisWillThrow (&lt;anonymous&gt;:7:11)</span></span></code></pre><h2 id="对-async-await-普遍的反对意见" tabindex="-1">对 async/await 普遍的反对意见 <a class="header-anchor" href="#对-async-await-普遍的反对意见">🔗</a></h2><p>我有了解到对 <code>async/await</code> 的两种普遍的反对意见。</p><p>其一，当调用一个不必顺序执行的独立的异步函数时，即可以通过 <code>Promise.all</code> 正确地被处理时（如果我们使用宽松的术语的话，也可以叫做“并行”）， <code>async/await</code> 会成为一个自废武功的设计。</p><p>这会让开发者对异步编程浅尝辄止，无法真正地了解 <code>Promise</code> 在幕后的工作原理。</p><p>其二，这部分有些细微的差别。一些<a href="https://dev.to/jesterxl/why-i-don-t-use-async-await-4amc" target="_blank" rel="noopener">函数式编程热衷者</a>认为 <code>async/await</code> 会导致命令式编程。根据一位函数式开发者的观点，能够使用循环和 <code>try catch</code> 并不是好事，因为这些语法意味着副作用，并且鼓励不够理想的错误处理。</p><p>我赞同这个论点。函数式开发者理所当然地关心他们所写程序的确定性。他们对自己的代码要有绝对的把握权。为了达到这个目的，引入一个带有类似 <a href="https://folktale.origamitower.com/api/v2.3.0/en/folktale.result.html" target="_blank" rel="noopener">Result</a> 类型的复杂的类型系统也是合理的。但我不认为 <code>async/await</code> 和函数式编程之间互相矛盾。我的朋友 <a href="https://twitter.com/jrsinclair" target="_blank" rel="noopener">James</a> ，一个熟练的函数式编程开发者，他说在 Haskell 语言中存在一个和 <code>async/await</code> 相等的特性 - <a href="https://wiki.haskell.org/Keywords#do" target="_blank" rel="noopener">Do 符号</a>特性。</p><p>无论如何，我认为大多数人，包括我，函数编程只是一个后天养成的爱好（尽管我确实认为函数编程非常的酷，并且我也在慢慢地学习它）。由 <code>async/await</code> 提供的正常的控制流声明以及 <code>try catch</code> 的错误处理流程，对我们来说是极其有用的，在 JavaScript 中我们可以用它来编排复杂的异步操作。这正是为什么我说 “ <code>async/await</code> 只是一个语法糖” 这种说法是不够准确的。</p><h2 id="延伸阅读" tabindex="-1">延伸阅读 <a class="header-anchor" href="#延伸阅读">🔗</a></h2><ul><li><a href="https://jrsinclair.com/articles/2019/how-to-run-async-js-in-parallel-or-sequential/" target="_blank" rel="noopener">如何顺序或者并行执行 async 函数</a>。</li><li>标题使用的“语法糖”这几个字在 Reddit 上也引发了一场有趣的<a href="https://www.reddit.com/r/javascript/comments/wnli3o/on_syntactic_sugar/" target="_blank" rel="noopener">讨论</a></li></ul>`,62)])))}};export{b as categories,P as date,S as default,E as key,x as meta,C as tags,w as title,F as updated,_ as wordCount};
