import{createElementBlock as n,openBlock as t,createStaticVNode as p}from"vue";import{c as l}from"./app-BzoAWw-A.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const e={class:"kan-doc"},C="TypeScript 5.3（译）",b=["TypeScript","JavaScript"],F=["翻译"],T=1702454483,S="2023-12-13T16:01:23.000Z",v="2023-12-13T16:01:23.000Z",q=12306,x=[{property:"og:title",content:"TypeScript 5.3（译）"},{name:"twitter:title",content:"TypeScript 5.3（译）"}],M={__name:"TypeScript-5-3（译）",setup(i,{expose:a}){return a({frontmatter:{title:"TypeScript 5.3（译）",tags:["TypeScript","JavaScript"],categories:["翻译"],key:1702454483,date:"2023-12-13T16:01:23.000Z",updated:"2023-12-13T16:01:23.000Z",wordCount:12306,meta:[{property:"og:title",content:"TypeScript 5.3（译）"},{name:"twitter:title",content:"TypeScript 5.3（译）"}]}}),l({title:"TypeScript 5.3（译）",meta:[{property:"og:title",content:"TypeScript 5.3（译）"},{name:"twitter:title",content:"TypeScript 5.3（译）"}]}),(h,s)=>(t(),n("div",e,s[0]||(s[0]=[p(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>原文地址：<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-3/" target="_blank" rel="noopener">Announcing TypeScript 5.3</a></p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>今天我们激动地宣布：Typescript 5.3 正式发布。</p><p>如果你还不熟悉 TypeScript 的话，可以简单地理解为， TypeScript 是一门建立在 JavaScript 上的语言，TypeScript 通过添加类型语法来进行类型检查。TypeScript 提供的类型描述了程序的一些细节，然后在 TypeScript 编译之前根据这些类型进行检查以捕获可能的拼写错误，逻辑 BUG 等等。 TypeScript 还能根据这些类型来提供编辑器工具，比如代码完成，代码重构等等。实际上，如果你使用像 VS 或者 VS Code 这样的编辑器， TypeScript 已经提供了这种体验。你可以阅读关于 TypeScript 的文档 <a href="https://typescriptlang.org" target="_blank" rel="noopener">https://typescriptlang.org</a> 来了解更多信息。</p><p>为了开始使用 TypeScript ，可以通过 <a href="https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild" target="_blank" rel="noopener">NuGet</a> 获取，或者通过执行如下的 npm 命令：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-cmd"><span class="line"><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">npm </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">install</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">D</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> typescript</span></span></code></pre><p>以下是 TypeScript 5.3 新增的功能列表！</p><ul><li><a href="#%E5%AF%BC%E5%85%A5%E5%B1%9E%E6%80%A7">导入属性</a></li><li><a href="#%E5%9C%A8%E5%AF%BC%E5%85%A5%E7%B1%BB%E5%9E%8B%E4%B8%AD%E7%A8%B3%E5%AE%9A%E6%94%AF%E6%8C%81-resolution-mode-%E5%B1%9E%E6%80%A7">在导入类型中稳定支持 resolution-mode 属性</a></li><li><a href="#resolution-mode-%E6%94%AF%E6%8C%81%E6%89%80%E6%9C%89%E7%9A%84%E6%A8%A1%E5%9D%97%E6%A8%A1%E5%BC%8F">resolution-mode 支持所有的模块模式</a></li><li><a href="#switch-true-%E4%B8%8B%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E7%BC%A9%E9%99%90">switch (true) 下进行类型缩限</a></li><li><a href="#%E4%B8%8E%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83%E6%97%B6%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E7%BC%A9%E9%99%90">与布尔类型比较时进行类型缩限</a></li><li><a href="#%E9%80%9A%E8%BF%87-symbolhasinstance-%E5%AF%B9-instanceof-%E6%93%8D%E4%BD%9C%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E7%BC%A9%E9%99%90">通过 Symbol.hasInstance 对 instanceof 操作进行类型缩限</a></li><li><a href="#%E5%9C%A8%E5%AE%9E%E4%BE%8B%E5%AD%97%E6%AE%B5%E4%B8%8A%E6%A3%80%E6%B5%8B%E8%B6%85%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7">在实例字段上检测超类的属性可访问性</a></li><li><a href="#%E5%8F%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E5%B5%8C%E5%85%A5%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA">可交互的嵌入类型提示</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B1%BB%E5%9E%8B%E9%A6%96%E9%80%89%E7%9A%84%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%85%A5">设置为类型首选的自动导入</a></li><li><a href="#%E9%80%9A%E8%BF%87%E8%B7%B3%E8%BF%87-jsdoc-%E8%A7%A3%E6%9E%90%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96">通过跳过 JSDoc 解析进行优化</a></li><li><a href="#%E9%80%9A%E8%BF%87%E6%AF%94%E8%BE%83%E6%9C%AA%E6%A0%87%E5%87%86%E5%8C%96%E7%9A%84%E4%BA%A4%E9%9B%86%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96">通过比较未标准化的焦点进行优化</a></li><li><a href="#%E6%95%B4%E5%90%88-tsserverlibraryjs-%E5%92%8C-typescriptjs">整合 tsserverlibrary.js 和 typescript.js</a></li><li><a href="#%E7%A0%B4%E5%9D%8F%E6%80%A7%E5%8F%98%E6%9B%B4%E5%92%8C%E6%AD%A3%E7%A1%AE%E6%80%A7%E4%BF%AE%E5%A4%8D">破坏性变更和正确性修复</a></li></ul><h2 id="导入属性" tabindex="-1">导入属性 <a class="header-anchor" href="#导入属性">🔗</a></h2><p>TypeScript5.3 支持最近更新的<a href="https://github.com/tc39/proposal-import-attributes" target="_blank" rel="noopener">导入属性（ import attribute ）</a>提案。</p><p>导入属性的一个用例是在运行时的时候为一个的模块提供预期的格式信息。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 我们只想让这个导入被解释为 JSON ，</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 而不是一个带有 .json 扩展名的，可执行的或者说恶意的 JavaScript 文件。</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> obj</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./something.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> with</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#B8A965;--s-light:#998418;"> type</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> };</span></span></code></pre><p>这些属性自身不会被 TypeScript 检查，因为它们是特定于主机的，它们会被简单地保留下来，这样浏览器和运行时可以处理它们（可能也会报错）。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// TypeScript 认为下面的代码没问题。</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 但你的浏览器呢？可能就不这么认为了。</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> as</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> foo</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./foo.js</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> with</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#B8A965;--s-light:#998418;"> type</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">fluffy bunny</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> };</span></span></code></pre><p>动态导入也可以通过第二个参数来使用导入属性。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">obj</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> await</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> import</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./something.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    with</span><span style="--s-dark:#666666;--s-light:#999999;">: { </span><span style="--s-dark:#B8A965;--s-light:#998418;">type</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><p>第二个参数预期的类型由一个名为 <code>ImportCallOptions</code> 的类型定义，默认情况下只接受一个 <code>with</code> 属性。</p><p>请注意导入属性是由一个早期的在 TypeScript 4.5 实现的<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/#import-assertions" target="_blank" rel="noopener">导入断言（ import assertion ）</a>提案演化而来的。它们间最显著的区别就是前者使用 <code>with</code> 关键词，后者使用 <code>assert</code> 关键词。但不太明显的区别是，现在运行时可以自由地根据属性来指示导入路径的解析和解释，而导入断言只能在加载完一个模块之后断言模块的特征。</p><p>随着时间推移，TypeScript 会在未来废弃旧的导入断言的语法，进而采用来自提案的导入属性的语法。现存的使用 <code>assert</code> 关键字的代码应该迁移到 <code>with</code> 关键字。新的需要使用导入属性的代码应该只使用 <code>with</code> 关键字。</p><p>感谢 <a href="https://github.com/a-tarasyuk" target="_blank" rel="noopener">Oleksandr Tarasiuk</a> 实现了<a href="https://github.com/microsoft/TypeScript/pull/54242" target="_blank" rel="noopener">这个提案</a> ，同时也赞赏 <a href="https://github.com/Kingwl" target="_blank" rel="noopener">Wenlu Wang</a> 实现的<a href="https://github.com/microsoft/TypeScript/pull/40698" target="_blank" rel="noopener">导入断言</a> 。</p><h2 id="在导入类型中稳定支持-resolution-mode-属性" tabindex="-1">在导入类型中稳定支持 resolution-mode 属性 <a class="header-anchor" href="#在导入类型中稳定支持-resolution-mode-属性">🔗</a></h2><p>在 TypeScript 4.7 中，添加了对 <code>/// &lt;reference type=&quot;...&quot;&gt;</code> 中 <code>resolution-mode</code> 属性的支持，它可以用来控制一个说明符是通过 <code>import</code> 还是 <code>require</code> 解析。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/// </span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">reference</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> types</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">pkg</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> resolution-mode</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">require</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 或者</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/// </span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">reference</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> types</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">pkg</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> resolution-mode</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">import</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> /&gt;</span></span></code></pre><p>我们也为导入断言添加了一个相应的字段用来针对只导入类型的情况，然而，它只在 TypeScript 的夜间版本中支持。究其原因，本质上导入断言并不是为了指示模块解析。所以这个特性只在夜间模式中实验性地发布，用来获得更多的反馈。</p><p>但鉴于导入属性可以指示解析了，并且我们也观察到了许多合理的用例， TypeScript 5.3 现在支持了 <code>import type</code> 的 <code>resolution-mode</code> 属性。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Resolve \`pkg\` as if we were importing with a \`require()\`</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> TypeFromRequire</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">pkg</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> with</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">resolution-mode</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">require</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Resolve \`pkg\` as if we were importing with an \`import\`</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> TypeFromImport</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">pkg</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> with</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">resolution-mode</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">import</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MergedType</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#80A665;--s-light:#59873A;"> TypeFromRequire</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#80A665;--s-light:#59873A;"> TypeFromImport</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span></code></pre><p>这些导入属性同样可以用于 <code>import()</code> 。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> type</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> TypeFromRequire</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    import</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">pkg</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> { </span><span style="--s-dark:#B8A965;--s-light:#998418;">with</span><span style="--s-dark:#666666;--s-light:#999999;">: { </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">resolution-mode</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">require</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> } }).</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">TypeFromRequire</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> type</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> TypeFromImport</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    import</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">pkg</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> { </span><span style="--s-dark:#B8A965;--s-light:#998418;">with</span><span style="--s-dark:#666666;--s-light:#999999;">: { </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">resolution-mode</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">import</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> } }).</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">TypeFromImport</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MergedType</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#80A665;--s-light:#59873A;"> TypeFromRequire</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#80A665;--s-light:#59873A;"> TypeFromImport</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span></code></pre><p>更多的信息，可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/55725" target="_blank" rel="noopener">PR</a> 。</p><h2 id="resolution-mode-支持所有的模块模式" tabindex="-1">resolution-mode 支持所有的模块模式 <a class="header-anchor" href="#resolution-mode-支持所有的模块模式">🔗</a></h2><p>在之前， <code>resolution-mode</code> 只允许在 <code>moduleResolution</code> 选项为 <code>node16</code> 和 <code>nodenext</code> 下使用。为了让模块查找，特别是类型模块的查找更加容易， <code>resolution-mode</code> 现在可以在所有其他的 <code>moduleResolution</code> 选项下正常工作，比如 <code>bundler</code> ，<code>node10</code> ，甚至在 <code>classic</code> 下也不会报错。</p><p>更多的信息，可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/55725" target="_blank" rel="noopener">PR</a> 。</p><h2 id="switch-true-下进行类型缩限" tabindex="-1">switch (true) 下进行类型缩限 <a class="header-anchor" href="#switch-true-下进行类型缩限">🔗</a></h2><p>TypeScript 5.3 现在可以基于条件对一个 <code>switch (true)</code> 表达式内的每一个条件进行类型缩限。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> f</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">unknown</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    switch</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">true</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        case</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">string</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">            // x 在这里是一个 string 类型</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">            console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">toUpperCase</span><span style="--s-dark:#666666;--s-light:#999999;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        case</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Array</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">isArray</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">):</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">            // x 在这里是一个 string 或者 any[]</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">            console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#B8A965;--s-light:#998418;">length</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        default</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">          // x 在这里为 unknown 。</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">          // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这个特性最初由 <a href="https://github.com/Andarist" target="_blank" rel="noopener">Mateusz Burzyński</a> 提交，在此感谢该贡献的作者。</p><h2 id="与布尔类型比较时进行类型缩限" tabindex="-1">与布尔类型比较时进行类型缩限 <a class="header-anchor" href="#与布尔类型比较时进行类型缩限">🔗</a></h2><p>偶尔你可能会在一个条件中使用 <code>true</code> 或者 <code>false</code> 来进行直接的对比。通常这是不必要的比较，但你可能更喜欢它，可能是作为一种代码风格，又或者为了避免某些关于 JavaScript 真值问题。无论出于什么原因，先前的 TypeScript 在无法对此类判断执行类型缩限。</p><p>TypeScript 5.3 修复了这个问题，现在在进行类型缩限时能理解这些表达式。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> A</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    a</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> B</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    b</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">type</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MyType</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> A</span><span style="--s-dark:#666666;--s-light:#999999;"> |</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> B</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isA</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">MyType</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> is</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> A</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> in</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> someFn</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">MyType</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#80A665;--s-light:#59873A;">isA</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">a</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // works!</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>感谢 <a href="https://github.com/Andarist" target="_blank" rel="noopener">Mateusz Burzyński</a> 提供了实现了这个特性的 <a href="https://github.com/microsoft/TypeScript/pull/53681" target="_blank" rel="noopener">PR</a> 。</p><h2 id="通过-symbol-hasinstance-对-instanceof-操作进行类型缩限" tabindex="-1">通过 Symbol.hasInstance 对 instanceof 操作进行类型缩限 <a class="header-anchor" href="#通过-symbol-hasinstance-对-instanceof-操作进行类型缩限">🔗</a></h2><p>JavaScript 中一个有点深奥的特性是可以重写 <code>instanceof</code> 操作符的行为。为了实现它， <code>instanceof</code> 操作符右边的值需要一个具体的名叫 <code>Symbol.hasInstance</code> 的方法。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Weirdo</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    static</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">hasInstance</span><span style="--s-dark:#666666;--s-light:#999999;">](</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">testedValue</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        // 还能这样？</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> testedValue</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> undefined</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// false</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Thing</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> instanceof</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Weirdo</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// true</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">undefined</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> instanceof</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Weirdo</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>为了更好地模拟 <code>instanceof</code> 的行为， TypeScript 现在会检查是否存在 <code>[Symbol.hasInstance]</code> 方法，并且这个方法是否为一个类型断言函数，如果是的话，在 <code>instanceof</code> 操作符左边的待测试的值会正确地通过类型断言进行缩限。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> PointLike</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    y</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Point</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> implements</span><span style="--s-dark:#80A665;--s-light:#59873A;"> PointLike</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    y</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">        this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">        this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">y</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> y</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    distanceFromOrigin</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Math</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">sqrt</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> **</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">y</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> **</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    static</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">hasInstance</span><span style="--s-dark:#666666;--s-light:#999999;">](</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">unknown</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> is</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> PointLike</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">        return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !!</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">object</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">            &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">x</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> in</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">y</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> in</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">            typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">number</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">            typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> val</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">y</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">number</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> f</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">unknown</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> instanceof</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Point</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        // 可以访问 x 和 y ，正确</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        value</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        value</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">y</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">        </span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        // 无法访问 distanceFromOrigin ，因为我们把 value 缩限为 PointLike 而不是 Point</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        value</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">distanceFromOrigin</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>如同示例所示， <code>Point</code> 定义了自己的 <code>[Symbol.hasInstance]</code> 方法。它实际上充当了另外一个类型 <code>PointLike</code> 的自定义类型验证守卫。在函数 <code>f</code> 中，我们能够把 <code>value</code> 通过 <code>instanceof</code> 缩限到 <code>PointLike</code> ，而不是 <code>Point</code> 。这意味着我们可以访问属性 <code>x</code> 和 属性 <code>y</code> ，但不可以访问 <code>distanceFromOrigin</code> 方法。</p><p>更多的信息，可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/55052" target="_blank" rel="noopener">PR</a> 。</p><h2 id="在实例字段上检测超类的属性可访问性" tabindex="-1">在实例字段上检测超类的属性可访问性 <a class="header-anchor" href="#在实例字段上检测超类的属性可访问性">🔗</a></h2><p>在 JavaScript 中，可以通过 <code>super</code> 关键字访问基类中的定义的属性或方法。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Base</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    someMethod</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Base method called!</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Derived</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Base</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    someMethod</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Derived method called!</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">        super</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">someMethod</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Derived</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">someMethod</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 打印:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   Derived method called!</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   Base method called!</span></span></code></pre><p>如果使用 <code>this.someMethod()</code> 这样的编写方式可能会存在歧义，因为他可能执行的是一个重写的方法。这是一个微妙的区别，而且如果声明根本没被覆盖，由于两者（使用 <code>super</code> 或者使用 <code>this</code>）通常可以互换，因此这种情况会变得更加的微妙。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Base</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    someMethod</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">someMethod called!</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Derived</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Base</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    someOtherMethod</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        // 两者行为相同</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">        this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">someMethod</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">        super</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">someMethod</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Derived</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">someOtherMethod</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 打印:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   someMethod called!</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   someMethod called!</span></span></code></pre><p>交替使用带来的问题是 <code>super</code> 只能获取原型上的定义的成员，而不是实例上的属性。这意味着如果你编写了 <code>super.someMethod()</code> ，但 <code>someMethod</code> 被定义为一个字段，你就会收到一个运行时错误！</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Base</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 译者注：这里 someMethod 是一个实例属性，而非原型属性</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 即 someMethod 并不会挂在到原型上，而是每个实例都会有一个不同 someMethod ，它的 this 指向自身</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    someMethod</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">        console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">someMethod called!</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Derived</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Base</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    someOtherMethod</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">        super</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">someMethod</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Derived</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">someOtherMethod</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 💥</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 报错，因为 super.someMethod 为 underfined 。</span></span></code></pre><p>TypeScript 5.3 现在会更仔细地检查 <code>super</code> 属性的访问和方法调用是否存在对应的类字段。如果是的话，现在会得到一个类型检查错误。</p><p>感谢 <a href="https://github.com/Jack-Works" target="_blank" rel="noopener">Jack Works</a> 贡献了这个<a href="https://github.com/microsoft/TypeScript/pull/54056" target="_blank" rel="noopener">类型检查</a> 。</p><h2 id="可交互的嵌入类型提示" tabindex="-1">可交互的嵌入类型提示 <a class="header-anchor" href="#可交互的嵌入类型提示">🔗</a></h2><p>TypeScript 嵌入提示现在支持跳转类型的定义，这样就可以更随意的浏览代码了。</p><p><a data-fancybox="doc-gallery" href="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/10/clickable-inlay-hints-for-types-5-3-beta.gif" target="_blank" rel="noopener noreferrer"><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/10/clickable-inlay-hints-for-types-5-3-beta.gif" alt=""></a></p><p>更多信息请查看这个<a href="https://github.com/microsoft/TypeScript/pull/55141" target="_blank" rel="noopener">实现</a>。</p><h2 id="设置为类型首选的自动导入" tabindex="-1">设置为类型首选的自动导入 <a class="header-anchor" href="#设置为类型首选的自动导入">🔗</a></h2><p>先前当 TypeScript 在类型位置生成一些自动导入的时候，会根据你的设置添加一个 <code>type</code> 修饰符。比如，当你对下面的 <code>Person</code> 使用自动导入的时候：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Person</span></span></code></pre><p>TypeScript 的编辑体验会使用如下的形式来导入 <code>Person</code> ：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./types</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Person</span></span></code></pre><p>如果设置了 <code>verbatimModuleSyntax</code> ，那么会添加 <code>type</code> 修饰符：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./types</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Person</span></span></code></pre><p>然而，可能你的代码库中无法使用某些选项，或者你只是偏好尽可能的 <code>type</code> 的显示导入。</p><p>经过最近的修改， TypeScript 现在让该特性成为特定的 VSCode 编辑器选项，你可以在 <code>TypeScript &gt; Preferences: Prefer Type Only Auto Imports</code> 的视图中，或者 JSON 配置文件中的 <code>typescript.preferences.preferTypeOnlyAutoImports</code> 选项来启用它。</p><h2 id="通过跳过-jsdoc-解析进行优化" tabindex="-1">通过跳过 JSDoc 解析进行优化 <a class="header-anchor" href="#通过跳过-jsdoc-解析进行优化">🔗</a></h2><p>当通过 <code>tsc</code> 来执行 TypeScript 时，编译器现在会避免解析 JSDoc 。这会减少自身解析的时间，而且减少由于存储注释带来的内存使用以及垃圾收集所花费的时间。总而言之，你会在 <code>--watch</code> 模式下观察到稍快的编译速度以及更快的反应。</p><p>具体的变更可以在<a href="https://github.com/microsoft/TypeScript/pull/52921" target="_blank" rel="noopener">这里</a>查看。</p><p>因为不是所有 TypeScript 使用的工具都存储 JSDoc （比如： typeScript-eslint 和 Prettier ），这个解析策略已经作为 API 本身的一部分出现。这能够让这些工具获得与 TypeScript 编译器相同的内存和速度提升。新增了对解析注释的策略的新的选项 <code>JSDocParsingMode</code> 。更多的信息可以在查看这个 <a href="https://github.com/microsoft/TypeScript/pull/55739" target="_blank" rel="noopener">PR</a> 。</p><h2 id="通过比较未标准化的交集进行优化" tabindex="-1">通过比较未标准化的交集进行优化 <a class="header-anchor" href="#通过比较未标准化的交集进行优化">🔗</a></h2><p>在 TypeScript 中，并集和交集始终遵守一个特定的形式，即交集不能包含并集类型。这意味着当我们在一个并集上创建一个交集，比如 <code>A &amp; (B | C)</code> ，那么交集会被标准化为 <code>(A &amp; B) | (A &amp; C)</code> 。尽管如此，在某些情况下，类型系统会出于显示的目的而保留原始的形式。</p><p>事实证明原始的类型可以被用在一些类型间的巧妙的快速路径比较。</p><p>比如，我们假设有 <code>SomeType &amp; (Type1 | Type2 | ... | Type99999NINE)</code> 这样的一个类型，我们想要观察它是否可以分配个 <code>SomeType</code> 。回想一下，我们不是真的有一个原始的交集类型，我们有的时一个并集类型，它看起来就如同 <code>(SomeType &amp; Type1) | (SomeType &amp; Type2) | ... | (SomeType &amp; Type99999NINE)</code> 。 当检查一个并集是否可以分配给目标类型时，我们必须检查并集的每个成员是否可以分配给目标类型，这样会非常的慢。</p><p>在 TypeScript 5.3 中，我们顺带使用了这些隐藏起来的原始交集形式。当我们需要和类型比较时，就可以快速的检查是否目标是否存在于原始交集的任何组成部分。</p><p>更多的信息，可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/55851" target="_blank" rel="noopener">PR</a> 。</p><h2 id="整合-tsserverlibrary-js-和-typescript-js" tabindex="-1">整合 tsserverlibrary.js 和 typescript.js <a class="header-anchor" href="#整合-tsserverlibrary-js-和-typescript-js">🔗</a></h2><p>TypeScript 自身包含两个库文件： <code>tsserverlibrary.js</code> 和 <code>typescript.js</code> 。某些 API 只在 <code>tsserverlibrary.js</code> 存在（比如 <code>ProjectService</code> ）。这可能对一些使用者来说有用。尽管如此，这两个文件是不是相同的打包文件，但在源代码中它们有许多的重叠，重复的代码。更重要的是，由于自动导入或者是肌肉记忆，持续使用其中的一种会带来挑战性，因为很容易意外加载两个模块，而且代码可能无法在相同 API 的不同实例下恰当地工作。即使可以正常工作，加载第二个打包文件也会增加资源的使用。</p><p>因此，我们决定整合这两个文件。 <code>typescript.js</code> 现在包含了 <code>tsserverlibrary.js</code> ， <code>tsserverlibraray.js</code> 现在只是简单地从 <code>typescript.js</code> 中重新导出而已。比较整合前后，我们可以观察到如下的包体积情况：</p><table><thead><tr><th></th><th>Before</th><th>After</th><th>Diff</th><th>Diff (percent)</th></tr></thead><tbody><tr><td>Packed</td><td>6.90 MiB</td><td>5.48 MiB</td><td>-1.42 MiB</td><td>-20.61%</td></tr><tr><td>Unpacked</td><td>38.74 MiB</td><td>30.41 MiB</td><td>-8.33 MiB</td><td>-21.50%</td></tr></tbody></table><table><thead><tr><th></th><th>Before</th><th>After</th><th>Diff</th><th>Diff (percent)</th></tr></thead><tbody><tr><td>lib/tsserverlibrary.d.ts</td><td>570.95 KiB</td><td>865.00 B</td><td>-570.10 KiB</td><td>-99.85%</td></tr><tr><td>lib/tsserverlibrary.js</td><td>8.57 MiB</td><td>1012.00 B</td><td>-8.57 MiB</td><td>-99.99%</td></tr><tr><td>lib/typescript.d.ts</td><td>396.27 KiB</td><td>570.95 KiB</td><td>+174.68 KiB</td><td>+44.08%</td></tr><tr><td>lib/typescript.js</td><td>7.95 MiB</td><td>8.57 MiB</td><td>+637.53 KiB</td><td>+7.84%</td></tr></tbody></table><p>换句话说，包体积减少了 20.5% 以上。</p><p>更多的信息，可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/55273" target="_blank" rel="noopener">PR</a> 。</p><h2 id="破坏性变更和正确性修复" tabindex="-1">破坏性变更和正确性修复 <a class="header-anchor" href="#破坏性变更和正确性修复">🔗</a></h2><h3 id="lib-d-ts-变更" tabindex="-1">lib.d.ts 变更 <a class="header-anchor" href="#lib-d-ts-变更">🔗</a></h3><p>DOM 生成的类型可能对你的代码库会有影响。更多相关的信息请查看 <a href="https://github.com/microsoft/TypeScript/pull/55798" target="_blank" rel="noopener">DOM 在 TypeScript 5.3 中的更新</a>。</p><h3 id="检查-super-实例上属性的可访问性" tabindex="-1">检查 super 实例上属性的可访问性 <a class="header-anchor" href="#检查-super-实例上属性的可访问性">🔗</a></h3><p>当通过 <code>super</code> 引用声明时，TypeScript 5.3 现在会进行检测。如果访问的属性是一个类字段那么会发出一个错误。这可以防止运行时可能发生的错误。</p><p>更多的信息，可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/54056" target="_blank" rel="noopener">PR</a> 。</p><h2 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h2><p>5.3 的新特性比较的“普通”，像导入属性我是基本用不到，不过也不排除只是我用不到而已😂</p><p>其中比较吸引我眼球的是这个超类属性可访问性检测。我是刚明白类中的箭头函数是非原型属性的，不过仔细想也是，如果是原型属性，那么就和箭头函数 this 的固定指向产生矛盾了。</p>`,97)])))}};export{F as categories,S as date,M as default,T as key,x as meta,b as tags,C as title,v as updated,q as wordCount};
