import{createElementBlock as t,openBlock as o,createStaticVNode as i}from"vue";import{c as r}from"./app-4gPi1Ho2.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const c={class:"kan-doc"},_="记一次通过github创建自己的图床以及压缩图片",x=1642994672,P="2022-01-24T11:24:32.000Z",G="2023-02-13T18:28:45.000Z",w=["图床","图片压缩","PicGo","sharp"],C=["编程"],$=4484,A=[{property:"og:title",content:"记一次通过github创建自己的图床以及压缩图片"},{name:"twitter:title",content:"记一次通过github创建自己的图床以及压缩图片"}],T={__name:"记一次通过github创建自己的图床以及压缩图片",setup(p,{expose:a}){return a({frontmatter:{title:"记一次通过github创建自己的图床以及压缩图片",key:1642994672,date:"2022-01-24T11:24:32.000Z",updated:"2023-02-13T18:28:45.000Z",tags:["图床","图片压缩","PicGo","sharp"],categories:["编程"],wordCount:4484,meta:[{property:"og:title",content:"记一次通过github创建自己的图床以及压缩图片"},{name:"twitter:title",content:"记一次通过github创建自己的图床以及压缩图片"}]}}),r({title:"记一次通过github创建自己的图床以及压缩图片",meta:[{property:"og:title",content:"记一次通过github创建自己的图床以及压缩图片"},{name:"twitter:title",content:"记一次通过github创建自己的图床以及压缩图片"}]}),(s,e)=>(o(),t("div",c,e[0]||(e[0]=[i('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>记一次通过 <code>github</code> 创建自己的图床以及压缩图片</p><p>之前一直有这个想法，之前帖子的图床为</p><ul><li><a href="https://sm.ms" target="_blank" rel="noopener">sm.ms</a></li><li><a href="https://imgtu.com" target="_blank" rel="noopener">路过图床</a></li></ul><p>两个混用，本来应该是只用 <code>sm.ms</code> 的，但是有一阵子图片加载巨慢</p><p>就换成路过图床了，其实不是很想折腾</p><p>但是路过图床有一些问题，对于 <code>ACG</code> 之类的图片，很容易被检测，然后被删除</p><p>上次换了个头像，下面这个，一天就给我删了</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242324821.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242324821.avif" alt=""></a></p><p>这图也不是 <code>18+</code> 图片吧，不过路过图床也是规定了的，没啥好说的</p><p>由于是 <code>AI</code> 检测，图存在误杀，人工感觉不实际，为了大部分用户，这么做<strong>理解</strong></p><p>如果不是和 <code>ACG</code> 相关的图片，路过图床绝对是不错的选择</p><p>所以，由于以后可能要写一些 <code>ACG</code> 类的帖子</p><p>用三方的图床可能会麻烦，而且不好备份，故搞个 <code>github</code> 的图床</p><p>这样子定时往本地拉一拉即可，而且也不会被无故删除，当然前提是不要传色图，不然大概率也是无</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><h2 id="图床搭建" tabindex="-1">图床搭建 <a class="header-anchor" href="#图床搭建">🔗</a></h2><p>网上关于 <code>github</code> 的图床一大堆了，这里简单写下即可</p><p>这里用的是 <code>PicGo</code> 这个软件，一个基于 <code>electron</code> + <code>Vue</code> 的图床工具，可以配置各种类型的图床，比如上面的 <code>sm.ms</code> 和路过图床，它都支持</p><p>当然它也支持 <code>github</code> 的图床，只需简单的配置即可</p><p><a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">PicGo官网</a></p><p>下载的话要去 <a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo github仓库</a></p><p>目前最新的版本为 <code>2.3.0</code>，目前有 <code>beta</code> 版，不过没必要，稳定版即可</p><p>下载安装完成之后，打开后的界面如下</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241410527.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241410527.avif" alt=""></a></p><p>界面非常简单，然后这里我们不用内置的 <code>github</code> 图床</p><p>因为删除的时候没有同步仓库，会造成仓库冗余</p><p>直接找 <code>githubPlus</code> 插件</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241424757.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241424757.avif" alt=""></a></p><p>安装完会提示你重启，按提示就行了</p><p>然后进入图床设置里的 <code>githubPlus</code></p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241425098.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241425098.avif" alt=""></a></p><p>然后就先放着，去github创建个 <code>token </code>和图床仓库</p><p>先进入个人 <code>setting</code></p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241433139.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241433139.avif" alt=""></a></p><p>左侧列表找到 <code>developer settings</code></p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241435826.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241435826.avif" alt=""></a></p><p>进入之后点击左侧的 <code>personal access tokens</code>，在点击右上角的 <code>generate new token</code></p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241436054.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241436054.avif" alt=""></a></p><p><code>Note</code> 随便写，第二个过期日期，可以选永久，不过 <code>github</code> 不推荐，我是选了 <code>90</code> 天</p><p>下面的 <code>repo</code> 要勾上，其他不用管</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241439921.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241439921.avif" alt=""></a></p><p>然后拉到最下面，点击 <code>generate</code> 即可</p><p>成功之后会给你一个 <code>token</code> ，要记住，因为配置要用到</p><p>然后我们创建一个 <code>repo</code>，这部分就不截图了，很简单</p><p>建完之后回到 <code>PicGo</code></p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241425098.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241425098.avif" alt=""></a></p><ul><li><code>repo</code> 填写 <code>${github用户名}/${仓库名}</code> ，比如我们仓库叫 <code>image</code> ，我的用户名叫 <code>Dedicatus546</code>，那么我就要填 <code>Dedicatus546/image</code></li><li><code>branch</code> 分支名，使用 <code>main</code> 主分支即可</li><li><code>token</code> <code>github api token</code> 刚才创建的那个，黏贴进去</li><li><code>path</code> 不管</li><li><code>customUrl</code> 这里可用 <code>jsdelivr</code> 的公共 <code>cdn</code> ，填写格式 <code>https://fastly.jsdelivr.net/gh/${github用户名}/${仓库名}@${分支名}</code> ，我的是 <code>https://fastly.jsdelivr.net/gh/Dedicatus546/image@main</code></li><li><code>origin</code> 选 <code>github</code> 即可</li></ul><p>然后记得点确定，成功的话右下角会有提示设置成功</p><p>最后一步，设置一下 <code>PicGo</code></p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241454432.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241454432.avif" alt=""></a></p><p>个人推荐开时间戳重命名以及上传后自动复制 <code>url</code> 这两个选项</p><p>点击上传区就可以开始愉快的传图片了，我使用的是微信的截图，所以需要点击右下角的剪切板图片来上传</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241452507.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201241452507.avif" alt=""></a></p><p>成功之后，会自动复制相关的格式到剪切板</p><p>然后黏贴到文章里就完成了</p><h2 id="图片压缩" tabindex="-1">图片压缩 <a class="header-anchor" href="#图片压缩">🔗</a></h2><p>其实搞完图床就差不多了，但是真正的搬砖工是不会止步于此的</p><p>接下来我们来搞图片压缩</p><p>实现图片压缩，我们需要为 <code>PicGo</code> 写一个插件，在拿到图片后上传前进行压缩</p><p>本来想看有没有现成的插件可用的，搜了一下，真有</p><p><a href="https://github.com/imbillow/picgo-plugin-sharp" target="_blank" rel="noopener">picgo-plugin-sharp</a></p><p>遗憾的是，这个插件已经不维护了，而且是 <code>cli</code> 插件，有点不足</p><p><code>sharp</code> 版本有点老了, <code>PicGo</code> 的版本还是 <code>1.4.0</code></p><p>所以，我们直接在这个插件上二次开发即可</p><p>第一步就是把依赖更新一下，主要是 <code>sharp</code> 和 <code>PicGo</code></p><p>然后就是改动核心文件 <code>index.ts</code> 了</p><p>代码简单，我直接把仓库放 <code>github</code> 上了，直接拉下来即可</p><p><a href="https://github.com/Dedicatus546/picgo-plugin-sharp" target="_blank" rel="noopener">Dedicatus546/picgo-plugin-sharp</a></p><p>拉下来之后，点击插件页面的右上角导入本地的插件</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242248269.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242248269.avif" alt=""></a></p><p>导入完就有第二个插件 <code>sharp</code> 了</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242251033.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242251033.avif" alt=""></a></p><p>点击插件的右下角的设置按钮，最后一个选项如果关闭了就把它打开，如上图</p><p>点击倒数第二个选项，就可以设置压缩格式了，默认为 <code>avif</code></p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242253805.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242253805.avif" alt=""></a></p><p>默认情况下使用 <code>sharp</code> 的默认压缩参数，如果想要自定义的话，需要配置 <code>PicGo</code> 的配置</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242254380.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242254380.avif" alt=""></a></p><p>然后找到如下的配置，按格式配置即可</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242255179.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242255179.avif" alt=""></a></p><p>比如上图 <code>avif</code> 的配置，<code>quality</code>为 <code>100</code> ，表示压缩质量最高</p><p><code>lossless</code> 为 <code>true</code>，表示开启无损压缩</p><p><code>speed</code> 为 <code>0</code> ，表示使用更长的 <code>CPU</code> 时间生成更小的文件</p><p><strong>PS：配置完记得重启 <code>PicGo</code></strong></p><p>相关的配置可以查找 <code>sharp</code> 的官方文档进行查看</p><p><a href="https://sharp.pixelplumbing.com/api-output" target="_blank" rel="noopener">sharp - High performance Node.js image processing</a></p><p>比如 <code>avif</code> 的官方的配置</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242315309.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242315309.avif" alt=""></a></p><p>经过压缩之后，图片小了很多，相当的nice</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242317955.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/01/24/202201242317955.avif" alt=""></a></p><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>其实还可以再做一个插件直接进行本地备份的，难度不大，就是在上传之前存到指定目录即可</p><p>有空再搞搞吧</p>',93)])))}};export{C as categories,P as date,T as default,x as key,A as meta,w as tags,_ as title,G as updated,$ as wordCount};
