import{createElementBlock as n,openBlock as e,createStaticVNode as t}from"vue";import{c as l}from"./app-C4XuqRXg.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const p={class:"kan-doc"},m="以现代的方式在JavaScript中进行深克隆（译）",v=["Deep Clone","JavaScript"],S=["译文"],w=1703599853,x="2023-12-26T22:10:53.000Z",E="2023-12-26T22:10:53.000Z",F=7146,_=[{property:"og:title",content:"以现代的方式在JavaScript中进行深克隆（译）"},{name:"twitter:title",content:"以现代的方式在JavaScript中进行深克隆（译）"}],q={__name:"以现代的方式在JavaScript中进行深克隆（译）",setup(i,{expose:a}){return a({frontmatter:{title:"以现代的方式在JavaScript中进行深克隆（译）",tags:["Deep Clone","JavaScript"],categories:["译文"],key:1703599853,date:"2023-12-26T22:10:53.000Z",updated:"2023-12-26T22:10:53.000Z",wordCount:7146,meta:[{property:"og:title",content:"以现代的方式在JavaScript中进行深克隆（译）"},{name:"twitter:title",content:"以现代的方式在JavaScript中进行深克隆（译）"}]}}),l({title:"以现代的方式在JavaScript中进行深克隆（译）",meta:[{property:"og:title",content:"以现代的方式在JavaScript中进行深克隆（译）"},{name:"twitter:title",content:"以现代的方式在JavaScript中进行深克隆（译）"}]}),(h,s)=>(e(),n("div",p,s[0]||(s[0]=[t(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>原文地址：<a href="https://www.builder.io/blog/structured-cloneDeep" target="_blank" rel="noopener">Cloning Objects in JavaScript, the Modern Way</a></p><p><a data-fancybox="doc-gallery" href="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F03f2036674724006ae64d9bc4d07ab6d?format=webp&amp;width=1600" target="_blank" rel="noopener noreferrer"><img src="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F03f2036674724006ae64d9bc4d07ab6d?format=webp&amp;width=1600" alt=""></a></p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>你知道现在在 JavaScript 中已经有一个原生的方法可以深度克隆对象了吗？</p><p>没错， JavaScript 的运行时内建了这个方法，就是 <code>structuredClone</code> ：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> calendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Builder.io Conf</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  date</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Date</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">123</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  attendees</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Steve</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 😍</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> copied</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> structuredClone</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">calendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span></code></pre><p>你可能留意到了在上面的例子中，我们不仅拷贝了一个对象，而且包含了嵌套的数组，甚至是一个 <code>Date</code> 对象。</p><p>对这些类型的克隆也和预期一致：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">copied</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attendees</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // [&quot;Steve&quot;]</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">copied</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">date</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // Date: Wed Dec 31 1969 16:00:00</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">cocalendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attendees</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> copied</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attendees</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // false</span></span></code></pre><p>没错，但 <code>structuredClone</code> 不仅能支持上面的情况，还能：</p><ul><li>克隆无限嵌套的对象或者数组。</li><li>克隆循环引用。</li><li>克隆各种各样的 JavaScript 类型，比如 <code>Date</code> ， <code>Set</code> ， <code>Map</code> ， <code>Error</code> ， <code>RegExp</code> ， <code>ArrayBuffer</code> ， <code>Blob</code> ， <code>File</code> ， <code>ImageData</code> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types" target="_blank" rel="noopener">等等</a>。</li><li>转移任何<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects" target="_blank" rel="noopener">可以转移的对象</a>。</li></ul><p>所以，拷贝下面的例子的对象虽然有点疯狂，但 <code>structuredClone</code> 却能按预期工作：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> kitchenSink</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  set</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Set</span><span style="--s-dark:#666666;--s-light:#999999;">([</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">]),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  map</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Map</span><span style="--s-dark:#666666;--s-light:#999999;">([[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">]]),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  regex</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> /</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">foo</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  deep</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#B8A965;--s-light:#998418;"> array</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> File</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">someBlobData</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">file.txt</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> ]</span><span style="--s-dark:#666666;--s-light:#999999;"> },</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  error</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Error</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello!</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">kitchenSink</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">circular</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> kitchenSink</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ✅ 完美，完全深度地复制</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> clonedSink</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> structuredClone</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">kitchenSink</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span></code></pre><h2 id="为什么不用对象展开？" tabindex="-1">为什么不用对象展开？ <a class="header-anchor" href="#为什么不用对象展开？">🔗</a></h2><p>要注意到我们谈论的是深度复制。如果你只是需要一个浅复制，及不用复制嵌套的对象或者数据，那我们就可以使用对象展开：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> simpleEvent</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Builder.io Conf</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ✅ 正常工作，这里并没有嵌套的对象或者数组</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> shallowCopy</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">calendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span></span></code></pre><p>或者你更喜欢其他的方式：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> shallowCopy</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Object</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">assign</span><span style="--s-dark:#666666;--s-light:#999999;">({},</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> simpleEvent</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> shallowCopy</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Object</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">create</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">simpleEvent</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span></code></pre><p>但是一旦我们需要复制嵌套的项的时候，我们就会遇到问题：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> calendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Builder.io Conf</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  date</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Date</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">123</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  attendees</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Steve</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> shallowCopy</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">calendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 🚩  &quot;Bob&quot; 添加到了复制的对象和原始的对象中，它们是同一个引用</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">shallowCopy</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">attendees</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">push</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Bob</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 🚩 更新了复制的对象和原始的对象的 date ，它们是同一个引用</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">shallowCopy</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">date</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">setTime</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">456</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span></code></pre><p>就如你看到的那样，我们无法通过对象展开来完全拷贝一个这样的对象。</p><p>嵌套的日期对象或者数据在两者间仍然是一个共享的引用，如果我们在编辑时认为这些操作只是更新了复制的 <code>calendarEvent</code> 对象的话，那么会带来严重的问题。</p><h2 id="为什么不用-json-parse-json-stringify-x-？" tabindex="-1">为什么不用 <code>JSON.parse(JSON.stringify(x))</code> ？ <a class="header-anchor" href="#为什么不用-json-parse-json-stringify-x-？">🔗</a></h2><p>是的，这种方式实际上是一个很棒的方式，它的性能出奇地好，但是存在一些 <code>structuredClone</code> 已经解决的问题。</p><p>比如下面这个例子：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> calendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Builder.io Conf</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  date</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Date</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">123</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  attendees</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Steve</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 🚩 JSON.stringify 把 date 转成一个字符串了</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> problematicCopy</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> JSON</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">parse</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">JSON</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">stringify</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">calendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;">))</span></span></code></pre><p>如果我们打印 <code>problematicCopy</code> ，我们会看到：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json5"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">  title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Builder.io Conf</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">  date</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">1970-01-01T00:00:00.123Z</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">  attendees</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Steve</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这不是我们想要的！ <code>date</code> 字段应该是一个 <code>Date</code> 对象，而不是一个字符串。</p><p>出现这种情况的原因是 <code>JSON.stringify</code> 只能处理基本的对象、数组和基本的类型。任何其他的类型会以难以预测的方式进行处理。就比如 <code>Date</code> 会被转化成字符串，但一个 <code>Set</code> 对象就会被简单地转化为 <code>{}</code> 。</p><p><code>JSON.stringify</code> 甚至会完全忽略某些东西，比如 <code>undefined</code> 或者函数。</p><p>比如，如果我们使用 <code>JSON.stringify</code> 拷贝 <code>kitchenSink</code> 变量的话：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> kitchenSink</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  set</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Set</span><span style="--s-dark:#666666;--s-light:#999999;">([</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">]),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  map</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Map</span><span style="--s-dark:#666666;--s-light:#999999;">([[</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">]]),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  regex</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> /</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">foo</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  deep</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#B8A965;--s-light:#998418;"> array</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> File</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">someBlobData</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">file.txt</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> ]</span><span style="--s-dark:#666666;--s-light:#999999;"> },</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  error</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Error</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello!</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> veryProblematicCopy</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> JSON</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">parse</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">JSON</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">stringify</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">kitchenSink</span><span style="--s-dark:#666666;--s-light:#999999;">))</span></span></code></pre><p>我们会得到：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">set</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {},</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">map</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {},</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">regex</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {},</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">deep</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">array</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      {}</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    ]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">error</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>呃。</p><p>哦对了，我们还必须删除我们最初需要的循环引用，因为 <code>JSON.stringify</code> 在遇到它们时会简单地抛出错误。</p><p>所以，如果我们的需求符合它的功能，那么这种方式很棒。我们可以用 <code>structuredClone</code> 来做很多 <code>JSON.stringify</code> 做不到的事情。</p><h2 id="为什么不用-clonedeep-？" tabindex="-1">为什么不用 <code>_.cloneDeep</code> ？ <a class="header-anchor" href="#为什么不用-clonedeep-？">🔗</a></h2><p>如今， Lodash 的 <code>cloneDeep</code> 函数已经是解决该问题的一个非常常见的方法。</p><p>事实上它也按预期工作：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> cloneDeep</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">lodash/cloneDeep</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> calendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  title</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Builder.io Conf</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  date</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Date</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">123</span><span style="--s-dark:#666666;--s-light:#999999;">),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  attendees</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Steve</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> clonedEvent</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> cloneDeep</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">calendarEvent</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span></code></pre><p>但是这会有一个警告。根据 IDE 里的 <a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost" target="_blank" rel="noopener">Import Cost</a> 插件打印的导入占用大小，这一个函数压缩后的大小为 17.4kb （压缩后为 5.3kb ）：</p><p><a data-fancybox="doc-gallery" href="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2Faa5ab14fd21741bf8e327dd6e6fb68b1?format=webp&amp;width=1600" target="_blank" rel="noopener noreferrer"><img src="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2Faa5ab14fd21741bf8e327dd6e6fb68b1?format=webp&amp;width=1600" alt=""></a></p><p>假设你只是需要导入这个函数，如果你使用了更加常见的导入方式，那么你不会意识到 Tree-Shaking 并不总是按你的期望工作，你可能会在不经意间为这个函数导入多达 <a href="https://bundlephobia.com/package/lodash@4.17.21" target="_blank" rel="noopener">25kb</a> 的内容。</p><p><a data-fancybox="doc-gallery" href="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F5dbbee190753414bb31b720059a501db?format=webp&amp;width=2000" target="_blank" rel="noopener noreferrer"><img src="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F5dbbee190753414bb31b720059a501db?format=webp&amp;width=2000" alt=""></a></p><p>虽然对任何人来说这都不算“世界末日”，但是在我们的例子中根本没有必要，因为浏览器早已内置了 <code>structuredClone</code> 了。</p><h2 id="structuredclone-不能克隆什么？" tabindex="-1"><code>structuredClone</code> 不能克隆什么？ <a class="header-anchor" href="#structuredclone-不能克隆什么？">🔗</a></h2><h3 id="函数无法被克隆" tabindex="-1">函数无法被克隆 <a class="header-anchor" href="#函数无法被克隆">🔗</a></h3><p>尝试克隆函数则会抛出一个 <code>DataCloneError</code> 异常：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 🚩 错误！</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">structuredClone</span><span style="--s-dark:#666666;--s-light:#999999;">({</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fn</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> })</span></span></code></pre><h3 id="dom-节点无法被克隆" tabindex="-1">DOM 节点无法被克隆 <a class="header-anchor" href="#dom-节点无法被克隆">🔗</a></h3><p>尝试克隆 DOM 节点也会抛出一个 <code>DataCloneError</code> 异常：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 🚩 错误！</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">structuredClone</span><span style="--s-dark:#666666;--s-light:#999999;">({</span><span style="--s-dark:#B8A965;--s-light:#998418;"> el</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> document</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">body</span><span style="--s-dark:#666666;--s-light:#999999;"> })</span></span></code></pre><h3 id="属性描述符，-setter-和-getter" tabindex="-1">属性描述符， setter 和 getter <a class="header-anchor" href="#属性描述符，-setter-和-getter">🔗</a></h3><p>类似元数据之类的特性都无法被克隆。</p><p>比如，对于一个 getter ，克隆的是它的返回值，而不是 getter 函数自身（或者任何其他的属性元数据）：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">structuredClone</span><span style="--s-dark:#666666;--s-light:#999999;">({</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> get</span><span style="--s-dark:#80A665;--s-light:#59873A;"> foo</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> return</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">bar</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> })</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Becomes: { foo: &#39;bar&#39; }</span></span></code></pre><h3 id="对象原型" tabindex="-1">对象原型 <a class="header-anchor" href="#对象原型">🔗</a></h3><p>原型链不会被遍历或者是复制。所以如果你克隆一个 <code>MyClass</code> 的实例，克隆后的对象不再是 <code>MyClass</code> 的一个实例（但该类所有合法的属性都会被克隆）：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MyClass</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  foo</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">bar</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  myMethod</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> /* ... */</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> myClass</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> MyClass</span><span style="--s-dark:#666666;--s-light:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> cloned</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> structuredClone</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">myClass</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Becomes: { foo: &#39;bar&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">cloned</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> instanceof</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> myClass</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // false</span></span></code></pre><h3 id="所有支持克隆的类型" tabindex="-1">所有支持克隆的类型 <a class="header-anchor" href="#所有支持克隆的类型">🔗</a></h3><p>简单地讲，任何未在下面列表的类型都无法被克隆：</p><h4 id="js-内建类型" tabindex="-1"><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#javascript_types" target="_blank" rel="noopener">JS 内建类型</a> <a class="header-anchor" href="#js-内建类型">🔗</a></h4><p><code>Array</code> ， <code>ArrayBuffer</code> ， <code>Boolean</code> ， <code>DataView</code> ， <code>Date</code> ， <code>Error</code> 类型 (下文有详细的列表)， <code>Map</code> ， <code>Object</code> 类型的简单对象 (比如，字面对象) ， <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values" target="_blank" rel="noopener">基本类型</a>，但要除去 <code>symbol</code> (也就是包括 <code>number</code> ， <code>string</code> ， <code>null</code> ， <code>undefined</code> ， <code>boolean</code> ， <code>BigInt</code>)， <code>RegExp</code> ， <code>Set</code> ， <code>TypedArray</code> 。</p><h4 id="错误类型" tabindex="-1">错误类型 <a class="header-anchor" href="#错误类型">🔗</a></h4><p><code>Error</code> ， <code>EvalError</code> ， <code>RangeError</code> ， <code>ReferenceError</code> ， <code>SyntaxError</code> ， <code>TypeError</code> ， <code>URIError</code> 。</p><h4 id="web-api-类型" tabindex="-1"><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#webapi_types" target="_blank" rel="noopener">Web/API 类型</a> <a class="header-anchor" href="#web-api-类型">🔗</a></h4><p><code>AudioData</code> ， <code>Blob</code> ， <code>CryptoKey</code> ， <code>DOMException</code> ， <code>DOMMatrix</code> ， <code>DOMMatrixReadOnly</code> ， <code>DOMPoint</code> ， <code>DomQuad</code> ， <code>DomRect</code> ， <code>File</code> ， <code>FileList</code> ， <code>FileSystemDirectoryHandle</code> ， <code>mFileHandle</code> ， <code>FileSystemHandle</code> ， <code>ImageBitmap</code> ， <code>ImageData</code> ， <code>RTCCertificate</code> ， <code>VideoFrame</code> 。</p><h3 id="浏览器和运行时的支持情况" tabindex="-1">浏览器和运行时的支持情况 <a class="header-anchor" href="#浏览器和运行时的支持情况">🔗</a></h3><p>这一节就是大家最关心的部分了，主流的浏览器，以及 Node 和 Deno ，都支持 <code>structuredClone</code> 。</p><p>不过要留意 Web Workers 中支持情况：</p><p><a data-fancybox="doc-gallery" href="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F1fdbc5b0826240e487a4980dfee69661?format=webp&amp;width=2000" target="_blank" rel="noopener noreferrer"><img src="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F1fdbc5b0826240e487a4980dfee69661?format=webp&amp;width=2000" alt=""></a></p><p>来源：<a href="https://developer.mozilla.org/en-US/docs/Web/API/structuredClone" target="_blank" rel="noopener">MDN</a> 。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论">🔗</a></h2><p>虽然已经过去了很长的时间了，但我们最终有了 <code>structuredClone</code> ，可以在 JavaScript 中轻松地克隆对象。</p><h2 id="关于我" tabindex="-1">关于我 <a class="header-anchor" href="#关于我">🔗</a></h2><p>我是 <a href="https://twitter.com/Steve8708?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor" target="_blank" rel="noopener">Steve</a> ， <a href="https://www.builder.io/" target="_blank" rel="noopener">Builder.io</a> 的 CEO 。</p><p>我们提供了一种拖拽组件的方式，通过这种方式来在你的站点或者 APP 上创建页面和其他 CMS 内容。</p><p>你可以<a href="https://www.builder.io/blog/headless-cms-workflow" target="_blank" rel="noopener">点击此处</a>详细了解如何改进你的工作流。</p><p>你会觉得有趣或者有用的。</p><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>深拷贝的话，我一般都用 <code>JSON.parse(JSON.stringify(obj))</code> ，很多时候对象的结构基本都是字面对象，这种方式基本上符合要求了，而且兼容性好，不用引入外部的包</p><p><code>structuredClone</code> 一直没用过，因为我都不知道有这个 API ，以后可以在代码里用一用了~</p>`,85)])))}};export{S as categories,x as date,q as default,w as key,_ as meta,v as tags,m as title,E as updated,F as wordCount};
