import{createElementBlock as e,openBlock as n,createStaticVNode as t}from"vue";const l={class:"kan-doc"},o="记录一次在 windows 上安装 Rocky Linux",c=["WSL","Rocky","Linux","Windows"],h=["编程"],g="2024-12-02T17:05:53.000Z",k="2024-12-02T17:05:53.000Z",y=1733130353,f=4839,m={__name:"记录一次在-windows-上安装-Rocky-Linux",setup(i,{expose:a}){return a({frontmatter:{title:"记录一次在 windows 上安装 Rocky Linux",tags:["WSL","Rocky","Linux","Windows"],categories:["编程"],date:"2024-12-02T17:05:53.000Z",updated:"2024-12-02T17:05:53.000Z",key:1733130353,wordCount:4839}}),(p,s)=>(n(),e("div",l,s[0]||(s[0]=[t(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>记录一次在 windows 上安装 Rocky Linux 。</p><p>在 Windows 上使用 WSL 的 Linux 确实很不错，不管是学习还是开发，主要是可以和 Windows 的环境隔离开了，不想要了直接把相关的 Linux 删了就行。</p><p>之前重装了几次系统，这次就记录下来，方便以后翻阅。</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><h2 id="rocky-linux" tabindex="-1">Rocky Linux <a class="header-anchor" href="#rocky-linux">🔗</a></h2><p>Centos 8 后，红帽（Red Hat）就不再构建 Red Hat Enterprise Linux 下游的生产版本了， Centos Stream 为 Red Hat Enterprise Linux 的上游版本。 Rocky Linux 可以认为是 Red Hat Enterprise Linux 下游的构建，可以理解为 Centos 8 的延续。</p><h2 id="安装-wsl" tabindex="-1">安装 WSL <a class="header-anchor" href="#安装-wsl">🔗</a></h2><p>本文的环境为 Windows 11 ，Windows 10 应该通用。</p><p>执行以下命令安装 WSL ：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">wsl.exe</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> --install</span></span></code></pre><p>这会安装最新的 WSL 。</p><p>安装成功后，最好<strong>重启</strong>一下电脑。</p><h2 id="安装-rocky-linux" tabindex="-1">安装 Rocky Linux <a class="header-anchor" href="#安装-rocky-linux">🔗</a></h2><p>网上的很多文章都需要通过 Docker 来将 Rocky Linux 的镜像导出为一个 tar 包，其实并不需要，Rocky Linux 本身就构建了相关的资源。</p><p>在最新的 9.5 的<a href="https://dl.rockylinux.org/pub/rocky/9.5/images/x86_64/" target="_blank" rel="noopener">镜像文件夹</a>下，可以看到 <a href="https://dl.rockylinux.org/pub/rocky/9.5/images/x86_64/Rocky-9-Container-Base-9.5-20241118.0.x86_64.tar.xz" target="_blank" rel="noopener">Rocky-9-Container-Base-9.5-20241118.0.x86_64.tar.xz</a> 的文件，这个文件就可以直接使用 WSL 命令导入</p><p>将这个文件下载下来用，使用 <code>wsl --import 系统名字 安装的位置 tar包位置</code> 命令导入到 WSL 中，我的安装脚本如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">wsl</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> --import</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> Rocky9</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> E:</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\w</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">sl</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\R</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">ocky9</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> C:</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\U</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">sers</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\l</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">wf16</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\D</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">ownloads</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\R</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">ocky-9-Container-Base-9.5-20241118.0.x86_64.tar.xz</span></span></code></pre><p>这里系统名称可以随意取，通过 <code>wsl -l</code> 可以查看所有安装的 linux 子系统。</p><p>如果速度太慢，可以使用阿里云的镜像地址：<a href="https://mirrors.aliyun.com/rockylinux/9.5/images/x86_64/?spm=a2c6h.25603864.0.0.709f9612yxImMm" target="_blank" rel="noopener">Index of /rockylinux/9.5/images/x86_64/</a>，相关文件地址为：<a href="https://mirrors.aliyun.com/rockylinux/9.5/images/x86_64/Rocky-9-Container-Base.latest.x86_64.tar.xz" target="_blank" rel="noopener">Rocky-9-Container-Base.latest.x86_64.tar.xz</a></p><h2 id="启动-rocky-linux" tabindex="-1">启动 Rocky Linux <a class="header-anchor" href="#启动-rocky-linux">🔗</a></h2><p>执行 <code>wsl -l</code> ，会出现前面安装的 Rocky9 ，该 Linux 为默认的子系统：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202145141347.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202145141347.avif" alt=""></a></p><p>直接执行 <code>wsl</code> 即可启动（这里由于我启动了 V2rayN ，所以会有代理的提示，不用管）：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202145258101.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202145258101.avif" alt=""></a></p><h2 id="启用-systemd" tabindex="-1">启用 systemd <a class="header-anchor" href="#启用-systemd">🔗</a></h2><p>我们需要在 <code>/etc</code> 下创建一个 <code>wsl.conf</code> 文件，然后写入以下内容：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-toml"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#80A665;--s-light:#59873A;">boot</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">systemd</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">true</span></span></code></pre><p>然后重启该子系统，可以使用 <code>wsl --shutdown</code> 停掉整个 wsl ，或者 <code>wsl -t Rocky9</code> 注销指定的子系统。</p><p>重启之后为了验证是否为 systemd 接管，执行 <code>pstree</code> 命令，效果如下：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202155036023.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202155036023.avif" alt=""></a></p><p>更多 WSL 的可配置项可以在微软的<a href="https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config" target="_blank" rel="noopener">文档</a>中查看。</p><h2 id="替换源" tabindex="-1">替换源 <a class="header-anchor" href="#替换源">🔗</a></h2><p>默认的源可能网速较慢，这里我们可以切换到阿里的源。</p><p>在阿里云 Rocky Linux 的<a href="https://developer.aliyun.com/mirror/rockylinux?spm=a2c6h.13651102.0.0.6bd71b11nsfXe4" target="_blank" rel="noopener">页面</a>下，提供了如下的替换命令，直接复制执行即可。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">sed</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> -e</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">s|^mirrorlist=|#mirrorlist=|g</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> \\</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    -e</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &#39;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&#39;</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> \\</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    -i.bak</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> \\</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">    /etc/yum.repos.d/Rocky-</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">*</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">dnf</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> makecache</span></span></code></pre><p>接着我们可以执行 <code>dnf update</code> 来更新一下系统软件。</p><h2 id="装一些常见的软件" tabindex="-1">装一些常见的软件 <a class="header-anchor" href="#装一些常见的软件">🔗</a></h2><p>由于这个镜像为基础镜像，所以有些命令可能不全，我们需要手动安装。</p><h3 id="ps-命令" tabindex="-1">ps 命令 <a class="header-anchor" href="#ps-命令">🔗</a></h3><p><code>ps</code> 命令由 <code>procps</code> 包提供，直接执行 <code>dnf install procps</code> 安装。</p><h3 id="clear-命令" tabindex="-1">clear 命令 <a class="header-anchor" href="#clear-命令">🔗</a></h3><p><code>clear</code> 命令由 <code>ncurses</code> 包提供，直接执行 <code>dnf install ncurses</code> 安装。当然也可以通过 <code>win + l</code> 快捷键来清除当前窗口的信息。</p><h3 id="ip-命令" tabindex="-1">ip 命令 <a class="header-anchor" href="#ip-命令">🔗</a></h3><p><code>ip</code> 命令由 <code>iproute</code> 包提供，直接执行 <code>dnf install iproute</code> 安装。</p><h3 id="vim-命令" tabindex="-1">vim 命令 <a class="header-anchor" href="#vim-命令">🔗</a></h3><p>镜像默认有 vi 命令，不过没有高亮，可以装一个 vim ，执行 <code>dnf install vim</code> 安装。</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202151025657.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202151025657.avif" alt=""></a></p><h3 id="docker" tabindex="-1">docker <a class="header-anchor" href="#docker">🔗</a></h3><p>docker 的官网给了我们相关的<a href="https://docs.docker.com/engine/install/rhel/" target="_blank" rel="noopener">教程</a>，依次执行以下命令即可：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">dnf</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> -y</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> install</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> dnf-plugins-core</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">dnf</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> config-manager</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> --add-repo</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> https://download.docker.com/linux/rhel/docker-ce.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">dnf</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> install</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> docker-ce</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> docker-ce-cli</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> containerd.io</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> docker-buildx-plugin</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> docker-compose-plugin</span></span></code></pre><p>装完之后执行 <code>systemctl start docker</code> 启动 docker 。</p><h4 id="拉取镜像" tabindex="-1">拉取镜像 <a class="header-anchor" href="#拉取镜像">🔗</a></h4><p>国内 Docker Hub 基本无法访问，所以我们需要通过代理来连接 Docker Hub 。在 systemd 的管理下，我们需要在 <code>/etc/systemd/system/docker.service.d</code> 文件夹下创建一个 <code>http-proxy.conf</code> 文件，然后写入：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-toml"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#80A665;--s-light:#59873A;">Service</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"># 这里要写你的代理对应的 ip 值</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">Environment</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">HTTP_PROXY=socks5://172.21.128.1:10808</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"># 这里要写你的代理对应的 ip 值</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">Environment</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">HTTPS_PROXY=socks5://172.21.128.1:10808</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span></code></pre><p>接着我们重启 systemd 和 docker ，执行：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">systemctl</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> daemon-reload</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">systemctl</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> restart</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> docker</span></span></code></pre><p>接着就可以随便拉取一个镜像试试看了，比如拉取 mysql ，执行以下命令</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">docker</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> pull</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> mysql:9</span></span></code></pre><p>为了确认是否加载了相关的配置文件，我们可以执行 <code>systemctl status docker</code> 来查看：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202163356397.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202163356397.avif" alt=""></a></p><p>可以看到 Drop-In 一栏显示了我们新增的配置文件</p><h2 id="主机子系统互-ping" tabindex="-1">主机子系统互 ping <a class="header-anchor" href="#主机子系统互-ping">🔗</a></h2><p>默认情况下，子系统可以 ping 通主机，但是主机无法 ping 通子系统。</p><p>为了查看子系统的 ip ，我们执行 <code>ip addr</code> 命令：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202163652941.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202163652941.avif" alt=""></a></p><p>可以看到这里 eth0 为默认 NAT 情况下的网卡，默认情况下 windows 会建立一个 NAT 网络来连接子系统，在 windows 上执行 <code>ipconfig</code> 可以看到对应的网卡：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202163916931.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202163916931.avif" alt=""></a></p><p>这里我们要把这个网卡加到防火墙中，在管理员权限下执行：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">New-NetFirewallRule</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> -DisplayName</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">WSL</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> -Direction</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> Inbound</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> -InterfaceAlias</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">vEthernet (WSL (Hyper-V firewall))</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> -Action</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> Allow</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> </span></span></code></pre><p>此时就可以互 ping 了。</p><p>{% swiper %} {% swiperImageItem <a href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202164725087.avif" target="_blank" rel="noopener">https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202164725087.avif</a> %} {% swiperImageItem <a href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202164752703.avif" target="_blank" rel="noopener">https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/12/02/20241202164752703.avif</a> %} {% endswiper %}</p>`,72)])))}};export{h as categories,g as date,m as default,y as key,c as tags,o as title,k as updated,f as wordCount};
