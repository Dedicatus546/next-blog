import{k as t,a as e,o as n,l as p}from"./app-I7hi7fN_.js";const l={class:"kan-doc"},g="ECMAScript2016（es7）新特性",k=1597720282,o="2020-08-18T11:11:22.000Z",y="2024-12-26T15:57:35.000Z",A=["JavaScript"],f=["笔记"],D=894,C=[{property:"og:title",content:"ECMAScript2016（es7）新特性"},{name:"twitter:title",content:"ECMAScript2016（es7）新特性"}],B={__name:"ECMAScript2016（es7）新特性",setup(i,{expose:a}){return a({frontmatter:{title:"ECMAScript2016（es7）新特性",key:1597720282,date:"2020-08-18T11:11:22.000Z",updated:"2024-12-26T15:57:35.000Z",tags:["JavaScript"],categories:["笔记"],wordCount:894,meta:[{property:"og:title",content:"ECMAScript2016（es7）新特性"},{name:"twitter:title",content:"ECMAScript2016（es7）新特性"}]}}),t({title:"ECMAScript2016（es7）新特性",meta:[{property:"og:title",content:"ECMAScript2016（es7）新特性"},{name:"twitter:title",content:"ECMAScript2016（es7）新特性"}]}),(c,s)=>(n(),e("div",l,s[0]||(s[0]=[p(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>ECMAScript2016（es7）新特性。</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><h2 id="指数运算符" tabindex="-1">** 指数运算符 <a class="header-anchor" href="#指数运算符">🔗</a></h2><p>之前如果想要计算某个数的某次幂时，会使用到<code>Math.pow</code>函数来进行计算。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> r</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Math</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">pow</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 10</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 计算2的10次幂</span></span></code></pre><p>而现在，只需要使用<code>**</code>运输符即可直接运算。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">var</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> r</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> **</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 10</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 计算2的10次幂</span></span></code></pre><h2 id="数组includes方法" tabindex="-1">数组<code>includes</code>方法 <a class="header-anchor" href="#数组includes方法">🔗</a></h2><p>之前如果想要寻找数组是否存在某一个元素的时候，使用<code>indexOf</code>来查找索引从而来判断。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> array</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 3</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">array</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">indexOf</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">2</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">   // 返回1，表示在索引1的位置</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">array</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">indexOf</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">   // 返回-1  表示没找到索引</span></span></code></pre><p>某些时候我们只关心数组是否存在元素而已，而不关心它到底在哪个位置。</p><p>之前用判断是否等于<code>-1</code>来实现这个效果。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">array</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">indexOf</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> !==</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">){</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 数组存在被查找的元素</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>而现在可以使用<code>includes</code>来完成这一代码。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">array</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">includes</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">)){</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 存在被查找的元素</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>整体下来更加的简洁，也不会出现<code>-1</code>这种魔法值。</p><p>比如以后如果规范抽风了，把<code>indexOf</code>没找到值的情况下返回数组的<code>length</code>的话，那么原来的代码就会出现运行的逻辑错误。</p><p>并且需要注意的是，<code>indexOf</code>不支持对<code>NaN</code>的查找，而<code>includes</code>支持。</p><p><img src="https://i.loli.net/2020/08/18/fgyVT8uWMPLIxb4.png" alt=""></p><p><code>indexOf</code>返回了<code>-1</code>，而<code>includes</code>返回了<code>true</code>。</p>`,21)])))}};export{f as categories,o as date,B as default,k as key,C as meta,A as tags,g as title,y as updated,D as wordCount};
