import{createElementBlock as n,openBlock as e,createStaticVNode as t}from"vue";import{c as p}from"./app-BzoAWw-A.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const i={class:"kan-doc"},w="git SSH 连接使用代理",A=["git","ssh","proxy"],D=["编程"],C="2024-11-26T21:19:41.000Z",N="2024-11-28T15:07:45.000Z",_=1732777665,B=5934,E=[{property:"og:title",content:"git SSH 连接使用代理"},{name:"twitter:title",content:"git SSH 连接使用代理"}],H={__name:"git-SSH-连接使用代理",setup(l,{expose:a}){return a({frontmatter:{title:"git SSH 连接使用代理",tags:["git","ssh","proxy"],categories:["编程"],date:"2024-11-26T21:19:41.000Z",updated:"2024-11-28T15:07:45.000Z",key:1732777665,wordCount:5934,meta:[{property:"og:title",content:"git SSH 连接使用代理"},{name:"twitter:title",content:"git SSH 连接使用代理"}]}}),p({title:"git SSH 连接使用代理",meta:[{property:"og:title",content:"git SSH 连接使用代理"},{name:"twitter:title",content:"git SSH 连接使用代理"}]}),(r,s)=>(e(),n("div",i,s[0]||(s[0]=[t(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>git SSH 连接使用代理。</p><p>众所周知， github 在国内属于时能访问，时而gg 。</p><p>在 git 官方的配置中，已经支持对 http 和 https 的代理了，这里我们以 V2rayN 为例， V2rayN 默认的 http 代理为 <code>http://localhost:10809</code> ，然后执行以下脚本：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">git</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> config</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> --global</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> http.proxy</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> http://localhost:10809</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">git</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> config</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> --global</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> https.proxy</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> http://localhost:10809</span></span></code></pre><p>这样子我们使用 <code>git clone https://github.com/Dedicatus546/jm-desktop.git</code> 时就能走代理。</p><p>但是这样有一个问题，就是如果我们想要使用 git push 时，每次都得提交账号和密码。</p><p>虽然 git 提供了 <code>git config credential.helper store</code> 来避免重复输入账号和密码，但是这会将账号和密码信息<strong>明文</strong>保存到本地文件上，这对账号的安全存在风险。</p><p>所以一般我们是会使用 ssh 的方式来克隆仓库，在本地上生成一个公钥和私钥，然后把公钥设置到 github 上，就可以使用了。</p><p>但是 ssh 的方式并不走上面的代理设置。我们需要在 ssh 侧来设置。</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><h2 id="window-上设置代理" tabindex="-1">window 上设置代理 <a class="header-anchor" href="#window-上设置代理">🔗</a></h2><p>在 window 上，我们需要一个 <code>ncat</code> 命令，来代理 ssh 连接。</p><p>为了能够调用 <code>ncat</code> 命令，我们需要去 nmap 官网下载 window 对应的安装包</p><p><a href="https://nmap.org/download.html#windows" target="_blank" rel="noopener">Download the Free Nmap Security Scanner for Linux/Mac/Windows</a></p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128130549353.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128130549353.avif" alt=""></a></p><p>安装之后我们可以测试一下命令</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">ncat</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> --version</span></span></code></pre><p>效果如下：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128130715127.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128130715127.avif" alt=""></a></p><p>接着我们执行 <code>ncat -h</code> ，看看用法：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-text"><span class="line"><span>Ncat 7.95 ( https://nmap.org/ncat )</span></span>
<span class="line"><span>Usage: ncat [options] [hostname] [port]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Options taking a time assume seconds. Append &#39;ms&#39; for milliseconds,</span></span>
<span class="line"><span>&#39;s&#39; for seconds, &#39;m&#39; for minutes, or &#39;h&#39; for hours (e.g. 500ms).</span></span>
<span class="line"><span>  -4                         Use IPv4 only</span></span>
<span class="line"><span>  -6                         Use IPv6 only</span></span>
<span class="line"><span>  -C, --crlf                 Use CRLF for EOL sequence</span></span>
<span class="line"><span>  -c, --sh-exec &lt;command&gt;    Executes the given command via /bin/sh</span></span>
<span class="line"><span>  -e, --exec &lt;command&gt;       Executes the given command</span></span>
<span class="line"><span>      --lua-exec &lt;filename&gt;  Executes the given Lua script</span></span>
<span class="line"><span>  -g hop1[,hop2,...]         Loose source routing hop points (8 max)</span></span>
<span class="line"><span>  -G &lt;n&gt;                     Loose source routing hop pointer (4, 8, 12, ...)</span></span>
<span class="line"><span>  -m, --max-conns &lt;n&gt;        Maximum &lt;n&gt; simultaneous connections</span></span>
<span class="line"><span>  -h, --help                 Display this help screen</span></span>
<span class="line"><span>  -d, --delay &lt;time&gt;         Wait between read/writes</span></span>
<span class="line"><span>  -o, --output &lt;filename&gt;    Dump session data to a file</span></span>
<span class="line"><span>  -x, --hex-dump &lt;filename&gt;  Dump session data as hex to a file</span></span>
<span class="line"><span>  -i, --idle-timeout &lt;time&gt;  Idle read/write timeout</span></span>
<span class="line"><span>  -p, --source-port port     Specify source port to use</span></span>
<span class="line"><span>  -s, --source addr          Specify source address to use (doesn&#39;t affect -l)</span></span>
<span class="line"><span>  -l, --listen               Bind and listen for incoming connections</span></span>
<span class="line"><span>  -k, --keep-open            Accept multiple connections in listen mode</span></span>
<span class="line"><span>  -n, --nodns                Do not resolve hostnames via DNS</span></span>
<span class="line"><span>  -t, --telnet               Answer Telnet negotiations</span></span>
<span class="line"><span>  -u, --udp                  Use UDP instead of default TCP</span></span>
<span class="line"><span>      --sctp                 Use SCTP instead of default TCP</span></span>
<span class="line"><span>  -v, --verbose              Set verbosity level (can be used several times)</span></span>
<span class="line"><span>  -w, --wait &lt;time&gt;          Connect timeout</span></span>
<span class="line"><span>  -z                         Zero-I/O mode, report connection status only</span></span>
<span class="line"><span>      --append-output        Append rather than clobber specified output files</span></span>
<span class="line"><span>      --send-only            Only send data, ignoring received; quit on EOF</span></span>
<span class="line"><span>      --recv-only            Only receive data, never send anything</span></span>
<span class="line"><span>      --no-shutdown          Continue half-duplex when receiving EOF on stdin</span></span>
<span class="line"><span>      --allow                Allow only given hosts to connect to Ncat</span></span>
<span class="line"><span>      --allowfile            A file of hosts allowed to connect to Ncat</span></span>
<span class="line"><span>      --deny                 Deny given hosts from connecting to Ncat</span></span>
<span class="line"><span>      --denyfile             A file of hosts denied from connecting to Ncat</span></span>
<span class="line"><span>      --broker               Enable Ncat&#39;s connection brokering mode</span></span>
<span class="line"><span>      --chat                 Start a simple Ncat chat server</span></span>
<span class="line"><span>      --proxy &lt;addr[:port]&gt;  Specify address of host to proxy through</span></span>
<span class="line"><span>      --proxy-type &lt;type&gt;    Specify proxy type (&quot;http&quot;, &quot;socks4&quot;, &quot;socks5&quot;)</span></span>
<span class="line"><span>      --proxy-auth &lt;auth&gt;    Authenticate with HTTP or SOCKS proxy server</span></span>
<span class="line"><span>      --proxy-dns &lt;type&gt;     Specify where to resolve proxy destination</span></span>
<span class="line"><span>      --ssl                  Connect or listen with SSL</span></span>
<span class="line"><span>      --ssl-cert             Specify SSL certificate file (PEM) for listening</span></span>
<span class="line"><span>      --ssl-key              Specify SSL private key (PEM) for listening</span></span>
<span class="line"><span>      --ssl-verify           Verify trust and domain name of certificates</span></span>
<span class="line"><span>      --ssl-trustfile        PEM file containing trusted SSL certificates</span></span>
<span class="line"><span>      --ssl-ciphers          Cipherlist containing SSL ciphers to use</span></span>
<span class="line"><span>      --ssl-servername       Request distinct server name (SNI)</span></span>
<span class="line"><span>      --ssl-alpn             ALPN protocol list to use</span></span>
<span class="line"><span>      --version              Display Ncat&#39;s version information and exit</span></span></code></pre><p>这里面重要的就是 <code>ncat [options] [hostname] [port]</code> 。</p><p>其中 <code>[options]</code> 配置中，我们只要知道 <code>--proxy &lt;addr[:port]&gt;</code> 和 <code>--proxy-type &lt;type&gt;</code> 即可，即命令类似：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-bash"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"># 这里以 V2rayN 的默认 socks 地址为例</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">ncat</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> --proxy</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> localhost:10808</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> --proxy-type</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> socks5</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> hostname</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> port</span></span></code></pre><p>接着我们在 <code>.ssh</code> 文件夹下创建一个 <code>config</code> 文件，写入以下内容：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-text"><span class="line"><span>Host github.com</span></span>
<span class="line"><span>  ProxyCommand ncat --proxy-type socks5 --proxy 127.0.0.1:10808 %h %p</span></span></code></pre><p>这个 <code>ProxyCommand</code> 的配置可以在 <a href="https://man.openbsd.org/ssh_config.5#ProxyCommand" target="_blank" rel="noopener">ProxyCommand - ssh_config</a> 查阅。</p><p>这里这个 <code>%h</code> 和 <code>%p</code> 就是该命令提供的 <a href="https://man.openbsd.org/ssh_config.5#TOKENS" target="_blank" rel="noopener">TOKEN</a> ，刚好对应 <code>ncat</code> 命令的后两个参数。</p><p>然后打开控制台，执行 <code>ssh -vT git@github.com</code> 之后，可以看到：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128143111932.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128143111932.avif" alt=""></a></p><p>如果全部没问题，最后会输出一句：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-text"><span class="line"><span>Hi Dedicatus546(这里是你的密钥对应的用户)! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span></span></code></pre><p>现在就可以愉快地克隆项目了，速度超快，超爽。</p><p>不过需要注意，要确保 V2rayN 启动，不然代理地址不存在的话 ssh 连接会失败：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128143427326.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128143427326.avif" alt=""></a></p><h2 id="linux-上设置代理" tabindex="-1">linux 上设置代理 <a class="header-anchor" href="#linux-上设置代理">🔗</a></h2><p>linux 上和 window 上其实差不多，可以下载 ncat 的 linux 版本的 rpm 包：</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128144920381.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/11/28/20241128144920381.avif" alt=""></a></p><p>接着同样在 <code>config</code> 文件中配置即可。</p><p>linux 下可能存在不同种类的代理命令（比如 nc 命令），只需要根据对应的命令修改 <code>ProxyCommand</code> 即可。</p>`,41)])))}};export{D as categories,C as date,H as default,_ as key,E as meta,A as tags,w as title,N as updated,B as wordCount};
