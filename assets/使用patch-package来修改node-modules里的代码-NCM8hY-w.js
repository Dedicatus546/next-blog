import{createElementBlock as s,openBlock as t,createStaticVNode as p}from"vue";import{c as n}from"./app-BzoAWw-A.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const l={class:"kan-doc"},v="使用 patch-package 来修改 node_modules 里的代码",x=["patch-package","node_modules"],B=["编程"],j=1720663516,C="2024-07-11T10:05:16.000Z",w="2024-07-11T10:05:16.000Z",q=1813,T=[{property:"og:title",content:"使用 patch-package 来修改 node_modules 里的代码"},{name:"twitter:title",content:"使用 patch-package 来修改 node_modules 里的代码"}],Z={__name:"使用patch-package来修改node-modules里的代码",setup(d,{expose:e}){return e({frontmatter:{title:"使用 patch-package 来修改 node_modules 里的代码",tags:["patch-package","node_modules"],categories:["编程"],key:1720663516,date:"2024-07-11T10:05:16.000Z",updated:"2024-07-11T10:05:16.000Z",wordCount:1813,meta:[{property:"og:title",content:"使用 patch-package 来修改 node_modules 里的代码"},{name:"twitter:title",content:"使用 patch-package 来修改 node_modules 里的代码"}]}}),n({title:"使用 patch-package 来修改 node_modules 里的代码",meta:[{property:"og:title",content:"使用 patch-package 来修改 node_modules 里的代码"},{name:"twitter:title",content:"使用 patch-package 来修改 node_modules 里的代码"}]}),(c,a)=>(t(),s("div",l,a[0]||(a[0]=[p(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>使用 patch-package 来修改 node_modules 文件夹里的代码。</p><p>搬砖的过程中，如果我们需要修改某些库的一些行为，一般的情况下我们会通过包装（代理）来实现。</p><p>但这么做能修改的范围就比较小了，一般都是在库的逻辑执行后，或者在执行前写一些代码。</p><p>而想要修改执行过程就显得捉襟见肘了。</p><p>而默认下我们又不能直接去修改 node_modules 的代码，因为 node_modules 一般不会包含在 git 仓库中，在多人协同时无法很好地同步对 node_modules 的修改。</p><p>而 patch-package 这个库，则让修改源码成为了可能。</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>前面我们说过，我们无法修改 node_modules 代码的原因是它一般不被包含到 git 仓库中。</p><p>一般 node_modules 都是由工友拉下仓库然后通过 <code>npm i</code> 来生成的。</p><p>而 patch-package 的做法是，为修改的 node_modules 文件生成一个 patch 文件，来描述修改的内容，这个文件不在 node_modules 内，会被包含到 git 仓库中，在工友拉下代码后，执行某些操作来将这个 patch 应用到 node_modules 中，从而实现对 node_modules 的修改。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装">🔗</a></h2><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-shell"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">pnpm</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> add</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> patch-package</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> -D</span></span></code></pre><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用">🔗</a></h2><ul><li>修改 node_modules 中某个包的内容。</li><li>执行 <code>npx patch-package [修改的包名]</code> ，这时会在根目录的 patch 目录下生成一个对应包的 patch 文件。</li><li>将这个文件提交到 git 仓库中。</li></ul><p>当另一个工友拉取代码后，只需要在安装好依赖后，执行：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-shell"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">npx</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> patch-package</span></span></code></pre><p>即可将所有的 patch 文件应用到 node_modules 内。</p><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子">🔗</a></h2><p>这里我们用 view-design 的 <code>DatePicker</code> 组件作例子。</p><p>在默认的源代码中， <code>DatePicker</code> 支持使用默认的插槽来替换日期的显示。</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/07/11/20240711062439973.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/07/11/20240711062439973.avif" alt=""></a></p><p>但是我们却无法简单的复用内部计算好的值，比如 <code>visualValue</code> 和 <code>itemDisabled</code> 等，因为它并没有把这些变量通过插槽抛出。</p><p>所以这里我们可以稍微改动下代码，这里我们注入 <code>visualValue</code> 。</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/07/11/20240711063313447.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/07/11/20240711063313447.avif" alt=""></a></p><p>然后我们执行 <code>patch-package view-design</code> ，会发现生成了一个 patch 文件夹和一个 patch 文件</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/07/11/20240711063424839.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/07/11/20240711063424839.avif" alt=""></a></p><p>而这个 patch 文件，其实就是通过 <code>git-diff</code> 将两者的差距保存下来了</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/07/11/20240711063459960.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2024/07/11/20240711063459960.avif" alt=""></a></p><p>最后，我们可以把改动去掉，然后执行 <code>patch-package</code> ，会发现改动会重新生效。</p><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>对于 CI 的话，需要在 <code>package.json</code> 中将 <code>postinstall</code> 设置为 <code>patch-package</code> ，这样当 <code>npm i</code> 执行后，就会自动执行这段逻辑了。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// package.json</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">scripts</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // ...</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">postinstall</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">patch-package</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre>`,33)])))}};export{B as categories,C as date,Z as default,j as key,T as meta,x as tags,v as title,w as updated,q as wordCount};
