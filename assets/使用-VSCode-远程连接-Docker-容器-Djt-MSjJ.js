import{k as o,a as t,o as a,l as d}from"./app-I7hi7fN_.js";const c={class:"kan-doc"},h="使用 VSCode 远程连接 Docker 容器",g=1658140360,k="2022-07-18T18:32:40.000Z",m="2023-02-13T18:28:44.000Z",y=["Docker","VSCode"],D=["编程"],S=3875,f=[{property:"og:title",content:"使用 VSCode 远程连接 Docker 容器"},{name:"twitter:title",content:"使用 VSCode 远程连接 Docker 容器"}],u={__name:"使用-VSCode-远程连接-Docker-容器",setup(p,{expose:s}){return s({frontmatter:{title:"使用 VSCode 远程连接 Docker 容器",key:1658140360,date:"2022-07-18T18:32:40.000Z",updated:"2023-02-13T18:28:44.000Z",tags:["Docker","VSCode"],categories:["编程"],wordCount:3875,meta:[{property:"og:title",content:"使用 VSCode 远程连接 Docker 容器"},{name:"twitter:title",content:"使用 VSCode 远程连接 Docker 容器"}]}}),o({title:"使用 VSCode 远程连接 Docker 容器",meta:[{property:"og:title",content:"使用 VSCode 远程连接 Docker 容器"},{name:"twitter:title",content:"使用 VSCode 远程连接 Docker 容器"}]}),(l,e)=>(a(),t("div",c,e[0]||(e[0]=[d(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>使用 <code>VSCode</code> 远程连接 <code>Docker</code> 容器</p><p><code>Docker</code> 之前也有听过，但是工作中一直没有场景需要用到，加上我懒，也就没有去学了</p><p>这次需求刚好需要我去跑公司的容器来作为开发环境，所以就趁这次机会来使用 <code>Docker</code></p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p><code>Docker</code> 我个人的理解，最大的优势是把执行的环境一起打包了，这在 <code>Docker</code> 中称之为镜像</p><p>在 <code>Docker</code> 还没出现之前，部署的时候我们要通过 <code>SSH</code> 登录到远程的部署环境，然后修改远程的环境配置</p><p>而远程主机的环境可能还部署了其他的应用，不同应用之前可能就会存在冲突</p><p>而 <code>Docker</code> 通过虚拟化出一个子系统来和主机进行隔离，这样在子系统里面的操作不会影响到主机的环境，类似于沙箱</p><p>这样子交付软件的时候就可以交付一个完整的“系统”，然后通过 <code>Docker</code> 直接启动即可，非常方便</p><p>在 <code>windows</code> 上，我们需要安装 <code>Docker Desktop</code> 来管理 <code>Docker</code> 容器</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232253227.avif" alt=""></p><p>当然，本文主要是将如何通过 <code>VSCode</code> 来连接容器</p><p>我们可以通过两种方式</p><ul><li>通过 <code>Remote SSH</code> 扩展连接（ <code>SSH</code> 方式）</li><li>通过 <code>Remote Container</code> 扩展直接连接</li></ul><p>在这之前，我们需要安装两个插件</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232259826.avif" alt=""></p><p>当然，如果你的 <code>windows</code> 上有 <code>linux</code> 子系统，那么还可以安装 <code>Remote-WSL</code> 那个插件，也可以直接连接到 <code>WSL</code> 子系统</p><p>如果 <code>windows</code> 上有 <code>WSL</code> 子系统，那么 <code>Docker</code> 会基于 <code>WSL</code> 来虚拟化容器（应该是这样）</p><p>在设置中可以看到对应的提示</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232307452.avif" alt=""></p><h2 id="remote-ssh-方式" tabindex="-1"><code>Remote SSH</code> 方式 <a class="header-anchor" href="#remote-ssh-方式">🔗</a></h2><p>在安装完 <code>Remote SSH</code> 之后，左侧会有一个小电视的图片，点击然后我们切换到 <code>SSH Targets</code></p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232309045.avif" alt=""></p><p>点击 <code>+</code> 号，就会弹出一个框让你新建一个 <code>SSH</code> 连接，当然，我们一般是以 <code>root</code> 连接</p><p>所以我们填入 <code>ssh root@localhost -p 8083</code> ，<code>-p</code> 的意思是指定端口</p><p>点击之后会选择保存到哪个配置文件，这里我们选择第一个即可</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232318565.avif" alt=""></p><p>点击之后就会提示保存成功，左侧也会出现我们的新建的连接</p><p>这里我们使用了 <code>8083</code> 作为连接端口，我们需要通过 <code>Docker</code> 映射到容器内的 <code>22</code> 端口（ <code>SSH</code> 的默认端口）</p><p>那你可能会问了，我启动容器的时候忘记映射了怎么办</p><p>没关系，这里有两个办法</p><ul><li>把当前的容器保存为镜像，然后通过这个镜像启动，附加上端口映射的参数</li><li>通过修改容器的配置参数来新增端口映射</li></ul><p>这里我们主要讲第二种</p><p>在 <code>linux</code> 下，我们可以很容易在网上找到容器对应的配置文件夹，在 <code>/var/lib/docker</code> 下</p><p>而在 <code>windows</code> 下，我发现网上并没有帖子指出容器的存放位置，最后还是在其他的 <code>Docker</code> 帖子下面找到的</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/24/202207241215647.avif" alt=""></p><p>要怎么确定你的容器是哪一个文件夹呢</p><p>可以打开 <code>Docker Desktop</code> 上看容器的 <code>Name</code> 字段</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/24/202207241234766.avif" alt=""></p><p>进入文件夹之后我们可以看到 <code>hostconfig.json</code> 文件，打开它</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/24/202207241239996.avif" alt=""></p><p>有个 <code>PortBindings</code> 字段，这个字段保存了端口映射的信息</p><p>我们需要把容器的 <code>22</code> 端口映射到外部的 <code>8083</code> 端口，所以我们要添加下面这一行</p><p>因为 <code>SSH</code> 走的 <code>TCP</code> 协议，所以我们需要指定 <code>22</code> 端口为 <code>TCP</code> 类型</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">PortBindings</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">22/tcp</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">        &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">HostIp</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">        &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">HostPort</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">8083</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    ]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p><strong>重要：在修改这个文件之前要完全退出 <code>Docker Desktop</code> ，不然修改会失效！！！</strong></p><p><strong>重要：在修改这个文件之前要完全退出 <code>Docker Desktop</code> ，不然修改会失效！！！</strong></p><p><strong>重要：在修改这个文件之前要完全退出 <code>Docker Desktop</code> ，不然修改会失效！！！</strong></p><p>完成之后我们就可以重新启动容器了，接下来我们进入容器内</p><p>我们要确保容器内运行了 <code>ssh-server</code> 服务，通常情况下，<code>linux</code> 只安装了 <code>ssh-client</code> ，也就是支持本机去连接其他的机器，但是不支持其他的机器连接到本机</p><p>我们需要执行 <code>apt install openssh-server</code> 来安装</p><p>安装完成之后确保服务已经开启，可以使用 <code>/etc/init.d/ssh status</code> 来查看有没有启动</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/24/202207241256792.avif" alt=""></p><p>启动我们使用 <code>/etc/init.d/ssh start</code> 即可</p><p>启动的时候我们可能会遇到 <code>sshd: no hostkeys available -- exiting</code> 的错误，我们只需要执行 <code>ssh-keygen -A</code> 生成一个 <code>SSH</code> 的密钥，之后便可以成功启动</p><p>然后我们需要修改 <code>SSH</code> 的配置文件，用 vi 打开 /etc/ssh/ssh_config 文件，加上 <code>PermitRootLogin yes</code> 意思是运行 <code>root</code> 登录，加上 <code>PasswordAuthentication yes</code> 意识是允许通过密码验证</p><p>修改完成保存之后，我们重启 <code>SSH</code> ，命令为 <code>/etc/init.d/ssh restart</code></p><p>然后我们要给 <code>root</code> 设置一个密码，通过 <code>passwd</code> 指令</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/24/202207241310137.avif" alt=""></p><p>然后我们就可以通过 <code>VSCode</code> 来连接容器了，点击我们之前保存的 <code>SSH</code> 连接，右侧有个连接图标</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/24/202207241311221.avif" alt=""></p><h2 id="remote-container-方式" tabindex="-1"><code>Remote Container</code> 方式 <a class="header-anchor" href="#remote-container-方式">🔗</a></h2><p>这个就相当简单了，我们在小电视 <code>tab</code> 上切换到 <code>Containers</code> ，<code>VSCode</code> 就会列出当前的容器列表</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/24/202207241313981.avif" alt=""></p><p>然后我们只需要右键容器，选择 <code>attach in new window</code> 即可打开容器</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/24/202207241314925.avif" alt=""></p><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>这两种第二种是比较简单的，但是这是 <code>Docker</code> 运行在本机上才能这么搞</p><p>如果容器泡在远程主机上，那么就只能老老实实通过 <code>SSH</code> 来连接了</p>`,70)])))}};export{D as categories,k as date,u as default,g as key,f as meta,y as tags,h as title,m as updated,S as wordCount};
