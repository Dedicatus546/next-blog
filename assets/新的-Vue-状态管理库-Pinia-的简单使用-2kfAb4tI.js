import{createElementBlock as t,openBlock as n,createStaticVNode as e}from"vue";import{c as p}from"./app-C7bQa6bS.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const l={class:"kan-doc"},x="新的 Vue 状态管理库 Pinia 的简单使用",C=1636511066,v="2021-11-10T10:24:26.000Z",E="2023-02-13T18:28:45.000Z",F=["JavaScript","Vue","Pinia"],V=["编程"],q=4253,P=[{property:"og:title",content:"新的 Vue 状态管理库 Pinia 的简单使用"},{name:"twitter:title",content:"新的 Vue 状态管理库 Pinia 的简单使用"}],S={__name:"新的-Vue-状态管理库-Pinia-的简单使用",setup(i,{expose:a}){return a({frontmatter:{title:"新的 Vue 状态管理库 Pinia 的简单使用",key:1636511066,date:"2021-11-10T10:24:26.000Z",updated:"2023-02-13T18:28:45.000Z",tags:["JavaScript","Vue","Pinia"],categories:["编程"],wordCount:4253,meta:[{property:"og:title",content:"新的 Vue 状态管理库 Pinia 的简单使用"},{name:"twitter:title",content:"新的 Vue 状态管理库 Pinia 的简单使用"}]}}),p({title:"新的 Vue 状态管理库 Pinia 的简单使用",meta:[{property:"og:title",content:"新的 Vue 状态管理库 Pinia 的简单使用"},{name:"twitter:title",content:"新的 Vue 状态管理库 Pinia 的简单使用"}]}),(o,s)=>(n(),t("div",l,s[0]||(s[0]=[e(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>最近逛掘金发现了新的 <code>Vue</code> 的状态管理库，挺有意思</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>目前 <code>Vue</code> 官方的状态管理库为 <code>Vuex</code> ， 相关版本为 <code>4.0.2</code> ，适用于 <code>Vue3</code></p><p><code>Vuex4</code> 和 <code>Vuex3</code> 其实写法上都差不多</p><p>更多的感觉是兼容上的处理</p><p>从 <code>new Store</code> 的方式改为了 <code>createStore</code></p><p>增加了一个 composition api <code>useStore</code></p><p>其他写法几乎不变</p><p>目前已经有关于 <code>Vuex5</code> 的相关提案</p><p><a href="https://github.com/kiaking/rfcs/blob/vuex-5/active-rfcs/0000-vuex-5.md" target="_blank" rel="noopener">0000-vuex-5.md</a></p><p><a href="https://github.com/vuejs/rfcs/discussions/270" target="_blank" rel="noopener">Discussion Thread</a></p><p><code>Pinia</code> 基本上按这个提案进行实现</p><p>作者为 <code>vuejs</code> 的核心成员，感觉 <code>Pinia</code> 最终会收归 <code>vue</code> 下</p><p><code>Pinia</code> 的官网</p><p><a href="https://pinia.esm.dev" target="_blank" rel="noopener">🍍 Pinia - Intuitive, type safe, light and flexible Store for Vue using the composition api with DevTools support</a></p><h2 id="和-vuex3-和-vuex4-的区别" tabindex="-1">和 <code>Vuex3</code> 和 <code>Vuex4</code> 的区别 <a class="header-anchor" href="#和-vuex3-和-vuex4-的区别">🔗</a></h2><p>在官网 <a href="https://pinia.esm.dev/introduction.html#comparison-with-vuex-3-x-4-x" target="_blank" rel="noopener">Comparison with Vuex 3.x/4.x</a> 中，介绍了 <code>Pinia</code> 和 <code>Vuex3</code> 和 <code>Vuex4</code> 的区别</p><blockquote><ul><li>mutations no longer exist. They were very often perceived as extremely verbose. They initially brought devtools integration but that is no longer an issue.</li><li>No need to create custom complex wrappers to support TypeScript, everything is typed and the API is designed in a way to leverage TS type inference as much as possible.</li><li>No more magic strings to inject, import the functions, call them, enjoy autocompletion!</li><li>No need to dynamically add stores, they are all dynamic by default and you won’t even notice. Note you can still manually use a store to register it whenever you want but because it is automatic you don’t need to worry about it.</li><li>No more nested structuring of modules. You can still nest stores implicitly by importing and using a store inside another but Pinia offers a flat structuring by design while still enabling ways of cross composition among stores. You can even have circular dependencies of stores.</li><li>No namespaced modules. Given the flat architecture of stores, &quot;namespacing&quot; stores is inherent to how they are defined and you could say all stores are namespaced.</li></ul></blockquote><ul><li>不再需要 <code>mutations</code> ，这常常让人觉得非常冗余。 <code>mutations</code> 最初是用来提供 <code>devtools</code> 集成， 但是现在集成已经不需要 <code>mutations</code> 了</li><li>无需自定义复杂的包装类型来支持 <code>TypeScript</code> ，所有东西都是类型化的，并且 <code>API</code> 以一种尽可能地利用 <code>TypeScript</code> 类型推断来设计</li><li>不再注入魔法字符串，现在只需要导入相关函数，调用即可，操作自动完成！</li><li>无需动态地添加 <code>store</code> ， <code>store</code> 默认情况下是动态的，你可能都不会注意到。无论何时你仍然可以手动地注册一个 <code>store</code> ，因为这个过程是自动的，你无需担心。</li><li>模块不再使用嵌套的结构。依然可以隐式地嵌套 <code>store</code> ，可以通过在另一个 <code>store</code> 导入以及使用一个 <code>store</code> ， <code>Pinia</code> 通过设计提供一个扁平的结构，可以在 <code>store</code> 之间使用交叉 composition 的方式。甚至可以在 <code>store</code> 之间存在循环依赖。</li><li>没有命名模块。由于提供了扁平的 <code>store</code> 结构，命名 <code>store</code> 就是固有的特性，可以说，所有的 <code>store</code> 都是命名的。</li></ul><h2 id="定义-store" tabindex="-1">定义 <code>store</code> <a class="header-anchor" href="#定义-store">🔗</a></h2><p>在 <code>Pinia</code> 中， 有两种创建 <code>store</code> 的方式</p><p>一种和 <code>Vuex</code> 基本一致</p><p>另一种类似与 composition api</p><p><strong><code>Vuex</code> 方式</strong></p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> defineStore</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">pinia</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> useTestStore</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> defineStore</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">test</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  state</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> ({</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    count</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }),</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  getters</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    double</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">state</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> state</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">count</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  actions</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    increment</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      // 注意这里不要使用箭头函数，不然 this 会失效</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">      this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">count</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">++</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> default</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> useTestStore</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p><strong>composition 方式</strong></p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> defineStore</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">pinia</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> ref</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> computed</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">@vue/reactivity</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> useTestStore</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> defineStore</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">test</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> count</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> ref</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> double</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> computed</span><span style="--s-dark:#666666;--s-light:#999999;">(()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> count</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> increment</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> &gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> count</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">++</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    count</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    double</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    increment</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> default</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> useTestStore</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>我个人而言还是喜欢第二种新的方式的，因为我不是很喜欢 <code>this</code> 这个东西</p><p>我在想既然 <code>getters</code> 使用了 <code>state</code> 作为参数传入，为啥 <code>actions</code> 就不用呢…</p><h2 id="使用-store" tabindex="-1">使用 <code>store</code> <a class="header-anchor" href="#使用-store">🔗</a></h2><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-html"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> setup</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> useTestStore</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./stores/useTestStore</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 这里切记不要进行解构取值，会失去响应式</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> testStore</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> useTestStore</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">script</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">template</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  &lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">{{ testStore.count }}</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  &lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">{{ testStore.double }}</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">div</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  &lt;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">button</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> @click</span><span style="--s-dark:#666666;--s-light:#999999;">=</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">testStore.increment</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">increment</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">button</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">&lt;/</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">template</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span></code></pre><p>记得要把 <code>pinia</code> 安装到 <code>Vue</code> 上</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// main.js</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> createPinia</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">pinia</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> createApp</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">vue</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> App</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./App.vue</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">createApp</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">App</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#80A665;--s-light:#59873A;">use</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#80A665;--s-light:#59873A;">createPinia</span><span style="--s-dark:#666666;--s-light:#999999;">()).</span><span style="--s-dark:#80A665;--s-light:#59873A;">mount</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">#app</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>然后启动项目即可看到如下界面</p><p><a data-fancybox="doc-gallery" href="https://z3.ax1x.com/2021/11/13/Is16bT.png" target="_blank" rel="noopener noreferrer"><img src="https://z3.ax1x.com/2021/11/13/Is16bT.png" alt=""></a></p><p>对按钮进行点击，即可看到视图的变化</p><p><a data-fancybox="doc-gallery" href="https://z3.ax1x.com/2021/11/13/Is1oKx.gif" target="_blank" rel="noopener noreferrer"><img src="https://z3.ax1x.com/2021/11/13/Is1oKx.gif" alt=""></a></p><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p><code>Pinia</code> 的出现，我个人觉得很好的解决了 Vuex 中的命名模块问题</p><p>命名模块意味着我们需要使用字符串魔法值（ <code>commit</code> 操作， <code>dispatch</code> 操作）</p><p>而 <code>Pinia</code> 分散了这些 <code>module</code> ， 使之成为独立的 <code>store</code></p><p>使得代码的整体编写几乎不会出现魔法值，而且这些 <code>store</code> 天生就具有模块性</p><p>在需要用到的地方 <code>import</code> ，然后就直接可以使用</p><p>目前有点不是很爽的就是它兼容 <code>Vue2</code> ，希望能出个纯 <code>Vue3</code> 版本的</p>`,45)])))}};export{V as categories,v as date,S as default,C as key,P as meta,F as tags,x as title,E as updated,q as wordCount};
