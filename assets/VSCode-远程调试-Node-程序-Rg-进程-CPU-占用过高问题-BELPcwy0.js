import{k as d,a as t,o as c,l as a}from"./app-D6bDnq9u.js";const p={class:"kan-doc"},g="VSCode 远程调试 Node 程序 Rg 进程 CPU 占用过高问题",h=1658226718,C="2022-07-19T18:31:58.000Z",m="2023-02-13T18:28:45.000Z",f=["VSCode","Docker","Node"],S=["编程"],u=1469,N=[{property:"og:title",content:"VSCode 远程调试 Node 程序 Rg 进程 CPU 占用过高问题"},{name:"twitter:title",content:"VSCode 远程调试 Node 程序 Rg 进程 CPU 占用过高问题"}],V={__name:"VSCode-远程调试-Node-程序-Rg-进程-CPU-占用过高问题",setup(i,{expose:o}){return o({frontmatter:{title:"VSCode 远程调试 Node 程序 Rg 进程 CPU 占用过高问题",key:1658226718,date:"2022-07-19T18:31:58.000Z",updated:"2023-02-13T18:28:45.000Z",tags:["VSCode","Docker","Node"],categories:["编程"],wordCount:1469,meta:[{property:"og:title",content:"VSCode 远程调试 Node 程序 Rg 进程 CPU 占用过高问题"},{name:"twitter:title",content:"VSCode 远程调试 Node 程序 Rg 进程 CPU 占用过高问题"}]}}),d({title:"VSCode 远程调试 Node 程序 Rg 进程 CPU 占用过高问题",meta:[{property:"og:title",content:"VSCode 远程调试 Node 程序 Rg 进程 CPU 占用过高问题"},{name:"twitter:title",content:"VSCode 远程调试 Node 程序 Rg 进程 CPU 占用过高问题"}]}),(r,e)=>(c(),t("div",p,e[0]||(e[0]=[a('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>记录一次 <code>VSCode</code> 远程调试 <code>Node</code> 程序 <code>Rg</code> 进程 <code>CPU</code> 占用过高问题</p><p>感觉很长时间没写帖子了，一方面不知道要写什么了，一方面工作上开始写 <code>Node</code> 和 <code>Java</code></p><p>刚开始连代码都看的不是很懂，心里憔悴，所幸还是渐渐能看懂代码了，也解决了一些 <code>bug</code> 和开始着手一些后端上的需求</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>在 <code>VSCode</code> 上，对 <code>Node</code> 程序的调试有两种</p><ul><li>一种是启动时就指定以调试模式启动，这种模式为 <code>launch</code></li><li>一种是在启动程序之后把调试程序注入到对应程序中，这种模式为 <code>attach</code></li></ul><p>由于公司的项目不只是 <code>Node</code> ，还有 <code>Java</code> ，比较复杂，所以技术总监那边让我用 <code>attach</code> 方式来调试</p><p>步骤很简单，<code>Ctrl + Shift + p</code> 然后搜索 <code>attach</code> 选择</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232211211.avif" alt=""></p><p>然后就能看到对应的 <code>node</code> 程序</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232212380.avif" alt=""></p><p>调试步骤其实不难，但是问题是当时我调试的时候电脑 <code>CPU</code> 占用一直 <code>100%</code></p><p>而且断点没生效，我就用 <code>top</code> 看了下进程，发现是 <code>VSCode</code> 的 <code>Rg</code> 一直在占用 <code>CPU</code></p><p>我就去百度了一下，很多的文章都是说关掉 <code>setting</code> 里面的 <code>Follow Symlinks</code> ，如下</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232205578.avif" alt=""></p><p>但是没有效果</p><p>最后测试出来是工作区的问题，我选择了 <code>/</code> 作为工作区</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232206976.avif" alt=""></p><p>当调试的时候，<code>VSCode</code> 应该是会监听这些文件来进行某些操作</p><p>而 <code>/</code> 下包含了系统所有文件，导致 <code>Rg</code> 进程就一直占用 <code>100%</code> 了</p><p>结局办法是，限制工作区间的范围，<code>Ctrl + Shift + p</code> ，然后输入 <code>add folder</code></p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232207223.avif" alt=""></p><p>然后限制到项目文件夹即可，这时候我们有两个工作区</p><p>我们把 <code>/</code> 这个工作区删除即可，右键工作区就可以看到相应的选项</p><p><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/07/23/202207232208631.avif" alt=""></p><p>再次调试之后，占用就正常了</p><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>虽然 <code>Rg</code> 不占用 <code>CPU</code> 了，但是看起来我的笔记本性能不是很行了，<code>CPU</code> 很容易占用 <code>70% - 80%</code></p><p>好想买个新的…</p>',30)])))}};export{S as categories,C as date,V as default,h as key,N as meta,f as tags,g as title,m as updated,u as wordCount};
