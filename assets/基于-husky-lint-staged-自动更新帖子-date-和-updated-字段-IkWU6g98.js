import{createElementBlock as t,openBlock as s,createStaticVNode as d}from"vue";import{c as o}from"./app-C7bQa6bS.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const p={class:"kan-doc"},x="基于 husky lint-staged 自动更新帖子 date 和 updated 字段",B=1662217142,A="2022-09-03T22:59:02.000Z",_="2023-02-13T18:28:44.000Z",C=["husky","lint-staged","hexo"],T=["编程"],w=2958,q=[{property:"og:title",content:"基于 husky lint-staged 自动更新帖子 date 和 updated 字段"},{name:"twitter:title",content:"基于 husky lint-staged 自动更新帖子 date 和 updated 字段"}],E={__name:"基于-husky-lint-staged-自动更新帖子-date-和-updated-字段",setup(n,{expose:a}){return a({frontmatter:{title:"基于 husky lint-staged 自动更新帖子 date 和 updated 字段",key:1662217142,date:"2022-09-03T22:59:02.000Z",updated:"2023-02-13T18:28:44.000Z",tags:["husky","lint-staged","hexo"],categories:["编程"],wordCount:2958,meta:[{property:"og:title",content:"基于 husky lint-staged 自动更新帖子 date 和 updated 字段"},{name:"twitter:title",content:"基于 husky lint-staged 自动更新帖子 date 和 updated 字段"}]}}),o({title:"基于 husky lint-staged 自动更新帖子 date 和 updated 字段",meta:[{property:"og:title",content:"基于 husky lint-staged 自动更新帖子 date 和 updated 字段"},{name:"twitter:title",content:"基于 husky lint-staged 自动更新帖子 date 和 updated 字段"}]}),(r,e)=>(s(),t("div",p,e[0]||(e[0]=[d(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>基于 <code>husky</code>, <code>lint-staged</code> 自动更新帖子 <code>date</code> 和 <code>updated</code> 字段</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>前面我们浅析了 <code>lint-staged</code> 的原理，现在，我们就可以利用 <code>lint-staged</code> 来在 <code>commit</code> 前对贴字进行更新了</p><p>这里我们新建一个项目，然后发布到 <code>npm</code> 上</p><p>首先，我们需要生产一个命令行的文件，这样我们就能使用 <code>npx XXXX</code> 来执行这个命令</p><p>我们在项目中建立一个 <code>bin</code> 文件夹，然后新建一个 <code>hexo-update-time.js</code> 文件</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032209328.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032209328.avif" alt=""></a></p><p>之后我们需要在 <code>package.json</code> 文件中声明 <code>bin</code> 的位置，以及把 <code>bin</code> 文件添加到 <code>files</code> 字段中</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032211730.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032211730.avif" alt=""></a></p><p>这样当我们安装之后，会在 <code>node_modules/.bin</code> 下生成一个可执行的文件（这里我是安装到我的博客项目中了）</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032212582.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032212582.avif" alt=""></a></p><p>这里我们使用 <code>src</code> 作为源码的目录，所以也要包含在 <code>files</code> 字段下</p><p>到这里，前置步骤完成，接下来我们需要解决如何解析 <code>node</code> 后面携带的参数</p><p>这里我们使用的是 <code>commander</code> 库，它提供了一个非常方便的方式来解析参数，仓库地址：<a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">tj/commander.js</a></p><p>这里其实是库帮我们解析了 <code>process.argv</code> 这个参数列表，我们可以新建一个文件，内容如下</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">process</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">argv</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>然后使用 <code>node</code> 执行这个文件，附带一些参数</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032224033.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032224033.avif" alt=""></a></p><p>可以发现 <code>process.argv</code> 就包含了 <code>node</code> 路径，执行文件地址，以及附带的参数</p><p>其实这里也可以不用 <code>commander</code> 的，因为实际上并不会用到命令行参数，实际上我们直接附带文件列表即可，如下</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032226511.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032226511.avif" alt=""></a></p><p>但是万一以后要用到参数了再改就麻烦了，所以这里引入 <code>commander</code> ，<code>hexo-update-time.js</code> 内容如下</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> program</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">commander</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">program</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">parse</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">program</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">forEach</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">async</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">filepath</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // TODO 这里处理文件逻辑</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><p>这里由于我们不使用参数，所以要通过 <code>program.args</code> 获取剩余的参数列表</p><p>到这里我们就可以编写核心的逻辑了，当然，核心逻辑和我们之前并没有什么不同</p><p>同样是读取文件，使用正则获取头部信息，替换头部信息的 <code>date</code> 和 <code>update</code> 字段，然后重新写回文件</p><p>这里我们新增逻辑来判断是否为第一次添加或者是否没有被 <code>git</code> 跟踪</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032236465.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032236465.avif" alt=""></a></p><p>因为我们可能不配合 <code>lint-staged</code> 使用，所以需要判断</p><p>其他的逻辑就和之前的一样了</p><p>在写完之后我们需要 <code>publish</code> 到 <code>npm</code> 上，这里注意，如果之前使用了淘宝源，那么要切回 <code>npm</code> 源才能发布</p><p>这里我们需要注册一个 <code>npm</code> 的账号，执行 <code>npm publish</code> 之后会提示你输入账号密码，就可以成功上传了</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032241566.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032241566.avif" alt=""></a></p><p>然后我们在博客项目中安装 <code>husky</code>, <code>lint-staged</code> 以及 <code>hexo-update-time.js</code> 这三个依赖</p><p>执行 <code>npx huksy install</code> 注册钩子</p><p>执行 <code>npx husky add .husky/pre-commit &quot;npm run lint-staged&quot;</code> 添加一个 <code>pre-commit</code> 钩子</p><p>在 <code>package.json</code> 添加 <code>script</code></p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032255770.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032255770.avif" alt=""></a></p><p>在 <code>package.json</code> 配置 <code>lint-staged</code> 配置</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032242130.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/09/03/202209032242130.avif" alt=""></a></p><p>这里我的逻辑是如果你是第一次 <code>add</code> ，那么 <code>commit</code> 时 <code>date</code> 和 <code>updated</code> 会更新到当前同一时刻，否则只有 <code>updated</code> 会添加到同一时刻</p><p>如果文件没有被 <code>git</code> 追踪（单独使用 <code>hexo-update-time</code> 命令），那么 <code>date</code> 和 <code>updated</code> 会更新到当前同一时刻</p><p>仓库地址：<a href="https://github.com/Dedicatus546/hexo-update-time" target="_blank" rel="noopener">Dedicatus546/hexo-update-time</a></p><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>如果你是本地生成静态文件之后提交到 <code>github</code> ，那么你完全没有必要使用这个插件，但是你就要承担仓库丢失的风险</p><p>即使你把 <code>md</code> 的仓库也放到了 <code>github</code> 上，但是重新拉取仓库会影响文件的 <code>modifyTime</code> 信息，导致 <code>updated</code> 字段错误显示</p><p>所以这个小工具只适用于开启了手动更新 <code>updated</code> 字段，解放每一次 <code>commit</code> 前需要手动更新 <code>updated</code> 字段的操作</p>`,48)])))}};export{T as categories,A as date,E as default,B as key,q as meta,C as tags,x as title,_ as updated,w as wordCount};
