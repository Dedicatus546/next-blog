import{k as n,a as p,o as t,l}from"./app-D6bDnq9u.js";const e={class:"kan-doc"},k="TypeScript 5.0（译）",y=["TypeScript","JavaScript"],c=["翻译"],o=1685696755,A="2023-06-02T17:05:55.000Z",D="2023-06-02T17:05:55.000Z",B=33970,u=[{property:"og:title",content:"TypeScript 5.0（译）"},{name:"twitter:title",content:"TypeScript 5.0（译）"}],f={__name:"TypeScript-5-0（译）",setup(i,{expose:a}){return a({frontmatter:{title:"TypeScript 5.0（译）",tags:["TypeScript","JavaScript"],categories:["翻译"],key:1685696755,date:"2023-06-02T17:05:55.000Z",updated:"2023-06-02T17:05:55.000Z",wordCount:33970,meta:[{property:"og:title",content:"TypeScript 5.0（译）"},{name:"twitter:title",content:"TypeScript 5.0（译）"}]}}),n({title:"TypeScript 5.0（译）",meta:[{property:"og:title",content:"TypeScript 5.0（译）"},{name:"twitter:title",content:"TypeScript 5.0（译）"}]}),(g,s)=>(t(),p("div",e,s[0]||(s[0]=[l(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>原文地址：<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/" target="_blank" rel="noopener">Announcing TypeScript 5.0</a></p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>今天我们激动地宣布：Typescript 5.0 正式发布。</p><p>这个版本带来了许多的新特性，同时旨在让 TypeScript 更加轻量、简单，快速。我们实现了新的装饰器标准，添加了一些功能来更好地支持 ESM 模块下的 Node 项目和打包器项目，也为库的作者提供了新的方式来控制泛型推断，增强了 JSDoc 的功能性，简化了配置，同时也改进了许多其他地方。</p><p>如果你还不熟悉 TypeScript 的话，可以简单地理解为， TypeScript 是一门建立在 JavaScript 上的语言，通过添加类型语法来进行类型检查。类型检查可以帮助我们捕获常见的错误，大到逻辑错误，小到拼写错误。带有类型的 JavaScript 能够让我们构建更棒的工具，因为类型可以在你喜欢的编辑器中驱动代码完成，转到定义以及重构功能。实际上，如果你使用像 VS 或者 VS Code 这样的编辑器， TypeScript 早已提供了 JavaScript 体验。你可以阅读关于 TypeScript 的文档 <a href="https://typescriptlang.org" target="_blank" rel="noopener">https://typescriptlang.org</a> 来了解更多。</p><p>但如果你早已熟悉了 TypeScript ，不用担心， 5.0 版本不是一个破坏性的版本，你理解的任何知识仍然适用于 5.0 版本。虽然 TypeScript 5.0 包含了正确性的变更以及废弃了一些不常用的配置，但我们仍然相信许多的开发者能获得和之前版本一样的升级体验。</p><p>为了开始使用 TypeScript ，可以通过 <a href="https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild" target="_blank" rel="noopener">NuGet</a> 获取，或者通过执行如下的 npm 命令</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-cmd"><span class="line"><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">npm </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">install</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> -</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">D</span><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;"> typescript</span></span></code></pre><p>你可以按照<a href="https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-the-workspace-version-of-typescript" target="_blank" rel="noopener">指示</a> 在 VS Code 中使用新版本的 TypeScript 。</p><p>下面是 TypeScript 5.0 的新特性列表</p><ul><li>装饰器</li><li><code>const</code> 类型参数</li><li>tsconfig.json 的 <code>extends</code> 支持多个配置文件</li><li>所有枚举都是联合枚举</li><li><code>--moduleResolution</code> 配置提供 <code>bundler</code> 值</li><li>自定义解析标志</li><li>新增 <code>verbatimModuleSyntax</code> 配置</li><li>支持 <code>export type *</code> 语法</li><li>JSDoc 支持 <code>@satisfies</code></li><li>JSDoc 支持 <code>@overload</code></li><li><code>--build</code> 下传递构建文件的特定标志</li><li>编辑器中忽略大小写的导入顺序</li><li>全面的 <code>switch/case</code> 完成功能</li><li>优化速度，内存，包大小</li><li>破坏性改变以及废弃项</li><li>下个版本计划？</li></ul><h2 id="对比-typescript-5-0-的-beta-版本和-rc-版本有什么新的地方？" tabindex="-1">对比 TypeScript 5.0 的 beta 版本和 RC 版本有什么新的地方？ <a class="header-anchor" href="#对比-typescript-5-0-的-beta-版本和-rc-版本有什么新的地方？">🔗</a></h2><p>自 beta 版本以来，TypeScript 5.0 有几个显著的改变。</p><p>一个新不同点是 TypeScript 允许在 <code>export</code> 或者 <code>export default</code> 前后使用<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#decorators" target="_blank" rel="noopener">装饰器</a>了。这个改变反映了 TC39 （ ECMAScript/JavaScript 的标准组织）内部的讨论和共识。</p><p>另一个不同点是 <code>moduleResolution</code> 配置的 <code>bundler</code> 值，当 <code>module</code> 设置为 <code>esnext</code> 时，这个选项才可以启用。这样做是为了确保输入文件内的 import 导入语句在打包器解析他们之前不被转化为 require 调用，无论打包器或者加载器是否遵循 TypeScript 的 <code>module</code> 配置。我们也在发行说明中提供了一些背景信息，建议大多数作者坚持使用 <code>node16</code> 或者 <code>nodenext</code> 。</p><p>虽然 TypeScript 5.0 Beta 版已经附带了这些功能，但我们并没有对编辑器内忽略大小写的导入顺序的场景进行记录。这部分关于开发体验的制定仍然还在讨论中，但是默认情况下， TypeScript 现在应该可以更好地与您的其他工具配合使用。</p><p>对比 RC 版本，一个最显著地改变是 TypeScript 5.0 在 package.json 内指定 12.20 为最小的 Node.js 版本。我们也发布了一篇关于在 TypeScript 5.0 迁移到 ESM 模块的文章，你可以<a href="https://devblogs.microsoft.com/typescript/typescripts-migration-to-modules/" target="_blank" rel="noopener">点击</a>跳转到该页面。</p><p>自从宣布 TypeScript 5.0 的 Beta 版本和 RC 版本以来，尽管阻力一直存在，我们还是调整了速度基准和包大小增量的具体数字。为了清晰起见，还调整了一些基准的名称，包大小的改进已经移至单独的图表中。</p><h2 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器">🔗</a></h2><p>装饰器是一个即将到来的 ECMAScript 特性，它允许我们以可重用的方式定制类以及它们的成员。</p><p>让我们思考如下代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  greet</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello, my name is </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new </span><span style="--s-dark:#80A665;--s-light:#59873A;">Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Ron</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">greet</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><p><code>greet</code> 方法相当的简单，我们可以想象它的内部存在复杂的逻辑，比如可能存在一些异步的逻辑，可能是存在递归调用，可能有副作用等等。不管你想象的是哪种情况，我们假设你传入了一些 <code>console.log</code> 的语句调用来帮助调试 <code>greet</code> 函数。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  greet</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">LOG: Entering method.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello, my name is </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">LOG: Exiting method.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这个模式相当常见。如果有一种方式可以为每个方法做到这一点，那肯定非常棒。</p><p>这就是需要使用装饰器的地方。我们可以写一个叫 <code>loggedMethod</code> 的函数，它看起来像下面这个样子：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> loggedMethod</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">originalMethod</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> _context</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> replacementMethod</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">[])</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">LOG: Entering method.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">result</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> originalMethod</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">call</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">LOG: Exiting method.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> result</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> replacementMethod</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>所有这些 any 类型是在干什么？这是 anyScript 吗？</p><p>稍安勿躁，现在我们只是保持简单的代码，这样我们就可以专注于函数的功能。注意， <code>loggedMethod</code> 函数接收了原本的函数（ <code>originalMethod</code> ），然后返回了一个新的函数。</p><ul><li>打印一个 Entering 信息。</li><li>执行原本函数，传入 this 和其他所有的参数。</li><li>打印一个 Exiting 信息。</li><li>返回原本函数返回的任何内容。</li></ul><p>现在我们可以使用 <code>loggedMethod</code> 来装饰 <code>greet</code> 方法。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  @</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">loggedMethod</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  greet</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello, my name is </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new </span><span style="--s-dark:#80A665;--s-light:#59873A;">Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Ron</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">greet</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Output:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   LOG: Entering method.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   Hello, my name is Ron.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   LOG: Exiting method.</span></span></code></pre><p>我们只是在 <code>greet</code> 上使用了作为装饰器的 <code>loggedMethod</code> ，注意这里我们写成了 <code>@loggedMethod</code> 。当我们添加装饰器时， <code>loggedMethod</code> 会被执行，参数为目标方法 target 以及一个上下文对象。因为 <code>loggedMethod</code> 返回了一个新的方法，这个方法会代替 <code>greet</code> 这个原本的方法。</p><p><code>loggedMethod</code> 的定义的第二个参数，目前我们还没提及到它。它被称为“上下文对象”，这个对象包含了一些关于被装饰的方法是如何声明之类的有用的信息，比如是否是私有成员，是否是静态成员，方法的名称。我们可以重写 <code>loggedMethod</code> ，利用这一特性打印出被装饰的方法的名称。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> loggedMethod</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">originalMethod</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> context</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">ClassMethodDecoratorContext</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">methodName</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> String</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">context</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> replacementMethod</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">[])</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">LOG: Entering method &#39;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">methodName</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&#39;.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">result</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> originalMethod</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">call</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">LOG: Exiting method &#39;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">methodName</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&#39;.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> result</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> replacementMethod</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>现在我们使用了上下文参数，它是 <code>loggedMethod</code> 里面第一个比 any 和 any[] 还要严格的类型。 TypeScript 提供了一个名叫 <code>ClassMethodDecoratorContext</code> 的类型，这个类型描述了装饰的方法的上下文对象模型。</p><p>除了元数据，装饰器的上下文对象还有一个名叫 <code>addInitializer</code> 的方法，这个方法很有用。它提供了一种方式使我们能够在构造函数调用过程中注入逻辑（或者使用了 <code>static</code> 块来初始化类）。</p><p>比如，在 JavaScript 中，编写如下模式的代码很常见：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">greet</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">greet</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">bind</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  greet</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello, my name is </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>或者， <code>greet</code> 方法可能会被定义成一个箭头函数的属性。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  greet</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello, my name is </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  };</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这段代码确保了如果 <code>greet</code> 作为一个独立的函数调用或者作为一个回调传入的时候 this 不会被重新绑定。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">greet</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new </span><span style="--s-dark:#80A665;--s-light:#59873A;">Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Ron</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">).</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">greet</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// We don&#39;t want this to fail!</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">greet</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><p>我们可以编写一个装饰器，通过使用 <code>addInitializer</code> 方法来在构造过程中调用 <code>bind</code> 。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> bound</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">originalMethod</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> context</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">ClassMethodDecoratorContext</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">methodName</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> context</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">context</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">private</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    throw</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Error</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&#39;bound&#39; cannot decorate private properties like </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">methodName </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">as</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> string</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  context</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">addInitializer</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#666666;--s-light:#999999;"> ()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">methodName</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> this</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">methodName</span><span style="--s-dark:#666666;--s-light:#999999;">].</span><span style="--s-dark:#80A665;--s-light:#59873A;">bind</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  });</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p><code>bound</code> 函数没有返回任何东西，所以当它装饰一个方法时，它会忽略装饰的方法，然后在任何属性被初始化前添加一段逻辑。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  @</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">bound</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  @</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">loggedMethod</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  greet</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello, my name is </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new </span><span style="--s-dark:#80A665;--s-light:#59873A;">Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Ron</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">greet</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> p</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">greet</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Works!</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">greet</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><p>注意这里我们堆叠使用了两个装饰器，<code> @bound</code> 和 <code>@loggedMethod</code> 。这些装饰器以“相反”的顺序执行，即 <code>@loggedMethod</code> 装饰了源方法 <code>greet</code> ，然后 <code>@bound</code> 装饰了 <code>@loggedMethod</code> 返回的结果。在这个例子中，这两者的顺序无关紧要，但如果你的装饰器存在副作用或者期望以某个顺序执行，那么装饰的顺序就很重要了。</p><p>还有值得注意的是，你可以把这样装饰器放在同一行，如果你喜欢这样的风格的话。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  @</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">bound</span><span style="--s-dark:#666666;--s-light:#999999;"> @</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">loggedMethod</span><span style="--s-dark:#80A665;--s-light:#59873A;"> greet</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello, my name is </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>一些不是很明显的点是，我们甚至可以创建一个返回装饰器函数的函数。这使得定制化最终的装饰器成为可能。如果我们想要的话，我们可以让 <code>loggedMethod</code> 返回一个装饰器函数，然后定制如何输出日志消息。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> loggedMethod</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">headMessage</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">LOG:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> actualDecorator</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">originalMethod</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> context</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">ClassMethodDecoratorContext</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">methodName</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> String</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">context</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> replacementMethod</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">[])</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">headMessage</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> Entering method &#39;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">methodName</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&#39;.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">      const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">result</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> originalMethod</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">call</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">headMessage</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> Exiting method &#39;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">methodName</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&#39;.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> result</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> replacementMethod</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>如果我们这样做，在作为一个装饰器使用之前必须先调用 <code>loggedMethod</code> 函数。我们可以传入一个任意的字符串来作为打印的控制台的日志消息的前缀。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Person</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#C99076;--s-light:#A65E2B;">    this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  @</span><span style="--s-dark:#80A665;--s-light:#59873A;">loggedMethod</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">⚠️</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  greet</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Hello, my name is </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">name</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new </span><span style="--s-dark:#80A665;--s-light:#59873A;">Person</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Ron</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">p</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">greet</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Output:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   ⚠️ Entering method &#39;greet&#39;.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   Hello, my name is Ron.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   ⚠️ Exiting method &#39;greet&#39;.</span></span></code></pre><p>装饰器不仅仅可以使用在方法上！它们也可以用在属性/字段， getter / setter ，以及 auto-accessor 。甚至也可以对类自身进行装饰，比如子类化以及登记。</p><p>为了深入地理解装饰器，你可以阅读这篇文章 <a href="https://2ality.com/2022/10/javascript-decorators.html" target="_blank" rel="noopener">Axel Rauschmayer’s extensive summary</a> 。</p><p>涉及更改的更多信息，可以查看原始的 <a href="https://github.com/microsoft/TypeScript/pull/50820" target="_blank" rel="noopener">PR</a> 。</p><h3 id="与实验性质遗留的装饰器的区别" tabindex="-1">与实验性质遗留的装饰器的区别 <a class="header-anchor" href="#与实验性质遗留的装饰器的区别">🔗</a></h3><p>如果你已经使用了一段时间的 TypeScript 了，你应该知道 TypeScript 已经在多年前就支持实验性质的装饰器了。虽然这些实验性质的装饰器相当有用，但是它模拟的是一个旧得多的装饰器提案，并且一直需要一个叫 <code>--experimentalDecorators</code> 的编译选项。在 TypeScript 中未开启该选项下任何尝试使用装饰器逻辑都会得到一个错误信息。</p><p><code>--experimentalDecorators</code> 选项在可预见的将来会继续存在。但是，现在不使用这个选项，使用装饰器的代码也是符合语法的。在 <code>--experimentalDecorators</code> 选项之外，还会进行类型检查并以不同的方式生成文件。类型检查规则和构建策略是相当不同的，虽然可以通过编写装饰器来支持新旧装饰器的行为，但是任何现有的装饰器几乎不可能这样做。</p><p>新的装饰器提案与 <code>--emitDecoratorMetadata</code> 不兼容，它不支持装饰参数。未来的 ECMAScript 提案可能会减小这一差距。</p><p>最后一点：除了允许装饰器放在 <code>export</code> 关键字前面，装饰器提案现在提供了放在 <code>export</code> 或 <code>export default</code> 之后的选项。唯一的限制是不允许同时混用这两种形式。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-text"><span class="line"><span>// ✅ 允许</span></span>
<span class="line"><span>@register export default class Foo {</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ✅ 允许</span></span>
<span class="line"><span>export default @register class Bar {</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ❌ error - 不允许同时在前后添加</span></span>
<span class="line"><span>@before export @after class Bar {</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span>}</span></span></code></pre><h3 id="编写类型清晰的装饰器" tabindex="-1">编写类型清晰的装饰器 <a class="header-anchor" href="#编写类型清晰的装饰器">🔗</a></h3><p>上面的 <code>loggedMethod</code> 和 <code>bound</code> 装饰器的例子有意地简化并且省略了许多关于类型的细节。</p><p>带有类型的装饰器相当的复杂。例如，一个类型正确版本的 <code>loggedMethod</code> 方法看起来如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> loggedMethod</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">This</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Args</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> any</span><span style="--s-dark:#666666;--s-light:#999999;">[],</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Return</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;(</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  target</span><span style="--s-dark:#666666;--s-light:#999999;">: (</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">This</span><span style="--s-dark:#666666;--s-light:#999999;">, ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Args</span><span style="--s-dark:#666666;--s-light:#999999;">) =&gt; </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Return</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  context</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">ClassMethodDecoratorContext</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">This</span><span style="--s-dark:#666666;--s-light:#999999;">, (</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">This</span><span style="--s-dark:#666666;--s-light:#999999;">, ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Args</span><span style="--s-dark:#666666;--s-light:#999999;">) =&gt; </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Return</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">methodName</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> String</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">context</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">name</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> replacementMethod</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">This</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Args</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Return</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">LOG: Entering method &#39;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">methodName</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&#39;.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">result</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> target</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">call</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">this</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> ...</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">LOG: Exiting method &#39;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">\${</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">methodName</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">}</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">&#39;.</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">\`</span><span style="--s-dark:#666666;--s-light:#999999;">)</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> result</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> replacementMethod</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>我们必须分别模拟出 this 类型，参数类型，以及被装饰方法的返回类型，分别用类型参数 This ， Args 和 Return 来表示。</p><p>确切来说，装饰器的复杂程度取决于你想保证的内容。请记住，使用装饰器比编写装饰器更加频繁，所以一个类型正确的装饰器通常更可取，但这显然需要和可读性进行权衡，所以应该尽量让事情保持简单。</p><p>将来会有更多关于编写装饰器的文档，虽然现在关于这方面的文档较少，但是<a href="https://2ality.com/2022/10/javascript-decorators.html" target="_blank" rel="noopener">这篇文章</a> 有大量关于装饰器机制的细节。</p><h2 id="不可变（const）类型参数" tabindex="-1">不可变（const）类型参数 <a class="header-anchor" href="#不可变（const）类型参数">🔗</a></h2><p>当推断一个对象的类型时， TypeScript 通常会选择一种通用的类型。比如，下面的例子，<code>name</code> 会被推断成 <code>string[]</code> ：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">type</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> HasNames</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  readonly</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> names</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">[]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getNamesExactly</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> HasNames</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arg</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> T</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">names</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arg</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">names</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Inferred type: string[]</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">names</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getNamesExactly</span><span style="--s-dark:#666666;--s-light:#999999;">({</span><span style="--s-dark:#B8A965;--s-light:#998418;">names</span><span style="--s-dark:#666666;--s-light:#999999;">: [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Alice</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Bob</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Eve</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]});</span></span></code></pre><p>通常这样做的目的是在接下来的代码中可以改变这个变量。</p><p>但是，这取决于 <code>getNamesExactly</code> 的作用以及是如何被使用的，可能需要一个更加具体的类型。</p><p>到现在为止， API 作者通常不得不建议在某些地方添加 <code>as const</code> 来得到想要的推断：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 我们想要的类型:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//    readonly [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Eve&quot;]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 实际我们得到的类型:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//    string[]</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">names1</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getNamesExactly</span><span style="--s-dark:#666666;--s-light:#999999;">({</span><span style="--s-dark:#B8A965;--s-light:#998418;">names</span><span style="--s-dark:#666666;--s-light:#999999;">: [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Alice</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Bob</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Eve</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]});</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 我们想要的正确的类型:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//    readonly [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Eve&quot;]</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">names2</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getNamesExactly</span><span style="--s-dark:#666666;--s-light:#999999;">({</span><span style="--s-dark:#B8A965;--s-light:#998418;">names</span><span style="--s-dark:#666666;--s-light:#999999;">: [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Alice</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Bob</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Eve</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]}</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> as</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> const</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>这样做很麻烦并且容易忘记。在 TypeScript 5.0 ，你可以给一个类型参数定义添加一个 <code>const</code> 修饰符来使得推断在默认情况下就是类似只读的。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">type</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> HasNames</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  names</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#CB7676;--s-light:#AB5959;">readonly</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> string</span><span style="--s-dark:#666666;--s-light:#999999;">[]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getNamesExactly</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> T</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> HasNames</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arg</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> T</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">names</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//                       ^^^^^</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> arg</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">names</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 推断类型: readonly [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Eve&quot;]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 注意: 不需要在这里写 as const</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">names</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> getNamesExactly</span><span style="--s-dark:#666666;--s-light:#999999;">({</span><span style="--s-dark:#B8A965;--s-light:#998418;">names</span><span style="--s-dark:#666666;--s-light:#999999;">: [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Alice</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Bob</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Eve</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]});</span></span></code></pre><p>注意 <code>const</code> 修饰符不会拒绝可变的值，并且也不需要不可变的约束。使用一个可变的类型约束可能会得到一个令人惊讶的结果，比如：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">declare</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fnBad</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> T</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> string</span><span style="--s-dark:#666666;--s-light:#999999;">[]&gt;(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> void</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// T 仍然是 string[] 因为 readonly [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] 不能分配给 string[]</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fnBad</span><span style="--s-dark:#666666;--s-light:#999999;">([</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">b</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">c</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]);</span></span></code></pre><p>这里，类型 <code>T</code> 的推断候选是 <code>readonly [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code> ，一个 <code>readonly</code> 的数组无法用在一个需要可变性质的地方。在这种情况下，推断会退回到约束类型，数组会被识别为 <code>string[]</code> ，这样这个调用仍然能够顺利执行。</p><p>这个函数的一个更好的定义是使用 <code>readonly string[]</code> ：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">declare</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fnGood</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> T</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> readonly</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> string</span><span style="--s-dark:#666666;--s-light:#999999;">[]&gt;(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> void</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// T 的类型为 readonly [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fnGood</span><span style="--s-dark:#666666;--s-light:#999999;">([</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">b</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">c</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">]);</span></span></code></pre><p>类似地，请记住 <code>const</code> 修饰符只影响对象，数组和在调用中编写的原始表达式的推断，所以没有（或者不能）被 <code>as const</code> 修饰的参数在行为上不会有任何改变。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">declare</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> fnGood</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> T</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> readonly</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> string</span><span style="--s-dark:#666666;--s-light:#999999;">[]&gt;(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">args</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> void</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">b</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">c</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// T 仍然是 string[] ， const 修饰符在这里没有影响</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">fnGood</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">arr</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>了解更多的细节可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/51865" target="_blank" rel="noopener">PR</a> 以及讨论激烈的 issues （ <a href="https://github.com/microsoft/TypeScript/issues/30680" target="_blank" rel="noopener">30680</a> 和 <a href="https://github.com/microsoft/TypeScript/issues/41114" target="_blank" rel="noopener">41114</a> ）。</p><h2 id="支持-extends-字段配置多个配置文件" tabindex="-1">支持 extends 字段配置多个配置文件 <a class="header-anchor" href="#支持-extends-字段配置多个配置文件">🔗</a></h2><p>当管理多个项目的时候，有一个“基础”的配置文件供其他 tsconfig.json 文件继承是很有帮助的。这也是为什么 TypeScript 支持一个 <code>extends</code> 字段来复制其他文件的 <code>compilerOptions</code> 字段。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// packages/front-end/src/tsconfig.json</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">extends</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../../../tsconfig.base.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">compilerOptions</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">outDir</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../lib</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>然而，这里可能有一些想要继承多个配置文件的场景。比如，想象一下你正在使用一个 npm 上的 tsconfig.json 配置文件。如果你想要所有你的项目也使用 npm 上的 @tsconfig/strictest 包的配置，有一个简单的办法；建一个继承了 @tsconfig/strictest 的 tsconfig.base.json 的配置文件：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// tsconfig.base.json</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">extends</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">@tsconfig/strictest/tsconfig.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">compilerOptions</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这在一定程度上起到了作用。如果某些不想要使用 @tsconfig/strictest 的项目，这些项目必须手动禁用某些选项，或者创建一个独立的，不继承自 @tsconfig/strictest 的 tsconfig.base.json 文件版本，</p><p>为了在此处取得更多的灵活性， TypeScript 5.0 现在允许设置 <code>extends</code> 字段为多个入口。比如，在下面这个配置文件中：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">extends</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">b</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">c</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ],</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">compilerOptions</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这么写有点像直接继承 c ，而 c 继承 b ，b 继承 a ，如果某个字段“冲突”了，以后者为准。</p><p>所以在下面的例子中，在最后的 tsconfig.json 中 <code>strictNullChecks</code> 和 <code>noImplicitAny</code> 都会开启。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// tsconfig1.json</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">compilerOptions</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">strictNullChecks</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// tsconfig2.json</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">compilerOptions</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">noImplicitAny</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// tsconfig.json</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">extends</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./tsconfig1.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./tsconfig2.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ],</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">files</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./index.ts</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>再举个例子，我们可以用下面的方式重写原来的例子。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// packages/front-end/src/tsconfig.json</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">extends</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">@tsconfig/strictest/tsconfig.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../../../tsconfig.base.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ],</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">compilerOptions</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">outDir</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../lib</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>获取更多信息，可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/50403" target="_blank" rel="noopener">PR</a> 。</p><h2 id="所有的枚举是联合枚举" tabindex="-1">所有的枚举是联合枚举 <a class="header-anchor" href="#所有的枚举是联合枚举">🔗</a></h2><p>最初 TypeScript 引入枚举的时候，它们只不过是一组有着相同类型的数字常量。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">enum</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> E</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Foo</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 10</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Bar</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 20</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>E.Foo 和 E.Bar 的唯一特别的地方就是可以分配给任何接收 E 类型的地方。除此之外，它们几乎只是数字而已。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> takeValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">e</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">E</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">takeValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">E</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Foo</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 执行正常</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">takeValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">123</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 错误!</span></span></code></pre><p>直到 TypeScript 2.0 引入了枚举字面类型，枚举变得更特别了。枚举字面类型让每个枚举成员拥有它们自己的类型，而枚举自身的类型变成每一个成员类型的联合。这允许我们仅引用一个枚举类型的子集，以及收缩这些类型。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Color 类似一个 Red | Orange | Yellow | Green | Blue | Violet 的集合</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">enum</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Color</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Red</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Orange</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Yellow</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Green</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Blue</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  /* Indigo */</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Violet</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 每一个枚举成员有它自己的类型，我么可以引用它们。</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">type</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> PrimaryColor</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span></span>
<span class="line"><span style="--s-dark:#5DA994;--s-light:#2E8F82;">  Color</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Red</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  |</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Color</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Green</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  |</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Color</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Blue</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isPrimaryColor</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">c</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Color</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> c</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> is</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> PrimaryColor</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 收缩字面类型可以捕获错误</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 在这里 TypeScript 会报错</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 因为最后使用比较的是 Color.Red 和 Color.Green</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 我们打算使用 || 逻辑符号的，但是意外地写成了 &amp;&amp; 逻辑符号</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> c</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Color</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Red</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> c</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Color</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Green</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> &amp;&amp;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> c</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Color</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Blue</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>每个枚举成员拥有自己的类型带来一个问题是这些类型在某些方面和成员实际的值有关。在某些情况下是无法计算枚举成员的值地，比如，通过调用一个函数来初始化一个枚举成员。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">enum</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> E</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Blah</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Math</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">random</span><span style="--s-dark:#666666;--s-light:#999999;">()</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>每当 TypeScript 遇到这些问题时，它会静默退回，使用旧版本的枚举策略。这意味着放弃了所有的联合和字面类型的优点。</p><p>TypeScript 5.0 通过为每一个计算成员创建一个唯一的类型来设法让所有的枚举成为联合枚举。这意味着现在所有的枚举可以收缩，枚举成员也能作为类型引用。</p><p>关于此改变的更多信息，可以阅读 Github 上的相关<a href="https://github.com/microsoft/TypeScript/pull/50528" target="_blank" rel="noopener">细节</a> 。</p><h2 id="–moduleresolution-bundler" tabindex="-1">–moduleResolution bundler <a class="header-anchor" href="#–moduleresolution-bundler">🔗</a></h2><p>TypeScript 4.7 为 <code>--module</code> 和 <code>--moduleResolution</code> 设置引入了 <code>node16</code> 和 <code>nodenext</code> 选项。这些选项的目的是更好的在 Node.js 环境中模拟 ECMAScript 模块的精确查找规则。然而，这种模式有很多的限制，其他的工具不会真正强制地执行。</p><p>比如，在 Node.js 中的一个 ECMAScript 模块，任何有关的导入都需要包含文件的扩展名。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// entry.mjs</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> as</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> utils</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./utils</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">     // ❌ 错误 - 需要半酣文件扩展名</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> as</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> utils</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./utils.mjs</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // ✅ 正常</span></span></code></pre><p>在 Node 和浏览器中出现这种现象是有某些原因的。这种方式查找文件会更快并且在原始文件系统上能更好地工作。但对于许多使用打包器之类地工具的开发者来说， <code>node16</code> /<code> nodenext</code> 设置繁琐，因为打包器没有这些大多数的限制，在某些情况下，对使用打包器的用户来说 <code>node</code> 解析模式是更好的选择。</p><p>但在某些情况下，原始的 <code>node</code> 解析模式早已过时了。许多现代的打包器在 Node 环境中融合了 ECMAScript 模块和 CommonJS 模块的查找规则。比如，无扩展名导入只能在 CommonJS 中很好地工作，但当你浏览一个包的<a href="https://nodejs.org/api/packages.html#nested-conditions" target="_blank" rel="noopener">导出条件</a>时，它们更喜欢类似 ECMAScript 文件的导入条件。</p><p>为了模拟打包器的工作方式， TypeScript 现在引入了一个新的策略： <code>--moduleResolution bundler</code></p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">compilerOptions</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">target</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">esnext</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">moduleResolution</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">bundler</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>如果你使用了一个像 Vite 、 esbuild 、 swc 、 Webpack 、 Parcel 以及其他实现了混合查找策略的的现代打包器，新的 <code>bundler</code> 配置会很适合你。</p><p>另一方面，如果你编写了一个打算发布到 npm 上的库，使用 <code>bundler</code> 配置可能会给没有使用打包器的用户所带来隐含的兼容性问题。所以在这些情况下，使用 <code>node16</code> 或者 <code>nodenext</code> 解析配置看起来是一个更好的选择。</p><p>更多关于 <code>--moduleResolution bundler</code> 的信息，可与查看这个实现的 <a href="https://github.com/microsoft/TypeScript/pull/51669" target="_blank" rel="noopener">PR</a> 。</p><h2 id="解析自定义标志" tabindex="-1">解析自定义标志 <a class="header-anchor" href="#解析自定义标志">🔗</a></h2><p>如今 JavaScript 工具模拟了混合的解析规则，就如同我们如上所描述的 bundler 模式一样。因为工具间的支持可能存在轻微的不同， TypeScript 5.0 提供一些方式来开启或者关闭一些在配置中能够（不能）使用的功能。</p><h3 id="allowimportingtsextensions" tabindex="-1">allowImportingTsExtensions <a class="header-anchor" href="#allowimportingtsextensions">🔗</a></h3><p><code>--allowImportingTsExtensions</code> 允许 TypeScript 文件以一个具体的 TypeScript 扩展名（比如 .ts ， .mts ， .tsx ）来导入彼此。</p><p>这个标志只能在 <code>--noEmit</code> 或者 <code>--emitDeclarationOnly</code> 开启的情况下使用，因为这些导入路径不会在 JavaScript 的输出文件中被解析。这里是期望由你的解析器（比如：打包器，运行时环境，或者一些其他的工具）来让这些导入在 .ts 文件中工作。</p><h3 id="resolvepackagejsonexports" tabindex="-1">resolvePackageJsonExports <a class="header-anchor" href="#resolvepackagejsonexports">🔗</a></h3><p><code>--resolvePackageJsonExports</code> 强制 TypeScript 查看读取 node_modules 的包的 package.json 文件的 <a href="https://nodejs.org/api/packages.html#exports" target="_blank" rel="noopener">exports</a> 字段。</p><p>这个配置在 <code>node16</code> 、 <code>nodenext</code> 以及 <code>--moduleResolution</code> 为 <code>bundler</code> 的情况下默认为 true 。</p><h3 id="allowarbitraryextensions" tabindex="-1">allowArbitraryExtensions <a class="header-anchor" href="#allowarbitraryextensions">🔗</a></h3><p>在 TypeScript 5.0 中，当一个导入路径以一个非 JavaScript 或者 TypeScript 文件的扩展名结束时，编译器会寻找一个此路径的定义文件，形式为 {file basename}.d.{extension}.ts 。比如，如果你在一个打包项目中使用了一个 CSS 加载器，你可能会为这些样式文件编写（或生成）定义文件。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-css"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/* app.css */</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cookie-banner</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    display</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C99076;--s-light:#A65E2B;"> none</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// app.d.css.ts</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">declare const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">css</span><span style="--s-dark:#666666;--s-light:#999999;">: {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  cookieBanner</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> default</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> css</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// App.tsx</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> styles</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./app.css</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">styles</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">cookieBanner</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // string</span></span></code></pre><p>默认情况下，这个导入会引起一个错误，这个错误会告诉你 TypeScript 无法理解这个文件类型，以及运行时不支持导入它。但如果你通过配置运行时或者打包器去处理它，你可以通过 <code>--allowArbitraryExtensions</code> 这个编译选项来禁止这个错误的出现。</p><p>请注意，在以前，通过添加一个名为 app.css.d.ts 而不是 app.d.css.ts 的文件也能得到一个相似的效果。然而这只能工作在 Node 的 CommonJS 模块的 require 解析规则下。严格上讲，前者被解释为一个名为 app.css.js 的 JavaScript 文件的类型定义文件。由于在支持 Node ESM 下相关文件的导入需要包含扩展名，在 <code>--moduleResolution</code> 为 <code>node16</code> 或者 <code>nodenext</code> 的 ESM 文件下 TypeScript 会在上面的例子中报错。</p><p>更多的信息，可以查看这个特性的<a href="https://github.com/microsoft/TypeScript/issues/50133" target="_blank" rel="noopener">提案</a>以及相关的 <a href="https://github.com/microsoft/TypeScript/pull/51435" target="_blank" rel="noopener">PR</a> 。</p><h3 id="自定义条件" tabindex="-1">自定义条件 <a class="header-anchor" href="#自定义条件">🔗</a></h3><p><code>--customConditions</code> 指定一个额外的条件列表，可以使得 TypeScript 从 package.json 文件中的 <a href="https://nodejs.org/api/packages.html#exports" target="_blank" rel="noopener">exports</a> 和 <a href="https://nodejs.org/api/packages.html#imports" target="_blank" rel="noopener">imports</a> 字段正确地解析。这些条件会添加到默认使用的解析器（无论条件是否存在）中。</p><p>比如，如果在 tsconfig.json 设置这个字段为如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">compilerOptions</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">target</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">es2022</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">moduleResolution</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">bundler</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">customConditions</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">      &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">my-condition</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    ]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>任何时候引用 package.json 的 <code>exports</code> 和 <code>imports</code> 字段， TypeScript 会考虑叫 my-condition 的条件。</p><p>所以当从一个带有如下 package.json 的包中导入的时候</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">exports</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">.</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">      &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">my-condition</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./foo.mjs</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">      &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">node</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./bar.mjs</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">      &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">import</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./baz.mjs</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">      &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">require</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./biz.mjs</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>TypeScript 会尝试寻找相应的 foo.mjs 的文件。</p><p>这个字段只有在 <code>node</code> 、 <code>nodenext</code> 和 <code>--moduleResolution</code> 为 <code>bundler</code> 下才合法。</p><h3 id="verbatimmodulesyntax" tabindex="-1">verbatimModuleSyntax <a class="header-anchor" href="#verbatimmodulesyntax">🔗</a></h3><p>默认情况下， TypeScript 做了一些叫导入省略的事情。总的来说，如果你编写如下代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Car</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./car</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> drive</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">car</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Car</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>TypeScript 会检测到你只是导入一个类型，会完全移除这个导入。输出的 JavaScript 看起来可能如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> drive</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">car</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>很多时候这已经很棒了，但是如果从 <code>./car</code> 导出的 <code>Car</code> 不是一个值。我们会得到一个运行时的错误。</p><p>但这确实对某些边缘情况增加了一层复杂度。比如，注意这里没有写 <code>import &quot;./car&quot;</code> 这样的语句，这个导入会被完全删除。这实际上在有副作用或没有副作用的模块中存在区别。</p><p>TypeScript 对 JavaScript 的构建策略也有其他几个层次的复杂度。导入省略不总是由一个导入的使用方式来驱动。它经常也查询一个值是如何声明的。所以它可能看起来不总是清晰的，比如下面这样</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Car</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./car</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>我们无法知道这段代码时候应该被保留或删除。如果 <code>Car</code> 通过 class 定义，那么它在输出的 JavaScript 中会被保留。但如果 <code>Car</code> 只是一个 type 别名或者 interface ，那么输出的 JavaScript 文件根本不应该导出 <code>Car</code> 。</p><p>虽然 TypeScript 可能能够根据文件间的信息做出这些构建判断，但不是每一个编译器都可以的。</p><p>在导入和导出语句上使用 type 修饰符对这些情况可以起到帮助。我们可以通过使用 type 修饰符来明确一个导入或导出是否只是用于类型分析，是否可以在 JavaScript 文件中完全删除。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 这个语句会在输出的 JS 文件中被完全删除</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> as</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> car</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./car</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 导入或者导出类型 Car 会在输出的 JS 文件中被完全删除</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Car</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./car</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Car</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./car</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>type 修饰符本身并不是很有用，默认情况下，模块省略仍然会删除这些导入，并且不会强制你区分 type 导入导出和原始的导入导出。所以 TypeScript 的 <code>--importsNotUsedAsValues</code> 标志确保你使用 type 修饰符， <code>--preserveValueImports</code> 标志来防止某些模块省略的行为， <code>--isolatedModules</code> 确保 TypeScript 的代码可以工作在不同的编译器中。不幸的是，理解这三个标志的细节有难度，并且还有一些意外行为的边缘情况。</p><p>TypeScript 5.0 引入了一个新的选项，叫 <code>--verbatimModuleSyntax</code> ，以此来简化这些情况，这个规则非常的简单，任何没有 type 修饰符的导入导出将会被保留，任何使用了 type 修饰符的则会被完全删除。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 会被完全删除</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> A</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 重写成 import { b } from &quot;bcd&quot;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Rewritten to &#39;import { b } from &quot;bcd&quot;;&#39;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> b</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> c</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> d</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">bcd</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//重写成 import {} from &quot;xyz&quot;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> xyz</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">xyz</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>这个选项意味着所见即所得。</p><p>当涉及到模块间互相操作时这确实造成了一些影响，在这个标志下，当你的设置或者文件扩展名表明使用一个不同的模块系统的时候， ECMAScript 的导入和导出不会被重写成 require 调用，而是得到一个错误。如果你需要生成使用 require 和 module.exports 的代码，你不得不使用 ES2015 之前的 TypeScript 的模块语法。</p><p>虽然这是一个限制，但这缺点是使得一些问题更加明显了。比如，在 <code>--module</code> 的 <code>node16</code> 的设置下很容易忘记给 package.json 文件的 type 字段设置值。因此，开发者会无意识地编写 CommonJS 模块而不是 ESM 模块，对查找规则和输出内容感到惊讶。这个新的标志确保了你是有意指定你使用地文件类型，因为它们间的语法是有意不同的。</p><p>因为 <code>--verbatimModuleSyntax</code> 相比 <code>--importsNotUsedAsValues</code> 和<code> --preserveValueImports</code> ，提供了更一致性的描述，旧的两个标志将会被废弃。</p><p>更多的细节，可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/52203" target="_blank" rel="noopener">PR</a> 和<a href="https://github.com/microsoft/TypeScript/issues/51479" target="_blank" rel="noopener">提案</a>。</p><h2 id="支持-export-type-语法" tabindex="-1">支持 export type * 语法 <a class="header-anchor" href="#支持-export-type-语法">🔗</a></h2><p>在 TypeScript 3.8 时引入了类型导入，该语法不允许类似 <code>export * from &quot;module&quot;</code> 或者 <code>export * as ns from &quot;module&quot;</code> 重新导出。TypeScript 5.0 对这些形式添加了支持。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// models/vehicles.ts</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Spaceship</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// models/index.ts</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> type</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> as</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> vehicles</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./vehicles</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// main.ts</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> vehicles</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./models</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> takeASpaceship</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">s</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">vehicles</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Spaceship</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ✅ 可以 - vehicles 只被使用在一个类型的位置</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> makeASpaceship</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> vehicles</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">Spaceship</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //         ^^^^^^^^</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // vehicles 无法作为一个值来使用，因为它是由通过 export type 来导出的。</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>你可以阅读相关<a href="https://github.com/microsoft/TypeScript/pull/52217" target="_blank" rel="noopener">实现细节</a>。</p><h2 id="在-jsdoc-中支持-satisfies" tabindex="-1">在 JSDoc 中支持 @satisfies <a class="header-anchor" href="#在-jsdoc-中支持-satisfies">🔗</a></h2><p>TypeScript 4.9 引入了 <code>satisfies</code> 操作符。它确保了一个表达式的类型是兼容的，不会影响到类型自身。比如，我们可以查看如下代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> CompilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  strict</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">?</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">boolean</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  outDir</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">?</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> ConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  compilerOptions</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">?</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">CompilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  extends</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">?</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">[];</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">myConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  compilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;">: {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    strict</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">true</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    outDir</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../lib</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  extends</span><span style="--s-dark:#666666;--s-light:#999999;">: [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">@tsconfig/strictest/tsconfig.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../../../tsconfig.base.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ],</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> satisfies</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> ConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>在上面，TypeScript 知道 <code>myConfigSettings.extends</code> 是一个数组类型定义，因为虽然 <code>satisfies</code> 验证了对象的类型，但是它没有直接把对象转化为 <code>ConfigSettings</code> 从而丢失一些信息。因此如果我们想要在 <code>extends</code> 上调用 <code>map</code> ，这样完全可以。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">declare</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> resolveConfig</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">configPath</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> CompilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">inheritedConfigs</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> myConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">extends</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">map</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">resolveConfig</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>这对 TypeScript 用户来说很有用的，但是很多的用户使用 TypeScript 的 JSDoc 注解来对 JavaScript 代码进行类型检查。这也是为什么 TypeScript 5.0 支持了一个名叫 <code>@satisfies</code> 的完全相同功能的 JSDoc 的标签。</p><p>/** @satisfies */ 可以捕获到类型不匹配的情况：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">typedef</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> CompilerOptions</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">prop</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">boolean</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">strict</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">prop</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">outDir</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">satisfies</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">CompilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> myCompilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  outdir</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../lib</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//  ~~~~~~ oops! we meant outDir</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span></code></pre><p>但是它也会保留表达式的原始类型，这允许我们在接下里的代码中使用更加精确的值。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">typedef</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> CompilerOptions</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">prop</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">boolean</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">strict</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">prop</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">outDir</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">typedef</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> ConfigSettings</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">prop</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">CompilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">compilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">prop</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string | string[]</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">extends</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">satisfies</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">ConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> myConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  compilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    strict</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    outDir</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../lib</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  extends</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">@tsconfig/strictest/tsconfig.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../../../tsconfig.base.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ],</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> inheritedConfigs</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> myConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">extends</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">map</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">resolveConfig</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>/** @satisfies */ 也可以被内联在括号表达式中，我们可以把 myConfigSettings 写成形式：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> myConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> /** </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">satisfies</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">ConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span><span style="--s-dark:#666666;--s-light:#999999;"> ({</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  compilerOptions</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    strict</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    outDir</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../lib</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  extends</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">@tsconfig/strictest/tsconfig.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">../../../tsconfig.base.json</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ],</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">});</span></span></code></pre><p>为什么要支持这种形式？是这样的，很多情况下你会在一段代码的很深的位置，比如一个函数调用</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">compileCode</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/** </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">satisfies</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">ConfigSettings</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span><span style="--s-dark:#666666;--s-light:#999999;"> ({</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}));</span></span></code></pre><p>感谢 <a href="https://github.com/a-tarasyuk" target="_blank" rel="noopener">Oleksandr Tarasiuk</a> 提供了这个<a href="https://github.com/microsoft/TypeScript/pull/51753" target="_blank" rel="noopener">新特性</a></p><h2 id="在-jsdoc-中支持-overload" tabindex="-1">在 JSDoc 中支持 @overload <a class="header-anchor" href="#在-jsdoc-中支持-overload">🔗</a></h2><p>在 TypeScript 中，你可以指定一个函数的重载形式。重载使得我们可以让一个函数以不同的参数进行调用，然后可能返回不同的结果。这些重载可以限制调用者实际调用代码的方式，以及得到返回结果的内容。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Our overloads:</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> printValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">str</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> void</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> printValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">num</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> maxFractionDigits</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">?</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> void</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 实现</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> printValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> maximumFractionDigits</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">?</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">number</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">formatter</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Intl</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">NumberFormat</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">en-US</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      maximumFractionDigits</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    });</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    value</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> formatter</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">format</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>在上面的代码中，我们让 <code>printValue</code> 函数可以接收一个 string 或者 一个 number 来作为它的第一个参数，如果第一个参数是 number ，那么它还可以接收第二个参数来确定要打印多少小数位。</p><p>现在 TypeScript 5.0 允许使用 JSDoc 来通过标签 <code>@overload</code> 来定义一个重载。每一个带有 <code>@overload</code> 标签的 JSDoc 注释会被当成一个接下来的函数的一个不同的重载</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">overload</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">param</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">return</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">void</span><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">overload</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">param</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">param</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">maximumFractionDigits</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">return</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">void</span><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">param</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string | number</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * </span><span style="--s-dark:#666666;--s-light:#999999;">@</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">param</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">maximumFractionDigits</span><span style="--s-dark:#666666;--s-light:#999999;">]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> printValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> maximumFractionDigits</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">typeof</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">number</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> formatter</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Intl</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">NumberFormat</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">en-US</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">      maximumFractionDigits</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    });</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    value</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> formatter</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">format</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>现在不管是在 TypeScript 中编写还是在 JavaScript 中编写，TypeScript 都可以在我们错误地调用函数的时候进行提示。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// all allowed</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">printValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hello!</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">printValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">123.45</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">printValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">123.45</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">printValue</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">hello!</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 123</span><span style="--s-dark:#666666;--s-light:#999999;">);</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // error!</span></span></code></pre><p>感谢 <a href="https://github.com/apendua" target="_blank" rel="noopener">Tomasz Lenarcik</a> 实现了这个新的<a href="https://github.com/microsoft/TypeScript/pull/51234" target="_blank" rel="noopener">标签</a>。</p><h2 id="在-build-下传递特定的构建标志" tabindex="-1">在 --build 下传递特定的构建标志 <a class="header-anchor" href="#在-build-下传递特定的构建标志">🔗</a></h2><p>现在 TypeScript 支持在 --build 模式下传递如下的标志</p><ul><li><code>--declaration</code></li><li><code>--emitDeclarationOnly</code></li><li><code>--declarationMap</code></li><li><code>--sourceMap</code></li><li><code>--inlineSourceMap</code></li></ul><p>当你的开发构建和生产构建存在不同时，这可以让自定义构建的某些部分变得更加容易。</p><p>比如，某个库的开发构建可能不需要产生定义文件，但生产构建就需要。一个项目可以配置在默认情况下关闭类型定义文件生成，也可以通过如下命令简单地生成它：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-text"><span class="line"><span>tsc --build -p ./my-project-dir</span></span></code></pre><p>一旦你在内部周期内完成代码迭代，生产构建只需要传递 <code>--declaration</code> 标志即可。</p><p>更多关于此改变的信息可以点击<a href="https://github.com/microsoft/TypeScript/pull/51241" target="_blank" rel="noopener">此处</a>。</p><h2 id="编辑器中忽略大小写的导入顺序" tabindex="-1">编辑器中忽略大小写的导入顺序 <a class="header-anchor" href="#编辑器中忽略大小写的导入顺序">🔗</a></h2><p>在类似 Visual Studio 和 VS Code 的编辑器中， TypeScript 会增强导入和导出的组织和排序的体验。虽然很多时候，可能会对已“排序”的列表产生不同的解释。</p><p>比如，如下的导入列表是排序过的吗？</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Toggle</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  freeze</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  toBoolean</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./utils</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>你可能会得出“这取决于”这样令人惊讶的答案，如果我们对大小写敏感，那么很明显这个列表不是顺序的。字母 <code>f</code> 应该在 <code>t</code> 和 <code>T</code> 之前。</p><p>但在很多的编程语言中，排序默认情况下是基于字符串的比特的值。 JavaScript 比较的字符串的方式意味着 Toggle 总是排在 freeze 的前面，因为在 <a href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII</a> 字符编码中大写字母在小写字母前面。所以根据这个观点，这个导入列表就是顺序的。</p><p>在以前，TypeScript 会认为这个列表是排序的，因为它基于一个大小写敏感的排序。对于那些对更喜欢大小写不敏感，或者使用了类似 ESLint 那种默认情况下忽略大小写的排序的工具的用户来说，这会打击他们的使用 TypeScript 意愿。</p><p>现在 TypeScript 默认情况下检测大小写。这意味着 TypeScript 和 类似 ESLint 的工具通常情况下不会再为了“最好的导入顺序”而相互“打架”。</p><p>我们的团队也在实验进一步的排序策略，你可以<a href="https://github.com/microsoft/TypeScript/pull/52115" target="_blank" rel="noopener">在此</a>阅读相关的信息。这些配置可能最终能通过用户来配置。但是现在，这些配置仍然是不稳定和实验性质的，现在你可以在 VS code 的 JSON 配置文件中通过 typescript.unstable 入口来配置它们。以下是你可以使用的所有配置项（设置为默认值）：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">typescript.unstable</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 是否忽略大小写排序，值可为</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - true</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - false</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - &quot;auto&quot; (自动检测)</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">organizeImportsIgnoreCase</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">auto</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 按顺序排序还是使用码点或者考虑 Unicode 规则，值可为</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - &quot;ordinal&quot;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - &quot;unicode&quot;</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">organizeImportsCollation</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">ordinal</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 在 organizeImportsCollation 为 unicode 下，当前的语言环境是？值可为</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - [任何其他的语言环境代码]</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - &quot;auto&quot; (使用编辑器的语言环境)</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">organizeImportsLocale</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">en</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 在 organizeImportsCollation 为 unicode 下，大写字母在前还是小写字母在前？值可为</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - false (由语言环境指定)</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - &quot;upper&quot;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - &quot;lower&quot;</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">organizeImportsCaseFirst</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> false</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 在 organizeImportsCollation 为 unicode 下，数字是否根据大小进行比较（比如，&quot;a1&quot; &lt; &quot;a2&quot; &lt; &quot;a100&quot;）？值可为</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - true</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - false</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">organizeImportsNumericCollation</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 在 organizeImportsCollation 为 unicode 下，带有重音标志或变音标志的字母与他们的“基础”字母是否区分排序（比如 é 是否和 e 不同）？值可为</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - true</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // - false</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">    &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">organizeImportsAccentCollation</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> true</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  },</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">javascript.unstable</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // 和上面相同的配置</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>你可以在这个 <a href="https://github.com/microsoft/TypeScript/pull/51733" target="_blank" rel="noopener">PR</a> 查看关于自动检测和指定大小写不敏感的底层工作的细节，其次是更加广泛的配置集这个 <a href="https://github.com/microsoft/TypeScript/pull/52115" target="_blank" rel="noopener">PR</a> 。</p><h2 id="全面的-switch-case-完成功能" tabindex="-1">全面的 switch/case 完成功能 <a class="header-anchor" href="#全面的-switch-case-完成功能">🔗</a></h2><p>当我们编写了一个 <code>switch</code> 语句的时候，现在 TypeScript 会在值为一个字面类型的时候进行检测。如果是这种情况， TypeScript 会完整地检测出每个未被覆盖的情况</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/03/exhaustiveCaseCompletions-5.0-stable-1.gif" alt=""></p><p>你可以在 <a href="https://github.com/microsoft/TypeScript/pull/50996" target="_blank" rel="noopener">Github</a> 上查看该实现的相关细节。</p><h2 id="优化速度，内存和包大小" tabindex="-1">优化速度，内存和包大小 <a class="header-anchor" href="#优化速度，内存和包大小">🔗</a></h2><p>TypeScript 5.0 在代码结构，数据结构和算法实现上包含了许多强大的改变。所有的这些改变意味着你的整个使用过程会更加快速，这不仅仅体现在运行 TypeScript 上，也包括安装它的速度。</p><p>以下是和 TypeScript 4.9 相比一些能够被检测的在速度和大小上的优势</p><table><thead><tr><th>脚本</th><th>相比 TS 4.9 的时间或大小</th></tr></thead><tbody><tr><td>material-ui 构建时间</td><td>90%</td></tr><tr><td>TypeScript 编译器启动时间</td><td>89%</td></tr><tr><td><a href="https://github.com/microsoft/playwright" target="_blank" rel="noopener">Playwright</a> 构建时间</td><td>88%</td></tr><tr><td>TypeScript 编译器构建时间</td><td>87%</td></tr><tr><td>Outlook Web 构建时间</td><td>82%</td></tr><tr><td>VS Code 构建时间</td><td>80%</td></tr><tr><td>TypeScript 的包大小</td><td>59%</td></tr></tbody></table><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/03/speed-5.0-stable-2.png" alt=""></p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2023/03/size-5.0-stable-1.png" alt=""></p><p>怎么样，在未来我们会对这些显著的改进提供更多的细节。但现在我们就能告诉你。</p><p>首先，我们最近将 TypeScript 从命名空间迁移到了模块，模块允许我们利用现代构建工具进行类似范围提升之类的执行优化。使用这个工具，重新审视我们的打包策略，然后移除一些废弃的代码，这样我们就可以从 TypeScript 4.9 的 63.8 M 的包大小减少 26.4 M 。通过直接函数调用也让我们显著地提升了速度。我们把这些内容一起放在了一篇关于模块迁移地细节的<a href="https://devblogs.microsoft.com/typescript/typescripts-migration-to-modules/" target="_blank" rel="noopener">文章</a>中。</p><p>TypeScript 也在编译器中添加更统一的内部对象类型。以及精简了一些存储在这些对象类型上的数据。这减少了多态操作，同时平衡了因让对象更加统一而增加的内存使用量。</p><p>对于序列化信息到字符串我们也做了一些缓存。作为错误报告的一部分，声明提示，代码完成的类型展示在最后会相当地昂贵。现在 TypeScript 会缓存一些常见的使用部分，然后在这些操作中复用。</p><p>另一个提升代码解析的显著的改变是利用 <code>var</code> 来偶尔回避在闭包中使用 <code>let</code> 和 <code>const</code> 的开销。这会提升一部分的解析性能。</p><p>总之，我们期望许多代码库可以体会到 TypeScript 5.0 带来的速度提升，一般这个提升可以在 10% 到 20% 之间。当然这个提升取决于硬件和代码库的特性，但我们鼓励你从现在开始在你的代码库中尝试使用它。</p><p>更多的信息，可以查看如下的一些显著的优化：</p><ul><li><a href="https://github.com/microsoft/TypeScript/pull/51387" target="_blank" rel="noopener">迁移到模块</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/51682" target="_blank" rel="noopener">Node 单态化</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/51880" target="_blank" rel="noopener">Symbol 单态化</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/52170" target="_blank" rel="noopener">减少标识符大小</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/52382" target="_blank" rel="noopener">打印缓存</a></li><li><a href="https://github.com/microsoft/TypeScript/issues/52924" target="_blank" rel="noopener">var 的有限使用</a></li></ul><h2 id="破坏性更新和废弃的运行时要求" tabindex="-1">破坏性更新和废弃的运行时要求 <a class="header-anchor" href="#破坏性更新和废弃的运行时要求">🔗</a></h2><p>现在 TypeScript 的输出目标为 ECMAScript 2018 。 TypeScript 也需要一个 12.20 版本的最小的 Node 引擎。对于 Node 用户来说，这意味着 TypeScript 5.0 至少需要 Nodejs 12.20 或更高的版本。</p><h3 id="lib-d-ts-改变" tabindex="-1">lib.d.ts 改变 <a class="header-anchor" href="#lib-d-ts-改变">🔗</a></h3><p>Dom 类型的生成的改变可能会对现有的代码产生影响。尤其是某些属性会从 number 类型改为数字字面量类型，处理剪切，复制和粘贴的属性和方法移动到了别的接口中。</p><h3 id="api-破坏性变更" tabindex="-1">API 破坏性变更 <a class="header-anchor" href="#api-破坏性变更">🔗</a></h3><p>在 TypeScript 5.0 中，我们迁移到了模块，移除了一些不必要的接口类型，做了一些正确性的提升。更多有关改变内容的细节，可以查看 API 破坏性变更的<a href="https://github.com/microsoft/TypeScript/wiki/API-Breaking-Changes" target="_blank" rel="noopener">页面</a>。</p><h3 id="禁止关系操作符的隐式类型转化" tabindex="-1">禁止关系操作符的隐式类型转化 <a class="header-anchor" href="#禁止关系操作符的隐式类型转化">🔗</a></h3><p>如果你在 TypeScript 中编写了一段会引起隐式字符串到数字的类型转换的代码，那么会产生一个警告。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> func</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ns</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> ns</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // Error, possible implicit coercion</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>在 TypeScript 5.0 ，这也会被应用在关系操作符 &gt; 、 &lt; 、 &lt;= 、 &gt;= 上</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> func</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ns</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> ns</span><span style="--s-dark:#666666;--s-light:#999999;"> &gt;</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // Now also an error</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>如果你希望这么做的话，你可以通过 + 来显示地将一个操作数转为数字：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> func</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ns</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ns</span><span style="--s-dark:#666666;--s-light:#999999;"> &gt;</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span><span style="--s-dark:#666666;--s-light:#999999;">;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // OK</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这个正确的<a href="https://github.com/microsoft/TypeScript/pull/52048" target="_blank" rel="noopener">改进</a>由 <a href="https://github.com/Andarist" target="_blank" rel="noopener">Mateusz Burzyński</a> 贡献。</p><h3 id="枚举修复" tabindex="-1">枚举修复 <a class="header-anchor" href="#枚举修复">🔗</a></h3><p>自从 TypeScript 发布以来，在枚举方面一直有奇怪的现象。在 5.0 中，我们修复了这些问题的一部分，以及减少你可以定义的各种枚举所需要理解的概念的数量。</p><p>在这之中，你可以会主要遇到两个新的错误。第一个是现在如果将一个域外的字面量给到一个枚举，那么跟预期一样产生错误：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">enum</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> SomeEvenDigit</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Zero</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Two</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  Four</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 4</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Now correctly an error</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">m</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">SomeEvenDigit</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>另一个是带有由数字和非直接引用字符串的值定义的的枚举会错误地创建一个所有枚举项都是数字的枚举：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">enum</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Letters</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  A</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">enum</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Numbers</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  one</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">,</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  two</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Letters</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">A</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Now correctly an error</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">t</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> Numbers</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">two</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>可以<a href="https://github.com/microsoft/TypeScript/pull/50528" target="_blank" rel="noopener">在此</a>查看相关变更的更多细节。</p><h3 id="在-experimentaldecorators-标志下对带有参数装饰器的构造器进行更准确地类型检查" tabindex="-1">在 <code>--experimentalDecorators</code> 标志下对带有参数装饰器的构造器进行更准确地类型检查 <a class="header-anchor" href="#在-experimentaldecorators-标志下对带有参数装饰器的构造器进行更准确地类型检查">🔗</a></h3><p>TypeScript 5.0 在 <code>--experimentalDecorators</code> 下对装饰器的类型检查更加的准确。一个明显的地方就是对构造器的参数使用装饰器：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> declare const </span><span style="--s-dark:#80A665;--s-light:#59873A;">inject</span><span style="--s-dark:#666666;--s-light:#999999;">: (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">entity</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">) =&gt; (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">target</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#CB7676;--s-light:#AB5959;">object</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">key</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">symbol</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">index</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">?</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">) =&gt; </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">void</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Foo</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> C</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  constructor</span><span style="--s-dark:#666666;--s-light:#999999;">(@</span><span style="--s-dark:#80A665;--s-light:#59873A;">inject</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Foo</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> private</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这个调用会失败，因为参数 <code>key</code> 期望一个 string 或者是一个 symbol ，但是构造器参数接口的 <code>key</code> 为 undefined 。正确的做法是改变 <code>inject</code> 函数内 <code>key</code> 的类型。如果你在使用一个无法升级的库，一个合理的解决方法是把 <code>inject</code> 函数包裹在一个类型更加安全的装饰器函数内，然后对 <code>key</code> 参数使用类型断言。</p><p>更多的细节，可以查看这个 <a href="https://github.com/microsoft/TypeScript/issues/52435" target="_blank" rel="noopener">issue</a> 。</p><h3 id="废弃项以及默认值的改变" tabindex="-1">废弃项以及默认值的改变 <a class="header-anchor" href="#废弃项以及默认值的改变">🔗</a></h3><p>在 TypeScript 5.0 ，我们废弃了如下的设置以及相关的值：</p><ul><li><code>--target: ES3</code></li><li><code>--out</code></li><li><code>--noImplicitUseStrict</code></li><li><code>--keyofStringsOnly</code></li><li><code>--suppressExcessPropertyErrors</code></li><li><code>--suppressImplicitAnyIndexErrors</code></li><li><code>--noStrictGenericChecks</code></li><li><code>--charset</code></li><li><code>--importsNotUsedAsValues</code></li><li><code>--preserveValueImports</code></li><li>项目 <code>references</code> 中的 <code>prepend</code> 字段</li></ul><p>这些配置会继续支持，到 TypeScript 5.5 时会被完全的移除，但是使用这些设置仍然会收到一个警告。在 TypeScript 5.0 ，以及之后的 5.1 5.2 5.3 和 5.4 ，你可以指定 <code>ignoreDeprecations</code> 为 5.0 来忽略这些警告。我们也将很快发布一个 4.9 的补丁，允许指定 <code>ignoreDeprecations</code> 来进行更平滑的升级。除了废弃项，我们还改变了一些 TypeScript 设置来更好地提升跨平台的行为。</p><p><code>--newLine</code> ，它控制了 JavaScript 文件的行尾，如果未指定，则根据当前的操作系统进行推断。我们认为构建应该尽可能的确定，现在 windows 的记事本支持了修改换行的功能，新的默认设置为 LF 。旧的特定于操作系统的推断行为不再支持。</p><p><code>--forceConsistentCasingInFileNames</code> ，它确保了在项目内对相同文件的所有的引用是大小写一致的。现在默认的值是 true 。这有助于捕获在大小写不敏感的系统中编写的代码的差异问题。</p><p>你可以在这个 <a href="https://github.com/microsoft/TypeScript/issues/51909" target="_blank" rel="noopener">issue</a> 下留言以及查看更多的信息。</p><h2 id="下一步？" tabindex="-1">下一步？ <a class="header-anchor" href="#下一步？">🔗</a></h2><p>目前 TypeScript 5.1 早已在开发中了，在 github 上也有我们的计划。如果你迫切想要尝鲜新版本，我们鼓励你可以尝试我们的日更新版本以及 VS Code 中 JavaScript 和 TypeScript 的日更新插件。</p><p>当然，如果你选择只使用 TypeScript 新的稳定的版本，这也完全 OK 。我们希望 TypeScript 5.0 可以让让每个人更快的编码，更加享受编码。</p>`,272)])))}};export{c as categories,A as date,f as default,o as key,u as meta,y as tags,k as title,D as updated,B as wordCount};
