import{createElementBlock as e,openBlock as n,createStaticVNode as p}from"vue";const t={class:"kan-doc"},o="使用 Github Actions 来自动化部署 hexo 博客",r=1648026072,h="2022-03-23T17:01:12.000Z",g="2023-02-13T18:28:44.000Z",y=["hexo","github actions"],k=["编程"],D=6380,A={__name:"使用-Github-Actions-来自动化部署-hexo-博客",setup(l,{expose:a}){return a({frontmatter:{title:"使用 Github Actions 来自动化部署 hexo 博客",key:1648026072,date:"2022-03-23T17:01:12.000Z",updated:"2023-02-13T18:28:44.000Z",tags:["hexo","github actions"],categories:["编程"],wordCount:6380}}),(i,s)=>(n(),e("div",t,s[0]||(s[0]=[p(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>使用 <code>Github Actions</code> 来自动化部署 <code>hexo</code> 博客</p><p>之前的工作流为</p><ul><li><code>hexo new &quot;xxx&quot;</code> 生成一个 <code>md</code> 文件</li><li>编写 <code>md</code> 文件</li><li><code>hexo generate</code> 生成 <code>docs</code> 文件夹</li><li><code>git add .</code> 添加所有文件</li><li><code>git push</code> 推送到 <code>github</code> 仓库</li></ul><p>由于 <code>github</code> 仓库上设置 <code>docs</code> 文件夹为 <code>git-page</code> 的文件夹</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/23/202203231741803.gif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/23/202203231741803.gif" alt=""></a></p><p>所以推送结束之后也就完成了一次网站的更新</p><p>缺点</p><ul><li>不够 <code>high level</code> （<s>不是</s></li><li>每次都需要本地执行 <code>hexo generate</code> 进行帖子生成，严重浪费我的电脑性能 （<s>不是</s></li><li>在 <code>git push</code> 之前容易忘记先 <code>hexo generate</code></li></ul><p>本着折腾的精神，就在网上找了下 <code>github actions</code> 相关的内容，然后就开始了这一次改造（捣鼓）</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>首先我们要知道什么是 <code>github actions</code></p><p>在<a href="https://docs.github.com/cn/actions" target="_blank" rel="noopener">官方文档</a>中的解释如下：</p><blockquote><p>在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。</p></blockquote><p>这里就要扯到 <code>CI/CD</code> 的内容了</p><h2 id="ci-cd" tabindex="-1">CI/CD <a class="header-anchor" href="#ci-cd">🔗</a></h2><h3 id="ci" tabindex="-1">CI <a class="header-anchor" href="#ci">🔗</a></h3><p>全称为 <code>continuous integration</code> ，中文表达为<strong>持续集成</strong></p><p>简单点来解释就是：不断对提交到仓库的代码进行可配置化的自动的操作，比如测试，编译等等</p><h3 id="cd-delivery" tabindex="-1">CD(delivery) <a class="header-anchor" href="#cd-delivery">🔗</a></h3><p>全称为 <code>continuous delivery</code> ，中文表达为<strong>持续交付</strong></p><p><code>CD</code> 可以理解为 <code>CI</code> 的后续，或者理解为 <code>CI</code> 的一种扩展</p><p>当 <code>CI</code> 走完流程（成功）之后， <code>CD</code> 会和 <code>CI</code> 一样，通过配置自动进行操作，而作为程序员，你需要的就只是点击“按钮”进行部署。</p><h3 id="cd-development" tabindex="-1">CD(development) <a class="header-anchor" href="#cd-development">🔗</a></h3><p>全称为 <code>continuous development</code> ，中文表达为<strong>持续部署</strong></p><p>这个 <code>CD(development)</code> 可以理解为 <code>CD(delivery)</code> 的一种特化</p><p><code>CD(development)</code> 意味着无需程序员无需对部署流程进行干预了，也就是上文我们所说的按下“按钮”进行部署这个操作</p><p>一切都是自动的，当某个新特性完成之后， <code>CI</code> 进行自动测试，<code>CD(development)</code> 进行自动部署，然后用户就能够使用到有新特性的软件了。</p><p>这里放两个帖子的链接，我觉得讲的非常好：</p><ul><li><a href="https://www.cnblogs.com/tiantianbyconan/p/9713989.html" target="_blank" rel="noopener">理解 CI 和 CD 之间的区别（翻译）</a></li><li><a href="https://zhuanlan.zhihu.com/p/64174663" target="_blank" rel="noopener">CI/CD 的差异</a></li></ul><p>总而言之，无论是 <code>CI</code> ， <code>CD(delivery)</code> ， 还是 <code>CD(development)</code> ，其目的都是一样的。</p><p>就是解放程序员的双手，让程序员尽量降低参与可自动化的步骤的程度，一方面人就是容易犯错误的，另一方面可以让程序员更加专注于功能的实现。</p><h2 id="github-actions" tabindex="-1">github actions <a class="header-anchor" href="#github-actions">🔗</a></h2><p>知道了 <code>CI/CD</code> 之后， <code>github actions</code> 理解起来就容易多了</p><p>也就是说， <code>github actions</code> 使得我们能够定义工作流（或者理解为脚本），然后自动地执行，这样能够实现 <code>CI</code> 或者 <code>CD</code> ，理解为一种工具即可。</p><h2 id="编写-deploy-yml-文件" tabindex="-1">编写 deploy.yml 文件 <a class="header-anchor" href="#编写-deploy-yml-文件">🔗</a></h2><p>在 <code>github</code> 中，为了创建一个 <code>github actions</code> 工作流，需要在项目的根目录下建立一个 <code>.github</code> 文件夹</p><p>然后在里面建立 <code>workflows</code> 文件夹，在 <code>workflows</code> 就可以新建 <code>yml</code> 文件来创建一个工作流了</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241154969.gif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241154969.gif" alt=""></a></p><p>我这里建了一个 <code>deploy.yml</code></p><p>然后我们就开始编写内容</p><p>首先要明白 <code>yml</code> 的语法</p><p>这里推荐菜鸟教程的 <a href="https://www.runoob.com/w3cnote/yaml-intro.html" target="_blank" rel="noopener">YAML 入门教程</a> ，大致看一下即可</p><p>以及 <code>github actions</code> 的官方文档：<a href="https://docs.github.com/cn/actions/quickstart" target="_blank" rel="noopener">GitHub Actions 快速入门</a></p><p>了解大概之后，就可以开始编写工作流了</p><p>首先，我们期望的效果是每次 <code>push</code> 一个新的 <code>md</code></p><p><code>github actions</code> 就帮我们执行 <code>hexo generate</code> 和 <code>hexo deploy</code></p><p>然后把生成的 <code>docs</code> 文件夹提交到一个远程仓库</p><p>明白了这个过程之后，首要步骤就是告诉 <code>github actions</code> ，我要在 <code>push</code> 的时候做一些事情</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-yaml"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"># name 随便起</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> deploy</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"># 在 master 分支 push 的时候</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">on</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  push</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    branches</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      -</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> master</span></span></code></pre><p>接着需要定义 <code>jobs</code> 来告诉 <code>github actions</code> 我要干什么</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-yaml"><span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">jobs</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  # deploy 为一个任务的名字，可以随意的取</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  deploy</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    # 运行在最新的 ubuntu 容器中</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    runs-on</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> ubuntu-latest</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    steps</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      # 定义这个任务的步骤</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      -</span><span style="--s-dark:#B8A965;--s-light:#998418;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> checkout repo</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        # 使用封装好的一些 actions</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        # 这里的 actions/checkout@v3 的作用为拉取代码到工作区</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        uses</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> actions/checkout@v3</span></span>
<span class="line"><span style="--s-dark:#DBD7CAEE;--s-light:#393A34;">      </span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      # 缓存 pnpm 的包，提升构建速度</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      -</span><span style="--s-dark:#B8A965;--s-light:#998418;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> cache pnpm modules</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        uses</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> actions/cache@v3</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        with</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">          path</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> ~/.pnpm-store</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">          key</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> \${{ runner.os }}-\${{ hashFiles(&#39;**/pnpm-lock.yaml&#39;) }}</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">          restore-keys</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> |</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">            \${{ runner.os }}-</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      # 安装 pnpm</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      -</span><span style="--s-dark:#B8A965;--s-light:#998418;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> install pnpm</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        uses</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> pnpm/action-setup@v2</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        with</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">          version</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 6.32.3</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      # 安装 node</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      -</span><span style="--s-dark:#B8A965;--s-light:#998418;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> setup node</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        uses</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> actions/setup-node@v2</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        # action 可提供的配置写在 with 下</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        with</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">          node-version</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 16</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      # 安装依赖</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      -</span><span style="--s-dark:#B8A965;--s-light:#998418;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> install deps</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        # 这里为运行脚本，所以使用 run ，而不是 uses</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        run</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> |</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          pnpm install hexo-cli -g</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          pnpm install</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      # 生成文件</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      -</span><span style="--s-dark:#B8A965;--s-light:#998418;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> generate file</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        run</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> |</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          pnpm run clean</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          pnpm run build</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      # 配置 git 主要是使用 ssh 的方式来推送文件到远端仓库</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      -</span><span style="--s-dark:#B8A965;--s-light:#998418;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> set git config</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        # 注入环境变量</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        env</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">          # 注入 ssh 的私钥</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">          DEPLOY_KEY</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> \${{ secrets.DEPLOY_KEY }}</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        run</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> |</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          mkdir -p ~/.ssh/</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          echo &quot;$DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          chmod 600 ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          git config --global user.name &#39;Dedicatus546&#39; </span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          git config --global user.email &#39;1607611087@qq.com&#39;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">      # 推送到远程</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">      -</span><span style="--s-dark:#B8A965;--s-light:#998418;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> deploy</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">        run</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">          pnpm run deploy</span></span></code></pre><p>这里比较重要的是 <code>set git config</code> 这个步骤（这个名字是随便起的，主要用于描述这个步骤的功能）</p><p>因为我们在 <code>hexo</code> 的 <code>_config.yml</code> 中使用 <code>ssh</code> 的方式来对仓库进行操作的</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241507850.gif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241507850.gif" alt=""></a></p><p>如果你已经使用了 <code>ssh</code> 来进行用户验证的话，所需要的配置就很简单</p><p>首先是找到当初生成的 <code>ssh</code> 文件</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241517516.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241517516.avif" alt=""></a></p><p>当初是通过在个人设置里面配置 <code>id_rsa.pub</code> （公钥），然后本地的 <code>id_rsa</code> （私钥）就可以配合完成 <code>ssh</code> 验证</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241521041.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241521041.avif" alt=""></a></p><p>对于上述 <code>yml</code> 文件中的这一段脚本</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-yaml"><span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">run</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> |</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">  mkdir -p ~/.ssh/</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">  echo &quot;$DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">  chmod 600 ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--s-dark:#C98A7D;--s-light:#B56959;">  ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span></code></pre><p>可以理解为在容器里面配置了我们的私钥，这样就有了和本机一样的环境了</p><p>所以这里需要解决的就是如何把私钥安全的暴露给 <code>github actions</code> 了</p><p>直接写在脚本里面？当然可以，但是不安全，如果你的项目忘记设置为私有，那么别人就可以通过直接在 <code>yml</code> 拿到你的私钥</p><p>这样意味着就能控制你的 <code>github</code> 仓库了，后果非常的恐怖</p><p>所以这里正确的解决办法是进入项目的 <code>settings</code> 中，在 <code>secrets</code> 中添加一些变量，如下图所示</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241525121.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241525121.avif" alt=""></a></p><p>其中 <code>name</code> 可以随便起，但是要记住，这里我起的是 <code>DEPLOY_KEY</code> ， <code>value</code> 就对应你的 <code>ssh</code> 的私钥</p><p>然后回到 <code>yml</code> 代码中，就可以通过 <code>secrets.DEPLOY_KEY</code> 拿到对应的值了</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-yml"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">-</span><span style="--s-dark:#B8A965;--s-light:#998418;"> name</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> set git config</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  # 注入环境变量</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">  env</span><span style="--s-dark:#666666;--s-light:#999999;">:</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">    DEPLOY_KEY</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> \${{ secrets.DEPLOY_KEY }}</span></span></code></pre><p>都配置完成之后，我们就可以提交 <code>.github</code> 目录到远端仓库，这样 <code>github actions</code> 就会自动读取并运行了</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241533270.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241533270.avif" alt=""></a></p><p>点击去就能够查看每个步骤的运行情况了</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241556005.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241556005.avif" alt=""></a></p><p>PS：如果之前未使用过 <code>hexo</code> 的 <code>deploy</code> 功能的，需要先安装 <code>hexo-deployer-git</code> 依赖，配置的 <code>deploy</code> 才能够生效</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241557613.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/03/24/202203241557613.avif" alt=""></a></p><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>经过一番折腾，现在我们的工作流就变成如下了：</p><ul><li>编写 <code>md</code> 文件</li><li>提交这个 <code>md</code> 文件到远端 <code>blog</code> 仓库</li><li><code>github actions</code> 自动部署，提交到 <code>Dedicatus546.github.io</code> 这个仓库</li><li><code>Dedicatus546.github.io</code> 为 github-page 仓库，也会通过 <code>github actions</code> 部署</li></ul><p>这样就完成了一次网站的更新，可以看到我真正参与的只有前面两个步骤，也是核心的步骤，即写 <code>md</code> 文件</p><p>原来我是一个仓库同时存放 <code>md</code> 源码以及生成的 <code>docs</code> 文件夹的</p><p>这次给拆成了两个仓库，其中一个就是 <code>github-page</code> ，而 <code>md</code> 源码的仓库重新建了一个</p><p>这样提交的时候就不会和生成的 <code>html</code> ， <code>css</code> 等混在一起，对于查看每次提交的 <code>md</code> 的 <code>diff</code> 情况来说是非常友好了</p><p>而且 <code>md</code> 仓库可以设为私有，或者多分支写帖子等，都对 <code>github-page</code> 仓库没有影响 （由于设置了只在 <code>master</code> 分支上执行，所以其他的分支提交到远端不会触发 <code>github actions</code> ）</p><p>总而言之，提升还是非常明显的， 白嫖 <code>github</code> 的机器来打包，何乐而不为呢？</p>`,86)])))}};export{k as categories,h as date,A as default,r as key,y as tags,o as title,g as updated,D as wordCount};
