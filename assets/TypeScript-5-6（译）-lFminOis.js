import{createElementBlock as n,openBlock as t,createStaticVNode as p}from"vue";import{c as e}from"./app-C7bQa6bS.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const l={class:"kan-doc"},m="TypeScript 5.6（译）",E=["TypeScript","JavaScript"],v=["编程"],F="2024-09-11T18:33:01.000Z",S="2024-09-13T11:57:46.000Z",x=1726050781,T=18621,q=[{property:"og:title",content:"TypeScript 5.6（译）"},{name:"twitter:title",content:"TypeScript 5.6（译）"}],I={__name:"TypeScript-5-6（译）",setup(i,{expose:a}){return a({frontmatter:{title:"TypeScript 5.6（译）",tags:["TypeScript","JavaScript"],categories:["编程"],date:"2024-09-11T18:33:01.000Z",updated:"2024-09-13T11:57:46.000Z",key:1726050781,wordCount:18621,meta:[{property:"og:title",content:"TypeScript 5.6（译）"},{name:"twitter:title",content:"TypeScript 5.6（译）"}]}}),e({title:"TypeScript 5.6（译）",meta:[{property:"og:title",content:"TypeScript 5.6（译）"},{name:"twitter:title",content:"TypeScript 5.6（译）"}]}),(h,s)=>(t(),n("div",l,s[0]||(s[0]=[p(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>原文地址：<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/" target="_blank" rel="noopener">Announcing TypeScript 5.6</a></p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><h2 id="禁止空值和真值检查" tabindex="-1">禁止空值和真值检查 <a class="header-anchor" href="#禁止空值和真值检查">🔗</a></h2><p>你可能写过一个忘记调用 <code>.test(...)</code> 的正则表达式：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">0x</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">0-9a-f</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 这个代码块总是会执行到</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>又或者偶然间将 <code>&gt;=</code> （大于或等于操作符）写成了 <code>=&gt;</code> （这会创建一个箭头函数）：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 这个代码块总是会执行到</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>又或者你可能尝试过使用 <code>??</code> 来指定一个默认值，但是混淆了诸如 <code>&lt;</code> 比较操作符和 <code>??</code> 操作符的优先级：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> options</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> strictness</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">strict</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">loose</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">strictness</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">loose</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    value</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> options</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">max</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ??</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 100</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 这里会被解析成 (value &lt; options.max) ?? 100</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>又或者在一个复杂的表达式中放错括号的位置：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">primaryValue</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">strict</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">secondaryValue</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">strict</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">primaryValue</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">loose</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">secondaryValue</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">loose</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">))</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //                           ^^^^ 👀 是否少了一个 &#39;)&#39;?</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这些例子都没有遵循作者的意图，但他们都是合法的 JavaScript 代码。先前的 TypeScript 会静默地接受这些例子。</p><p>但通过一个小实验，我们发现许许多多的 bug 都是由上文标记为可疑的例子所造成的。在 TypeScript 5.6 中，当编译器从语法上发现一个真值检查和空检查时，它会报错，这种检查总是会以特定的方式进行评估。所以在上面的例子中，你会开始看到如下错误：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#C4704F;--s-light:#AB5E3F;">0x</span><span style="--s-dark:#666666;--s-light:#999999;">[</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">0-9a-f</span><span style="--s-dark:#666666;--s-light:#999999;">]</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">/</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//  ~~~~~~~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// error: This kind of expression is always truthy.</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 0</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//  ~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// error: This kind of expression is always truthy.</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> options</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> strictness</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">strict</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> | </span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">loose</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">strictness</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ===</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">loose</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    value</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> +</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;"> &lt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> options</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">max</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ??</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 100</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //     ~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // error: Right operand of ?? is unreachable because the left operand is never nullish.</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">primaryValue</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">strict</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">secondaryValue</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">strict</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">primaryValue</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">loose</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#80A665;--s-light:#59873A;"> isValid</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">secondaryValue</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">loose</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">))</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  //                    ~~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // error: This kind of expression is always truthy.</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>可以通过开启 ESLint 的 <code>no-constant-binary-expression</code> 来达到相似的结果，你也可以在他们的<a href="https://eslint.org/blog/2022/07/interesting-bugs-caught-by-no-constant-binary-expression/" target="_blank" rel="noopener">博客帖子</a>中查看相关的成果。 TypeScript 执行的新的检查不会和 ESLint 的规则完美的重叠，我们相信在 TypeScript 自身中内置这些检查具有很大的价值。</p><p>注意某些表达式仍然会被允许，即使他们总是为真值或者空值。具体来说是 <code>true</code> ， <code>false</code> ， <code>0</code> 和 <code>1</code> ，这些值仍然会被允许，比如如下的代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">while</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">true</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  doStuff</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#80A665;--s-light:#59873A;">something</span><span style="--s-dark:#666666;--s-light:#999999;">())</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    break</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  doOtherStuff</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>下面这段代码非常惯用并且是有用的：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">true</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> ||</span><span style="--s-dark:#80A665;--s-light:#59873A;"> inDebuggingOrDevelopmentEnvironment</span><span style="--s-dark:#666666;--s-light:#999999;">())</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这段代码对迭代代码或者调试代码都非常有用。</p><p>如果你好奇它的实现或者它捕获的 bug 类型，可以查看这个实现了该特性的 <a href="https://github.com/microsoft/TypeScript/pull/59217" target="_blank" rel="noopener">PR</a> 。</p><h2 id="帮助迭代的函数" tabindex="-1">帮助迭代的函数 <a class="header-anchor" href="#帮助迭代的函数">🔗</a></h2><p>JavaScript 有一个可迭代（就是我们可以通过调用 <code>[Symbol.iterator]()</code> 来得到一个迭代器从而进行迭代）和迭代器（就是有一个 <code>next</code> 方法，当我们在迭代的时候，调用这个方法就可以尝试取得下一个值）的概念。总之，通常情况下，当你将它们放在一个 for-of 循环中，或者通过 <code>[...spread]</code> 展开它们到一个新数组的时候你并不会去思考这些概念。但 TypeScript 确实会通过 <code>Iterable</code> 和 <code>Iterator</code> 类型（甚至是 <code>IterableIterator</code> ，即可迭代的迭代器）来对这些概念进行建模。这些类型描述了让对象可用于像 for-of 结构所需的最小成员集合。</p><p><code>Iterable</code> （和 <code>IterableIterator</code>）很棒，因为它们可以被用在 JavaScript 的各种地方，但一些人发现它们自身缺少了像 <code>Array</code> 的 <code>map</code> 、 <code>filter</code> 、以及某种原因的 <code>reduce</code> 方法。这也是为什么最近 ECMAScript 提出了一个相关的提案来将 <code>Array</code> 上的许多方法加到大多数由 JavaScript 生成的 <code>IterableIterator</code> 对象上。</p><p>例如，每个生成器产生的对象会有一个 <code>map</code> 和一个 <code>take</code> 方法。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">*</span><span style="--s-dark:#80A665;--s-light:#59873A;"> positiveIntegers</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">  let</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> i</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 1</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  while</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">true</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    yield</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> i</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    i</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">++</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> evenNumbers</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> positiveIntegers</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">map</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> *</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 2</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Output:</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//    2</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//    4</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//    6</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//    8</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//   10</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">for</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> of</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> evenNumbers</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">take</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">5</span><span style="--s-dark:#666666;--s-light:#999999;">))</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">value</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这对 <code>Map</code> 和 <code>Set</code> 上的 <code>keys</code> 、 <code>values</code> 和 <code>entries</code> 方法也是一样的。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> invertKeysAndValues</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">K</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> V</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">map</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Map</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">K</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">V</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;):</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Map</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">V</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> K</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Map</span><span style="--s-dark:#666666;--s-light:#999999;">(</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">    map</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">entries</span><span style="--s-dark:#666666;--s-light:#999999;">().</span><span style="--s-dark:#80A665;--s-light:#59873A;">map</span><span style="--s-dark:#666666;--s-light:#999999;">(([</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">k</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> v</span><span style="--s-dark:#666666;--s-light:#999999;">])</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">v</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> k</span><span style="--s-dark:#666666;--s-light:#999999;">])</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  );</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>你也可以继承 <code>Iterator</code> 对象：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> * 一个提供无限的 0 的流</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> */</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Zeroes</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Iterator</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">number</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  next</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    return</span><span style="--s-dark:#666666;--s-light:#999999;"> { </span><span style="--s-dark:#B8A965;--s-light:#998418;">value</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">0</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#B8A965;--s-light:#998418;">done</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">false</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> as</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> const</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">zeroes</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> new </span><span style="--s-dark:#80A665;--s-light:#59873A;">Zeroes</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 将流转化为无限的 1 </span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">ones</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> zeroes</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">map</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">x</span><span style="--s-dark:#666666;--s-light:#999999;"> =&gt;</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> x</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> + </span><span style="--s-dark:#4C9A91;--s-light:#2F798A;">1</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>你可以使用 <code>Iterator.from</code> 将任何已经存在的 <code>Iterable</code> 和 <code>Iterator</code> 改写为这种类型。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">Iterator</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">from</span><span style="--s-dark:#666666;--s-light:#999999;">(...).</span><span style="--s-dark:#80A665;--s-light:#59873A;">filter</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">someFunction</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>只要在一个较新的 JavaScript 运行时上，这些新方法就可以正常工作，你也对这些新的 <code>Iterator</code> 对象可以使用垫片。</p><p>现在，我们需要谈一谈命名。</p><p>前面我们提到 TypeScript 有 <code>Iterable</code> 和 <code>Iterator</code> 两个类型，然而，就如我们提到的那样，这些行为有点像“协议”，以此来确保某些操作可以正常工作。这意味着在 TypeScript 中，不是所有的 <code>Iterable</code> 和 <code>Iterator</code> 对象都有那些我们在上面提到的方法。</p><p>但仍然会有一个新的运行时的值，名为 <code>Iterator</code> 。你可以引用 <code>Iterator</code> ，以及 <code>Iterator.prototype</code> ，将其作为 JavaScript 中实际的值。这有点别扭，因为 TypeScript 已经用 <code>Iterator</code> 定义了自身用于纯粹地类型检查。所以由于这个不幸命名冲突， TypeScript 需要引入一个另外的类型来描述这些原生或者说内置的可迭代的迭代器。</p><p>TypeScript 5.6 引入了一个新的类型，名为 <code>IteratorObject</code> 。它的定义如下：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> IteratorObject</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> TReturn</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> unknown</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> TNext</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> unknown</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Iterator</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> TReturn</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> TNext</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">iterator</span><span style="--s-dark:#666666;--s-light:#999999;">]():</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> IteratorObject</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> TReturn</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> TNext</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>许多内置的集合和方法由 <code>IteratorObject</code> 生成其子类型（比如 <code>ArrayIterator</code> 、 <code>SetIterator</code> 、 <code>MapIterator</code> 等等），<code>lib.d.ts</code> 中的 JavaScript 核心和 DOM 类型，以及 <code>@types/node</code> ，都已经更新了这些新的类型。</p><p>类似地，为了保持对等性，我们增加一个 <code>AsyncIteratorObject</code> 类型。 <code>AsyncIterator</code> 还未在 JavaScript 的运行时中存在，它让 <code>AsyncIterable</code> 对象拥有同样的方法，但它已在一个活动的<a href="https://github.com/tc39/proposal-async-iterator-helpers" target="_blank" rel="noopener">提案</a>中了，所以这个类型是为了它而提前准备的。</p><p>感谢 <a href="https://github.com/bakkot" target="_blank" rel="noopener">Kevin Gibbons</a> 贡献了这些类型，同时他也是该<a href="https://github.com/tc39/proposal-iterator-helpers" target="_blank" rel="noopener">提案</a>额度共同作者之一。</p><h2 id="严格的内置迭代器检查（-strictbuiltiniteratorreturn-选项）" tabindex="-1">严格的内置迭代器检查（ --strictBuiltinIteratorReturn 选项） <a class="header-anchor" href="#严格的内置迭代器检查（-strictbuiltiniteratorreturn-选项）">🔗</a></h2><p>当你在一个 <code>Iterator&lt;T, TReturn&gt;</code> 上调用 <code>next()</code> 方法时，它会返回一个带有 <code>value</code> 和 <code>done</code> 属性的对象，这个对象由 <code>IteratorResult</code> 类型建模。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">type</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> IteratorResult</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> TReturn</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> any</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> IteratorYieldResult</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> |</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> IteratorReturnResult</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">TReturn</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> IteratorYieldResult</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">TYield</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  done</span><span style="--s-dark:#CB7676;--s-light:#AB5959;">?</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#CB7676;--s-light:#AB5959;">false</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  value</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">TYield</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> IteratorReturnResult</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">TReturn</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  done</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#CB7676;--s-light:#AB5959;">true</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  value</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">TReturn</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这里的命名受到生成器函数工作方式的启发。生成器函数可以 <code>yield</code> 值，以及 <code>return</code> 一个最终的值，但两者之间的类型可以是不相关的。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-javascript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> abc123</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  yield</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">a</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  yield</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">b</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  yield</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">c</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  return</span><span style="--s-dark:#4C9A91;--s-light:#2F798A;"> 123</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> iter</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> abc123</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">iter</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">next</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // { value: &quot;a&quot;, done: false }</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">iter</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">next</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // { value: &quot;b&quot;, done: false }</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">iter</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">next</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // { value: &quot;c&quot;, done: false }</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">iter</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">next</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // { value: 123, done: true }</span></span></code></pre><p>对于新的 <code>IteratorObject</code> 类型，在安全实现它时我们遇到一些困难。同时，由于 <code>TReturn</code> 为 <code>any</code> （默认情况下）<code>IteratorResult</code> 在过去都是不安全的。比如，假设我们有一个 <code>IteratorResult&lt;string, any&gt;</code> 类型。如果我们最终拿到这个类型的值时，我们会得到一个 <code>string | any</code> 类型，也就是 <code>any</code> 类型。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">*</span><span style="--s-dark:#80A665;--s-light:#59873A;"> uppercase</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">iter</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Iterator</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  while</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">true</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const </span><span style="--s-dark:#666666;--s-light:#999999;">{</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> done</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> iter</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">next</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    yield</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">toUppercase</span><span style="--s-dark:#666666;--s-light:#999999;">();</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;"> // 忘记第一时间检查 done 并且 写错了 toUpperCase 方法</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">done</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      return</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>现如今对于每个 <code>Iterator</code> 来说，在不引入破坏性变更的情况下想要修复这个问题很难，但我们至少可以通过创建大多数的 <code>IteratorObjects</code> 来修复它。</p><p>TypeScript 5.6 引入了一个新的固有的类型，名为 <code>BuiltinIteratorReturn</code> 以及一个新的 <code>--strict</code> 模式的标志 <code>--strictBuiltinIteratorReturn</code> 。 每当 <code>IteratorObject</code> 用在诸如 <code>lib.d.ts</code> 这些位置的时候，它们总是会为 <code>TReturn</code> 使用 <code>BuiltinIteratorReturn</code> 类型（你也会更频繁地看到更多具体的类型，比如： <code>MapIterator</code> 、 <code>ArrayIterator</code> 、 <code>SetIterator</code> ）。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MapIterator</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#80A665;--s-light:#59873A;"> IteratorObject</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> BuiltinIteratorReturn</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> unknown</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">iterator</span><span style="--s-dark:#666666;--s-light:#999999;">]():</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MapIterator</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">T</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">interface</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Map</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">K</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> V</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  /**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">   * Returns an iterable of key, value pairs for every entry in the map.</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">   */</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  entries</span><span style="--s-dark:#666666;--s-light:#999999;">():</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MapIterator</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;[</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">K</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> V</span><span style="--s-dark:#666666;--s-light:#999999;">]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  /**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">   * Returns an iterable of keys in the map</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">   */</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  keys</span><span style="--s-dark:#666666;--s-light:#999999;">():</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MapIterator</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">K</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  /**</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">   * Returns an iterable of values in the map</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">   */</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">  values</span><span style="--s-dark:#666666;--s-light:#999999;">():</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> MapIterator</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">V</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>默认情况下 <code>BuiltinIteratorReturn</code> 为 <code>any</code> ，但当开启 <code>--strictBuiltinIteratorReturn</code> 后（或者通过 <code>--strict</code>），它就为 <code>undefined</code> 。在这个新模式下面，如果我们使用 <code>BuiltinIteratorReturn</code> ，之前的例子在现在就会正确地报错：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">*</span><span style="--s-dark:#80A665;--s-light:#59873A;"> uppercase</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">iter</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">Iterator</span><span style="--s-dark:#666666;--s-light:#999999;">&lt;</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">, </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">BuiltinIteratorReturn</span><span style="--s-dark:#666666;--s-light:#999999;">&gt;)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">  while</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#4D9375;--s-light:#1E754F;">true</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    const </span><span style="--s-dark:#666666;--s-light:#999999;">{</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> done</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> iter</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">next</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    yield</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> value</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">toUppercase</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //    ~~~~~ ~~~~~~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    // error! ┃      ┃</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //        ┃      ┗━ Property &#39;toUppercase&#39; does not exist on type &#39;string&#39;. Did you mean &#39;toUpperCase&#39;?</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //        ┃</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">    //        ┗━ &#39;value&#39; is possibly &#39;undefined&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">    if</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">done</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">      return</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  }</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>通常情况下你会在 <code>lib.d.ts</code> 文件中的各处看到配对的 <code>BuiltinIteratorReturn</code> 和 <code>IteratorObject</code> 。一般来说，我们建议在你的代码中尽可能地明确 <code>TReturn</code> 的类型。</p><p>更多信息，你可以在该 <a href="https://github.com/microsoft/TypeScript/pull/58243" target="_blank" rel="noopener">PR</a> 中阅读该特性。</p><h2 id="支持随意的模块标识符" tabindex="-1">支持随意的模块标识符 <a class="header-anchor" href="#支持随意的模块标识符">🔗</a></h2><p>JavaScript 允许模块导出绑定到无效的标识符名称，比如字符串字面量：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">banana</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">🍌</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> banana</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> as</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> &quot;🍌&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> };</span></span></code></pre><p>同样，它允许模块使用这些随意的名称来导入，将它们绑定到合法的标识符上：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span><span style="--s-dark:#C98A7D;--s-light:#B56959;"> &quot;🍌&quot;</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> as</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> banana</span><span style="--s-dark:#666666;--s-light:#999999;"> }</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./foo</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> eat</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">food</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">string</span><span style="--s-dark:#666666;--s-light:#999999;">)</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">  console</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">log</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">Eating</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> food</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">eat</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">banana</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span></code></pre><p>这似乎很花里胡哨，但它与其他语言在互操作性上有作用（通常通过 JavaScript 或者 WebAssembly 的边界代码），因为其他的语言可能对合法的标识符集合存在不同的规则。它也对生成代码的工作有帮助，比如 esbuild 的 <a href="https://esbuild.github.io/api/#inject" target="_blank" rel="noopener">inject</a> 特性。</p><p>TypeScript 5.6 现在允许在代码中使用这些随意的模块标识符。感谢 <a href="https://github.com/evanw" target="_blank" rel="noopener">Evan Wallace</a> 的<a href="https://github.com/microsoft/TypeScript/pull/58640" target="_blank" rel="noopener">贡献</a>。</p><h2 id="–nouncheckedsideeffectimports-选项" tabindex="-1">–noUncheckedSideEffectImports 选项 <a class="header-anchor" href="#–nouncheckedsideeffectimports-选项">🔗</a></h2><p>在 JavaScript 中，可能存在导入一个没有实际导入任何值的模块的场景：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">some-module</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>这个导入通常称为副作用导入，因为它们提供的有用的行为只有执行一些副作用（比如注册一个全局变量，或者为一个原型 <code>prototype</code> 添加一个垫片）。</p><p>在 TypeScript 中，这个语法是一个怪癖：如果导入可以解析为一个有效的源文件的话， TypeScript 会加载和检查这个文件，相反，如果源文件无法被找到，那么 TypeScript 会静默地忽略这个导入 。</p><p>这是一个奇怪的行为，但它是部分来源于 JavaScript 生态系统中的建模模式。比如，这个语法会在捆绑器中用于特殊的加载器来加载 CSS 或其他资源。捆绑器可能会配置为一种你可以通过编写类似如下的代码来引入具体的 <code>.css</code> 文件的方式：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">./button-component.css</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Button</span><span style="--s-dark:#666666;--s-light:#999999;">()</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // ...</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>这种方式仍然掩盖了副作用导入的潜在拼写错误。这也是为什么 TypeScript 5.6 引入了一个新的名为 <code>--noUncheckedSideEffectImports</code> 的编译选项来捕获这些情况。当开启 <code>--noUncheckedSideEffectImports</code> ， TypeScript 现在如果无法找到副作用导入的源文件的话将会报错。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">oops-this-module-does-not-exist</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// error: Cannot find module &#39;oops-this-module-does-not-exist&#39; or its corresponding type declarations.</span></span></code></pre><p>当开启这个选项时，一些正常运行的代码可能现在就会得到一个错误，就如同上面提到的 CSS 的例子。为了解决这个问题，那些只需为资源编写副作用导入的用户可以通过通配符来编写一个范围模块声明，从而得到更好地体验。这个声明可以写在一个全局的文件，就如同下面代码所示：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// ./src/globals.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// Recognize all CSS files as module imports.</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">declare</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> module</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">*.css</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span></code></pre><p>事实上，在你的项目里可能早已存在这样一个文件。比如，只需一些诸如 <code>vite init</code> 的命令会创建一个相似的 <code>vite-env.d.ts</code> 文件。</p><p>虽然这个选项在目前是默认关闭的，但我们鼓励用户去尝试使用它。</p><p>更多的信息，可以查看相关的<a href="https://github.com/microsoft/TypeScript/pull/58941" target="_blank" rel="noopener">实现</a>。</p><h2 id="–nocheck-选项" tabindex="-1">–noCheck 选项 <a class="header-anchor" href="#–nocheck-选项">🔗</a></h2><p>TypeScript 5.6 引入了一个新的编译选项 <code>--noCheck</code> ，它允许对所有的输入文件跳过类型。这避免了对生成文件进行必要的任何语义分析所带来的不必要的类型检查。</p><p>一种实现该功能的设想是从类型检查中分离 JavaScript 文件的生成过程，这样这两个过程就能单独的阶段执行。比如，当迭代代码的时候，你可以执行 <code>tsc --noCheck</code> ，接着执行 <code>tsc --noEmit</code> 来执行彻底地类型检查。你也可以并行地执行两个任务，即使是在 <code>--watch</code> 模式下，不过需要注意，如果你真的需要在同一时间执行话，你可能需要指定一个单独的 <code>--tsBuildInfoFile</code> 路径。</p><p><code>--noCheck</code> 对以类似方式来生成声明文件的过程也很有用。在一个符合 <code>--isolatedDeclarations</code> 的项目上指定了 <code>--noCheck</code> ， TypeScript 可以在没有通过类型检查的情况下快速地生成声明文件。生成的声明文件纯粹地依赖于快速的语法转换。</p><p>注意在指定了 <code>--noCheck</code> 但是没有使用 <code>--isolatedDeclarations</code> 的情况下， TypeScript 会仍然执行尽可能多的必要的类型检查来生成 <code>.d.ts</code> 文件。从这个意义上说， <code>--noCheck</code> 更像是一个误称，然而，该过程比完整的类型检查更加惰性，只会计算未注解声明的类型。这个速度比一个全量的类型检查更快。</p><p><code>noCheck</code> 也可以作为 TypeScript 的 API 的一个标准选项。在内部， <code>transpileModule</code> 和 <code>transpileDeclaration</code> 早已使用 <code>noCheck</code> 来加快处理速度（至少从 TypeScript 5.5 就是这样了）。现在任何的构建工具都应该可以利用这个选项，采取各种自定义策略来协调和加速构建过程。</p><p>更多的信息，查看 TypeScript 5.5 中内部启动的 noCheck 选项完成的<a href="https://github.com/microsoft/TypeScript/pull/58364" target="_blank" rel="noopener">工作</a>，以及使它可在命令行上公开访问的相关<a href="https://github.com/microsoft/TypeScript/pull/58839" target="_blank" rel="noopener">工作</a>。</p><h2 id="允许-build-过程中出现错误" tabindex="-1">允许 --build 过程中出现错误 <a class="header-anchor" href="#允许-build-过程中出现错误">🔗</a></h2><p>TypeScript 中的项目引用的概念允许你将代码库组织成多个项目以及为每个项目创建依赖。执行带有 <code>--build</code> 模式的 TypeScript 编译器（简称 <code>tsc -b</code> ）是构建跨项目以及计算那些项目和文件需要编译的内置的实际执行方式。</p><p>先前，使用 <code>--build</code> 模式会假设开启 <code>--noEmitOnError</code> 选项，这样在遇到任何错误的时候会立即停止构建。这意味着如果任何“上游”的项目出现构建错误，那么“下游”项目将永远无法检查和构建。理论上，这是一个非常合理（ cromulent ，来自美国动画片《<a href="https://zh.wikipedia.org/wiki/%E8%BE%9B%E6%99%AE%E6%A3%AE%E4%B8%80%E5%AE%B6" target="_blank" rel="noopener">辛普森一家</a>》（The Simpsons），在剧中被刻意发明出来，意为“合适的”或“可接受的”，来自 ChatGPT 解释）的方法，如果一个项目出现错误，那么它的依赖不一定处在一致的状态。</p><p>现实中，这种有点死板的方式使得类似升级的过程变得痛苦。比如；如果项目 b 依赖了项目 a ，更熟悉项目 b 的人在他们的依赖升级之前无法主动地升级他们的代码。他们在第一步升级项目 A 就被阻碍了。</p><p>从 TypeScript 5.6 开始，即使在依赖的构建过程中出现错误 <code>--build</code> 模式会继续构建项目。在发现错误时，这些错误会被全部记录下来，然后尽最大努力输出文件，但是构建流程则会在特定的项目上继续完成。</p><p>如果你想要在项目一出错的情况下停止构建，你可以使用新的标志，名为 <code>--stopOnBuildErrors</code> 。这对在 CI 环境中执行的构建，或者迭代一个重依赖其他项目的项目来说很有帮助。</p><p>需要注意的是，为了实现这个功能， TypeScript 现在总是会为任何带有 <code>--build</code> （即使未指定 <code>--incremental</code> 或者 <code>--composite</code> ）的项目输出一个 <code>.tsbuildinfo</code> 文件。这是为了跟踪 <code>--build</code> 的调用情况以及接下来需要执行哪些工作的状态。</p><p>可以在这个 <a href="https://github.com/microsoft/TypeScript/pull/58838" target="_blank" rel="noopener">PR</a> 下阅读有关的变更。</p><h2 id="编辑器中的区域优先诊断" tabindex="-1">编辑器中的区域优先诊断 <a class="header-anchor" href="#编辑器中的区域优先诊断">🔗</a></h2><p>当询问 TypeScript 的语言服务对一个文件的诊断（比如错误，建议，以及弃用）时，它通常需要检查整个文件。大部分情况下这很棒，但在极其巨大的文件下会造成延迟。这会令人沮丧因为修复一个拼写错误应该是一个快速的操作才对，但是在一个足够大的文件中却花费了数秒。</p><p>为了解决它， TypeScript 5.6 引入了一个新的特性，名为区域优先诊断（region-prioritized diagnostics）或者区域优先检查（ region-prioritized checking）。编辑器现在也可以提供给定文件的相关区域，而不是只请求诊断一组文件，这通常是用户当前文件的可见区域。 TypeScript 语言服务就可以选择提供两组诊断集：一种是对区域，另一种是对完整的文件。这允许编辑操作可以在大文件中更快地响应，这样你就不用等待那些红色错误消失了。</p><p>对于一些特定的成员，在我们的 <a href="https://github.com/microsoft/TypeScript/blob/7319968e90600102892a79142fb804bcbe384160/src/compiler/checker.ts" target="_blank" rel="noopener">checker.ts</a> 测试中，一个完全的语义诊断响应需要耗时 3300 毫秒。相比之下，基于区域响应的诊断的响应只需耗时 143 毫秒。虽然剩余的整个文件的响应花费了大约 3200 毫秒，但这对快速编辑来说已经是巨大的差距了。</p><p>这个特性也包含了相当一部分的工作，包括让整个诊断报告的使用体验更加一致。由于我们的类型检查器会利用缓存来避免额外工作的方式，同个类型间的连续的检查会有不同的（通常更短）错误信息。从技术上来说，即使是在这个特性之前，惰性的无序检查会造成程序在编辑器的两个位置报告不同的诊断，但我们不想加剧这个问题。随着最近工作的进行，我们已经解决了许多关于这些错误不一致性的问题。</p><p>目前，这个功能可以在 VSCode 中使用 TypeScript 5.6 之后的版本来获取。</p><p>更多细节的信息，请查看此 <a href="https://github.com/microsoft/TypeScript/pull/57842" target="_blank" rel="noopener">PR</a> 。</p><h2 id="细粒度的提交字符" tabindex="-1">细粒度的提交字符 <a class="header-anchor" href="#细粒度的提交字符">🔗</a></h2><p>TypeScript 的语言服务现在为每个完成项提供它自身的提交字符。提交字符是具体的字符，当键入的时候，会自动完成当前建议的完成项。</p><p>这意味着随着时间推移当你键入某些字符时，你的编辑器现在会更加频繁地提交当前建议的完成项。比如，有如下的代码：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">declare let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">food</span><span style="--s-dark:#666666;--s-light:#999999;">: {</span></span>
<span class="line"><span style="--s-dark:#80A665;--s-light:#59873A;">    eat</span><span style="--s-dark:#666666;--s-light:#999999;">(): </span><span style="--s-dark:#5DA994;--s-light:#2E8F82;">any</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">let </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">f</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#666666;--s-light:#999999;"> (</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">foo</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">/**/</span></span></code></pre><p>如果光标在 <code>/**/</code> 上，我们无法清楚地知道我们编写的代码是像 <code>let f = (food.eat())</code> 又或者是 <code>let f = (foo, bar) =&gt; foo + bar</code> 。你可以想象下编辑器能够根据我们接下来键入的字符来执行不同的自动完成。举个例子，如果我们键入了 <code>.</code> 字符，我们可能想要编辑器自动以变量 <code>food</code> 来完成，但如果我们键入的是 <code>,</code> 字符，我们可能是在编写一个箭头函数的参数。</p><p>不幸的是，先前 TypeScript 只是通知编辑器当前文本可能定义一个新的参数名称，以至于没有提交字符是安全的，所以输入一个 <code>.</code> 不会做任何事，即使这件事是“明显”的，即编辑器应该用 <code>food</code> 单词来进行自动完成。</p><p>TypeScript 现在会为每个完成项明确地列出哪些字符可以安全地提交。虽然这不会立即改变你的日常使用经验，但是支持这些提交字符地编辑器可以随着时间的推移看到行为上的改进。为了马上观察到这些改进，你可以在 VSCode <a href="https://code.visualstudio.com/insiders/" target="_blank" rel="noopener">预览版</a>中使用 TypeScript 的 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next" target="_blank" rel="noopener">nightly</a> 扩展。在上述代码中输入一个 <code>.</code> 就会以 <code>food</code> 进行自动完成了。</p><p>更多的信息，查看这个添加了提交字符的 <a href="https://github.com/microsoft/TypeScript/pull/59339" target="_blank" rel="noopener">PR</a> ，以及根据上下文来对提交字符进行调整的 <a href="https://github.com/microsoft/TypeScript/pull/59523" target="_blank" rel="noopener">PR</a> 。</p><h2 id="自动导入的排除规则" tabindex="-1">自动导入的排除规则 <a class="header-anchor" href="#自动导入的排除规则">🔗</a></h2><p>TypeScript 的语言服务现在允许指定一个正则列表来过滤掉某些说明符的自动导入建议。比如，如果你想要排除一个包的所有“深”导入，比如 <code>lodash</code> ，你可以 VSCode 中配置如下的偏好：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">typescript.preferences.autoImportSpecifierExcludeRegexes</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">^lodash/.*$</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>或者另一种情况，你想要禁止从包入口进行导入：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">typescript.preferences.autoImportSpecifierExcludeRegexes</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">^lodash$</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>使用如下的设置可以避免 <code>node:</code> 导入：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">typescript.preferences.autoImportSpecifierExcludeRegexes</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">^node:</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>为了指定某些正则的标志位，比如 <code>i</code> 或者 <code>u</code> ，你需要用斜杠包住正则表达式。当使用斜杠包住后，你需要转义其他内部的斜杠：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-json"><span class="line"><span style="--s-dark:#666666;--s-light:#999999;">{</span></span>
<span class="line"><span style="--s-dark:#B8A96577;--s-light:#99841877;">  &quot;</span><span style="--s-dark:#B8A965;--s-light:#998418;">typescript.preferences.autoImportSpecifierExcludeRegexes</span><span style="--s-dark:#B8A96577;--s-light:#99841877;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">:</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">^./lib/internal</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">        // 无需转义</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">/^.</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\\\</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">/lib</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\\\</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">/internal/</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 需要转义 - 注意开头和结尾的斜杠</span></span>
<span class="line"><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">    &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">/^.</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\\\</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">/lib</span><span style="--s-dark:#C99076;--s-light:#A65E2B;">\\\\</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">/internal/i</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">  // 需要转义 - 我们需要斜杠从而指定 i 标志</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  ]</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>可以为 JavaScript 配置同样的设置，即 <code>javascript.preferences.autoImportSpecifierExcludeRegexes</code> 。</p><p>注意这个选项可能与 <code>typescript.preferences.autoImportFileExcludePatterns</code> 会有一些重叠，但它们之间是存在差异。对于已经存在的 <code>autoImportFileExcludePatterns</code> ，它会接收一个 glob 规则的列表来排除文件路径。这可能对一些场景来说更加简单，比如你想要避免具体文件或文件夹的自动导入，但这种程度远远不够。比如，如果你使用 <code>@types/node</code> 包，这个包中同一个文件声明了 <code>fs</code> 和 <code>node:fs</code> ，所以我们无法使用 <code>autoImportExcludePatterns</code> 来过滤掉其中的一个。</p><p>新的 <code>autoImportSpecifierExcludeRegexes</code> 配置是具体于模块说明符的（即我们编写的导入语句的具体的字符串），所以我们可以编写一个规则来排除 <code>fs</code> 或者 <code>node:fs</code> 而不排除另外一个。更重要的是，我们可以编写规则来强制自动导入使用不同的说明符样式（比如使用 <code>./foo/bar.js</code> 而不是 <code>#foo/bar.js</code> ）。</p><p>更多的信息，可以查看这个 <a href="https://github.com/microsoft/TypeScript/pull/59543" target="_blank" rel="noopener">PR</a> 。</p><h2 id="需要注意的行为变更" tabindex="-1">需要注意的行为变更 <a class="header-anchor" href="#需要注意的行为变更">🔗</a></h2><h3 id="lib-d-ts" tabindex="-1">lib.d.ts <a class="header-anchor" href="#lib-d-ts">🔗</a></h3><p>详情请查看<a href="https://github.com/microsoft/TypeScript/issues/58764" target="_blank" rel="noopener">此处</a>。</p><h3 id="总是生成-tsbuildinfo-文件" tabindex="-1">总是生成 .tsbuildinfo 文件 <a class="header-anchor" href="#总是生成-tsbuildinfo-文件">🔗</a></h3><p>即使构建依赖过程存在错误，开启 <code>--build</code> 情况下也能够继续构建项目，为了在命令行种支持 <code>--noCheck</code> ， TypeScript 现在总是会为任何在 <code>--build</code> 下执行的项目生成一个 <code>.tsbuildinfo</code> 文件。无论 <code>--incremental</code> 是否打开都会执行这种情况。可以在此 <a href="https://github.com/microsoft/TypeScript/pull/58626" target="_blank" rel="noopener">PR</a> 查看相关信息。</p><h3 id="尊重-node-modules-中的文件扩展名和-package-json-文件" tabindex="-1">尊重 node_modules 中的文件扩展名和 package.json 文件 <a class="header-anchor" href="#尊重-node-modules-中的文件扩展名和-package-json-文件">🔗</a></h3><p>在 Node.js 支持 ECMAScript 模块的 v12 版本之前，对 TypeScript 来说从没有一种方式来知道在 <code>node_modules</code> 中找到的 <code>.d.ts</code> 文件对应的 JavaScript 文件是否是以 CommonJS 或者 ECMAScript 模块编写的。当绝大多数的 npm 包只使用 CommonJS 时，这问题不大，如果 TypeScript 对该文件发出疑问， 那么就只会假设所有内容的行为都是 CommonJS 。不幸的是，如果这个假设是错的那么会允许不安全的导入：</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">Copy</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// node_modules/dep/index.d.ts</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> declare</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> function</span><span style="--s-dark:#80A665;--s-light:#59873A;"> doSomething</span><span style="--s-dark:#666666;--s-light:#999999;">():</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> void</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// index.ts</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 如果 dep 是 CommonJS 模块则 OK </span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// 如果 dep 是 ECMAScript 模块则不 OK ，即使是在捆绑器中</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">import</span><span style="--s-dark:#BD976A;--s-light:#B07D48;"> dep</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> from</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">dep</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">dep</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">doSomething</span><span style="--s-dark:#666666;--s-light:#999999;">();</span></span></code></pre><p>在实践中，这不会频繁地出现。但是这些年随着 Node.js 开始支持 ECMAScript 模块， npm 上共享的 ESM 包的数量开始增长。幸运地是， Node.js 也引入了机制来帮助 TypeScript 区分一个文件是 ECMAScript 模块还是 CommonJS 模块，也就是 <code>.mjs</code> 和 <code>.cjs</code> 文件扩展名，以及 package.json 中的 <code>type</code> 字段。 TypeScript 4.7 添加了对这些标志的支持，同样也包括 <code>.mts</code> 和 <code>.cts</code> 文件。然而， TypeScript 只能在 <code>--module node16</code> 和 <code>--module nodenext</code> 下才能读取到这些标志，所以上面例子中不安全的导入对任何使用 <code>--module esnext</code> 和 <code>--moduleResolution bundler</code> 来说仍然是一个问题。</p><p>为了解决它， TypeScript 5.6 收集了模块的格式信息，用这些信息来解决诸如上面例子提到的所有 <code>module</code> 模式带来的歧义（除去 <code>amd</code> 、 <code>umd</code> 和 <code>system</code> ）。特定格式的文件扩展（ <code>.mts</code> 和 <code>.cts</code> ） 在任何地方都能被良好地解析， <code>node_modules</code> 内的依赖的 packages.json 的 <code>type</code> 字段也会被考虑到，无论 <code>module</code> 是否设置。先前，从技术上说可以将 CommonJS 输出生成到 <code>.mjs</code> 文件中，反之亦然。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// main.mts</span></span>
<span class="line"><span style="--s-dark:#4D9375;--s-light:#1E754F;">export</span><span style="--s-dark:#4D9375;--s-light:#1E754F;"> default</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">oops</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// $ tsc --module commonjs main.mts</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// main.mjs</span></span>
<span class="line"><span style="--s-dark:#BD976A;--s-light:#B07D48;">Object</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#80A665;--s-light:#59873A;">defineProperty</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#B8A965;--s-light:#998418;">exports</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">__esModule</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">,</span><span style="--s-dark:#666666;--s-light:#999999;"> { </span><span style="--s-dark:#B8A965;--s-light:#998418;">value</span><span style="--s-dark:#666666;--s-light:#999999;">: </span><span style="--s-dark:#4D9375;--s-light:#1E754F;">true</span><span style="--s-dark:#666666;--s-light:#999999;"> });</span></span>
<span class="line"><span style="--s-dark:#B8A965;--s-light:#998418;">exports</span><span style="--s-dark:#666666;--s-light:#999999;">.</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">default</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;"> &quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">oops</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">;</span></span></code></pre><p>现在， <code>.mts</code> 文件就不会输出为 CommonJS 了，同样 <code>.cts</code> 文件也不会输出为 ESM 了。</p><p>注意 TypeScript 5.5 的预发行版本提供了大部分的行为（此 <a href="https://github.com/microsoft/TypeScript/pull/57896" target="_blank" rel="noopener">PR</a> 查看更多实现细节），但在 5.6 这个行为只会对 <code>node_modules</code> 生效。</p><p>更多细节查看此 <a href="https://github.com/microsoft/TypeScript/pull/58825" target="_blank" rel="noopener">PR</a> 。</p><h3 id="计算属性上正确的-override-检查" tabindex="-1">计算属性上正确的 override 检查 <a class="header-anchor" href="#计算属性上正确的-override-检查">🔗</a></h3><p>先前，标记了 <code>override</code> 的计算属性不会正确地检查基类成员的存在性。同样，如果你使用 <code>noImplicitOverride</code> ，并且忘记对一个计算属性添加一个 <code>override</code> 修饰符，那么程序不会报错。</p><p>TypeScript 5.6 现在会正确地检查计算属性的这两种情况。</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-typescript"><span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">foo</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">foo</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">const </span><span style="--s-dark:#BD976A;--s-light:#B07D48;">bar</span><span style="--s-dark:#666666;--s-light:#999999;"> =</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Symbol</span><span style="--s-dark:#666666;--s-light:#999999;">(</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#C98A7D;--s-light:#B56959;">bar</span><span style="--s-dark:#C98A7D77;--s-light:#B5695977;">&quot;</span><span style="--s-dark:#666666;--s-light:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Base</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">  [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">bar</span><span style="--s-dark:#666666;--s-light:#999999;">]()</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">class</span><span style="--s-dark:#5DA994;--s-light:#2E8F82;"> Derived</span><span style="--s-dark:#CB7676;--s-light:#AB5959;"> extends</span><span style="--s-dark:#80A665;--s-light:#59873A;"> Base</span><span style="--s-dark:#666666;--s-light:#999999;"> {</span></span>
<span class="line"><span style="--s-dark:#CB7676;--s-light:#AB5959;">    override</span><span style="--s-dark:#666666;--s-light:#999999;"> [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">foo</span><span style="--s-dark:#666666;--s-light:#999999;">]()</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//           ~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// error: This member cannot have an &#39;override&#39; modifier because it is not declared in the base class &#39;Base&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">    [</span><span style="--s-dark:#BD976A;--s-light:#B07D48;">bar</span><span style="--s-dark:#666666;--s-light:#999999;">]()</span><span style="--s-dark:#666666;--s-light:#999999;"> {}</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">//  ~~~~~</span></span>
<span class="line"><span style="--s-dark:#758575DD;--s-light:#A0ADA0;">// error under noImplicitOverride: This member must have an &#39;override&#39; modifier because it overrides a member in the base class &#39;Base&#39;.</span></span>
<span class="line"><span style="--s-dark:#666666;--s-light:#999999;">}</span></span></code></pre><p>感谢 <a href="https://github.com/a-tarasyuk" target="_blank" rel="noopener">Oleksandr Tarasiuk</a> 修复了这个问题，相关的 <a href="https://github.com/microsoft/TypeScript/pull/57146" target="_blank" rel="noopener">PR</a> 。</p>`,139)])))}};export{v as categories,F as date,I as default,x as key,q as meta,E as tags,m as title,S as updated,T as wordCount};
