import{createElementBlock as t,openBlock as s,createStaticVNode as a}from"vue";import{c}from"./app-2Hgo7EZs.js";import"nprogress";import"pinia-plugin-persistedstate";import"vue-router";import"vue-router-better-scroller";import"@vueuse/core";import"@vueuse/components";import"@vueuse/router";import"octokit";import"pinia";import"date-fns";const d={class:"kan-doc"},w="记一次 git 配置 ssh 密钥后依然无法 clone 仓库的问题",H=["ssh","git","rsa","sha"],_=["编程"],x=1670318890,A="2022-12-06T17:28:10.000Z",C="2023-02-13T18:28:45.000Z",T=2903,R=[{property:"og:title",content:"记一次 git 配置 ssh 密钥后依然无法 clone 仓库的问题"},{name:"twitter:title",content:"记一次 git 配置 ssh 密钥后依然无法 clone 仓库的问题"}],D={__name:"记一次-git-配置-ssh-密钥后依然无法-clone-仓库的问题",setup(n,{expose:o}){return o({frontmatter:{title:"记一次 git 配置 ssh 密钥后依然无法 clone 仓库的问题",tags:["ssh","git","rsa","sha"],categories:["编程"],key:1670318890,date:"2022-12-06T17:28:10.000Z",updated:"2023-02-13T18:28:45.000Z",wordCount:2903,meta:[{property:"og:title",content:"记一次 git 配置 ssh 密钥后依然无法 clone 仓库的问题"},{name:"twitter:title",content:"记一次 git 配置 ssh 密钥后依然无法 clone 仓库的问题"}]}}),c({title:"记一次 git 配置 ssh 密钥后依然无法 clone 仓库的问题",meta:[{property:"og:title",content:"记一次 git 配置 ssh 密钥后依然无法 clone 仓库的问题"},{name:"twitter:title",content:"记一次 git 配置 ssh 密钥后依然无法 clone 仓库的问题"}]}),(p,e)=>(s(),t("div",d,e[0]||(e[0]=[a('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言">🔗</a></h1><p>记一次 <code>git</code> 配置 <code>ssh</code> 密钥后依然无法 <code>clone</code> 仓库的问题</p><p>最近刚好广州这边疫情严重，电脑又放公司了，所以得在一台新的电脑上配环境</p><p>首先就是这个 <code>git</code> 了，配了 <code>git</code> 才能拉代码，然后开始划水（<s>不是</s></p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文">🔗</a></h1><p>虽然我们公司是自己搭的 <code>gitea</code> 来存储代码的，但是 <code>ssh</code> 配置和 <code>github</code> 基本一样</p><p>都是在本地生成 <code>ssh</code> 密钥，然后把公钥放到 <code>gitea</code> 配置里即可</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/12/06/202212061628803.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/12/06/202212061628803.avif" alt=""></a></p><p>生成 <code>ssh</code> 密钥的操作还是很简单的，在 <code>window</code> 下执行</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-text"><span class="line"><span>ssh-keygen -t rsa -C &quot;1607611087@qq.com&quot;</span></span></code></pre><p>然后一路回车即可，密钥就放在了 <code>C:\\Users\\${user}\\.ssh</code> 下</p><p>公钥为 <code>id_rsa.pub</code> ，私钥为 <code>id_rsa</code></p><p>然后吧 <code>id_rsa.pub</code> 的内容放 <code>gitea</code> 配置里即可</p><p>默认情况下，生成的密钥是 <code>RSA</code> 类型的，但是当我尝试拉取代码的时候，报了一个 <code>permission denied (publickey)</code></p><p>但是奇怪的是我使用 <code>ssh -v</code> 进行测试的时候是完全正常的，如下</p><p><a data-fancybox="doc-gallery" href="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/12/06/202212061524469.avif" target="_blank" rel="noopener noreferrer"><img src="https://fastly.jsdelivr.net/gh/Dedicatus546/image@main/2022/12/06/202212061524469.avif" alt=""></a></p><p>后来百度之后才发现，应该是高版本的 <code>openSSH</code> 不再支持依赖 <code>sha1</code> 的 <code>rsa</code> 算法，默认情况下使用 <code>rsa-sha2-512</code> 算法</p><p>应该是服务端不支持该算法导致无法拉取仓库（但是为啥 <code>ssh -v</code> 能成功呢，好奇怪）</p><p>从 <code>openSSH 8.2</code> 开始， <code>release</code> 中就说明了该情况 <a href="https://www.openssh.com/txt/release-8.2" target="_blank" rel="noopener">Release 8.2 Notes - openSSH</a></p><blockquote><p>It is now possible to perform chosen-prefix attacks against the SHA-1 hash algorithm for less than USD$50K. For this reason, we will be disabling the &quot;ssh-rsa&quot; public key signature algorithm that depends on SHA-1 by default in a near-future release.</p></blockquote><p>简单点讲，就是官方发现，五万美元就能攻破 <code>sha1</code> 散列算法，认为这个算法不安全了，所以废弃掉</p><p>下面还有一段</p><blockquote><p>ssh(1), sshd(8), ssh-keygen(1): this release removes the &quot;ssh-rsa&quot;(RSA/SHA1) algorithm from those accepted for certificate signatures(i.e. the client and server CASignatureAlgorithms option) and will use the rsa-sha2-512 signature algorithm by default when the ssh-keygen(1) CA signs new certificates.</p></blockquote><p>即这个版本删除依赖 <code>sha1</code> 的 <code>rsa</code> 算法，对于 <code>ssh-keygen</code> ，现在会默认使用 <code>rsa-sha2-512</code></p><p>当然使用 <code>sha2</code> 的 <code>rsa</code> 不仅仅只是本地支持就行，服务端也需要在高于某个版本下才能正常工作</p><p>在 <code>openSSH 8.5 release notes</code> 中，提及了 <code>rsa-sha2-256/512</code> 需在 <code>openSSH 7.2</code> 及以上版本才能支持 <a href="https://www.openssh.com/txt/release-8.5" target="_blank" rel="noopener">Release 8.5 Notes - openSSH</a></p><blockquote><p>The RFC8332 RSA SHA-2 signature algorithms rsa-sha2-256/512. These algorithms have the advantage of using the same key type as &quot;ssh-rsa&quot; but use the safe SHA-2 hash algorithms. These have been supported since OpenSSH 7.2 and are already used by default if the client and server support them.</p></blockquote><p>讲了这么多，解决办法很简单，就是使用另一个加密算法，比如 <code>ed25519</code> 算法，<code>ecdsa-sha2-nistp256/384/521</code> 算法</p><p>前者从 <code>6.5</code> 开始支持，后者从 <code>5.7</code> 以上开始支持，根据服务端的 <code>openSSH</code> 版本来确定即可</p><p>我去问了下公司其他人服务器上的 <code>openSSH</code> 版本，说是 <code>7.5</code> 的？？？？那为啥 <code>rsa-sha2-256/512</code> 不行？？？</p><p>无法理解，最后我改用了 <code>ed25519</code> 生成密钥</p><pre class="shiki shiki-themes vitesse-dark vitesse-light" style="--s-dark:#dbd7caee;--s-light:#393a34;--s-dark-bg:#121212;--s-light-bg:#ffffff;" tabindex="0"><code class="language-text"><span class="line"><span>ssh-keygen -t ed25519 -C &quot;1607611087@qq.com&quot;</span></span></code></pre><p>配置公钥，<code>git clone</code> 一起喝成，成功拉下了代码，然后开始发呆…</p><p>当然 <code>github</code> 平台是完全没问题的，可能是我司的 <code>gitea</code> 平台它有自己的想法吧…</p><p>严重怀疑就是服务端 <code>openSSH</code> 有问题…</p><h1 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记">🔗</a></h1><p>这里我也找了相关的新闻，应该是谷歌通过碰撞能够使得两个文件产生相同的 sha1 值，文章地址 <a href="http://security.googleblog.com/2017/02/announcing-first-sha1-collision.html" target="_blank" rel="noopener">Announcing the first SHA1 collision</a></p><p><code>17</code> 年的新闻了，不过 <code>openSSH</code> 是在 <code>20</code> 年才废弃了 <code>sha1</code> ，在一些对安全性不是特别敏感的场合，其实使用 <code>sha1</code> 是完全足够的</p><p>比如说像下载文件时的散列校验，直到现在，也都还能看到 <code>md5</code> 和 <code>sha1</code> 的身影，不过我是没怎么校验（😂）</p>',39)])))}};export{_ as categories,A as date,D as default,x as key,R as meta,H as tags,w as title,C as updated,T as wordCount};
